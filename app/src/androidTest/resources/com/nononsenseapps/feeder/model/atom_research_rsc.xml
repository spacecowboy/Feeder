<feed xmlns="http://www.w3.org/2005/Atom">
  <title>research!rsc</title>
  <id>tag:research.swtch.com,2012:research.swtch.com</id>
  <link rel="self" href="http://research.swtch.com/feed.atom"></link>
  <updated>2017-04-24T10:01:00-04:00</updated>
  <author>
    <name>Russ Cox</name>
    <uri>https://swtch.com/~rsc</uri>
    <email>rsc@swtch.com</email>
  </author>
  <entry>
    <title>Glob Matching Can Be Simple And Fast Too</title>
    <id>tag:research.swtch.com,2012:research.swtch.com/glob</id>
    <link rel="alternate" href="http://research.swtch.com/glob"></link>
    <published>2017-04-24T10:00:00-04:00</published>
    <updated>2017-04-24T10:01:00-04:00</updated>
    <summary type="text">Regular expression exponentials in another form.</summary>
    <content type="html">&lt;p class=lp&gt;Here&amp;rsquo;s a straightforward benchmark.&#xA;Time how long it takes to run &lt;code&gt;ls&lt;/code&gt; (&lt;code&gt;a*&lt;/code&gt;)&lt;sup&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sup&gt;&lt;code&gt;b&lt;/code&gt;&#xA;in a directory with a single file named &lt;code&gt;a&lt;/code&gt;&lt;sup&gt;100&lt;/sup&gt;,&#xA;compared to running &lt;code&gt;ls&lt;/code&gt; &lt;code&gt;|&lt;/code&gt; &lt;code&gt;grep&lt;/code&gt; (&lt;code&gt;a.*&lt;/code&gt;)&lt;sup&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sup&gt;&lt;code&gt;b&lt;/code&gt;.&#xA;Superscripts denote string repetition and parentheses are for grouping only,&#xA;so that when &lt;i&gt;n&lt;/i&gt; is 3, we&amp;rsquo;re running &lt;code&gt;ls&lt;/code&gt; &lt;code&gt;a*a*a*b&lt;/code&gt; in a directory containing the single file &lt;code&gt;aaa&lt;/code&gt;&amp;hellip;&lt;code&gt;aaa&lt;/code&gt; (100 &lt;code&gt;a&lt;/code&gt;&amp;rsquo;s),&#xA;compared against &lt;code&gt;ls&lt;/code&gt; &lt;code&gt;|&lt;/code&gt; &lt;code&gt;grep&lt;/code&gt; &lt;code&gt;a.*a.*a.*b&lt;/code&gt; in the same directory.&lt;/p&gt;&#xA;&#xA;&lt;div class=fig&gt;&#xA;&lt;center&gt;&#xA;&lt;table cellspacing=0 cellpadding=0 border=0&gt;&#xA;&lt;tr&gt;&lt;td valign=bottom&gt;&#xA;&#xA;&lt;svg width=&#34;234pt&#34; height=&#34;151pt&#34; viewBox=&#34;0 0 234 151&#34;&#xA;     xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&#xA;&lt;defs&gt;&#xA;&lt;clipPath id=&#34;grid&#34;&gt;&lt;rect x=&#34;36.00&#34; y=&#34;7.20&#34; width=&#34;180.00&#34; height=&#34;108.00&#34;/&gt;&lt;/clipPath&gt;&lt;/defs&gt;&#xA;&lt;path d=&#34;M 36.00 115.20 L 36.00 7.20 M 36.00 115.20 L 216.00 115.20 M 36.00 115.20 L 36.00 120.20 M 58.50 115.20 L 58.50 120.20 M 81.00 115.20 L 81.00 120.20 M 103.50 115.20 L 103.50 120.20 M 126.00 115.20 L 126.00 120.20 M 148.50 115.20 L 148.50 120.20 M 171.00 115.20 L 171.00 120.20 M 193.50 115.20 L 193.50 120.20 M 216.00 115.20 L 216.00 120.20 M 36.00 115.20 L 31.00 115.20 M 36.00 100.30 L 31.00 100.30 M 36.00 85.41 L 31.00 85.41 M 36.00 70.51 L 31.00 70.51 M 36.00 55.61 L 31.00 55.61 M 36.00 40.72 L 31.00 40.72 M 36.00 25.82 L 31.00 25.82 M 36.00 10.92 L 31.00 10.92 &#34; fill=&#34;transparent&#34; stroke=&#34;black&#34;/&gt;&#xA;&lt;text x=&#34;36.00&#34; y=&#34;120.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;0&lt;/text&gt;&#xA;&lt;text x=&#34;58.50&#34; y=&#34;120.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;1&lt;/text&gt;&#xA;&lt;text x=&#34;81.00&#34; y=&#34;120.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;2&lt;/text&gt;&#xA;&lt;text x=&#34;103.50&#34; y=&#34;120.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;3&lt;/text&gt;&#xA;&lt;text x=&#34;126.00&#34; y=&#34;120.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;4&lt;/text&gt;&#xA;&lt;text x=&#34;148.50&#34; y=&#34;120.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;5&lt;/text&gt;&#xA;&lt;text x=&#34;171.00&#34; y=&#34;120.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;6&lt;/text&gt;&#xA;&lt;text x=&#34;193.50&#34; y=&#34;120.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;7&lt;/text&gt;&#xA;&lt;text x=&#34;216.00&#34; y=&#34;120.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;8&lt;/text&gt;&#xA;&lt;text x=&#34;31.00&#34; y=&#34;115.20&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;0&lt;/text&gt;&#xA;&lt;text x=&#34;31.00&#34; y=&#34;100.30&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;1&lt;/text&gt;&#xA;&lt;text x=&#34;31.00&#34; y=&#34;85.41&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;2&lt;/text&gt;&#xA;&lt;text x=&#34;31.00&#34; y=&#34;70.51&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;3&lt;/text&gt;&#xA;&lt;text x=&#34;31.00&#34; y=&#34;55.61&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;4&lt;/text&gt;&#xA;&lt;text x=&#34;31.00&#34; y=&#34;40.72&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;5&lt;/text&gt;&#xA;&lt;text x=&#34;31.00&#34; y=&#34;25.82&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;6&lt;/text&gt;&#xA;&lt;text x=&#34;31.00&#34; y=&#34;10.92&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;7&lt;/text&gt;&#xA;&lt;text x=&#34;126.00&#34; y=&#34;115.20&#34; text-anchor=&#34;middle&#34; font-size=&#34;11&#34; dy=&#34;2.5em&#34;&gt;pattern size &lt;tspan style=&#34;font-style: italic&#34;&gt;n&lt;/tspan&gt;&lt;/text&gt;&#xA;&lt;g transform=&#34;translate(36.00 61.20) rotate(-90)&#34;&gt;&lt;text x=&#34;0&#34; y=&#34;0&#34; text-anchor=&#34;middle&#34; font-size=&#34;11&#34; dy=&#34;-2em&#34;&gt;time (minutes)&lt;/text&gt;&lt;/g&gt;&#xA;&lt;g clip-path=&#34;grid&#34;&gt;&#xA;&lt;path d=&#34;M 36.00 115.20 L 58.50 115.20 L 81.00 115.20 L 103.50 115.20 L 126.00 115.20 L 148.50 115.16 L 171.00 114.60 L 193.50 106.44 L 216.00 8.14&#34; fill=&#34;transparent&#34; stroke=&#34;#c00&#34; stroke-width=&#34;2.0&#34;/&gt;&#xA;&lt;/g&gt;&#xA;&lt;text x=&#34;193.50&#34; y=&#34;25.82&#34; text-anchor=&#34;end&#34; dy=&#34;0.3em&#34; font-size=&#34;11&#34;&gt;&lt;tspan style=&#34;font-family: &#39;Inconsolata&#39;, monospace&#34;&gt;ls&lt;/tspan&gt;&lt;/text&gt;&#xA;&lt;/svg&gt;&#xA;&#xA;&lt;td width=20&gt;&#xA;&lt;td valign=bottom&gt;&#xA;&#xA;&lt;svg width=&#34;234pt&#34; height=&#34;151pt&#34; viewBox=&#34;0 0 234 151&#34;&#xA;     xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&#xA;&lt;defs&gt;&#xA;&lt;clipPath id=&#34;grid&#34;&gt;&lt;rect x=&#34;36.00&#34; y=&#34;7.20&#34; width=&#34;180.00&#34; height=&#34;108.00&#34;/&gt;&lt;/clipPath&gt;&lt;/defs&gt;&#xA;&lt;path d=&#34;M 36.00 115.20 L 36.00 7.20 M 36.00 115.20 L 216.00 115.20 M 36.00 115.20 L 36.00 120.20 M 45.00 115.20 L 45.00 118.20 M 54.00 115.20 L 54.00 120.20 M 63.00 115.20 L 63.00 118.20 M 72.00 115.20 L 72.00 120.20 M 81.00 115.20 L 81.00 118.20 M 90.00 115.20 L 90.00 120.20 M 99.00 115.20 L 99.00 118.20 M 108.00 115.20 L 108.00 120.20 M 117.00 115.20 L 117.00 118.20 M 126.00 115.20 L 126.00 120.20 M 135.00 115.20 L 135.00 118.20 M 144.00 115.20 L 144.00 120.20 M 153.00 115.20 L 153.00 118.20 M 162.00 115.20 L 162.00 120.20 M 171.00 115.20 L 171.00 118.20 M 180.00 115.20 L 180.00 120.20 M 189.00 115.20 L 189.00 118.20 M 198.00 115.20 L 198.00 120.20 M 207.00 115.20 L 207.00 118.20 M 216.00 115.20 L 216.00 120.20 M 36.00 115.20 L 31.00 115.20 M 36.00 100.30 L 31.00 100.30 M 36.00 85.41 L 31.00 85.41 M 36.00 70.51 L 31.00 70.51 M 36.00 55.61 L 31.00 55.61 M 36.00 40.72 L 31.00 40.72 M 36.00 25.82 L 31.00 25.82 M 36.00 10.92 L 31.00 10.92 &#34; fill=&#34;transparent&#34; stroke=&#34;black&#34;/&gt;&#xA;&lt;text x=&#34;36.00&#34; y=&#34;120.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;0&lt;/text&gt;&#xA;&lt;text x=&#34;54.00&#34; y=&#34;120.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;10&lt;/text&gt;&#xA;&lt;text x=&#34;72.00&#34; y=&#34;120.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;20&lt;/text&gt;&#xA;&lt;text x=&#34;90.00&#34; y=&#34;120.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;30&lt;/text&gt;&#xA;&lt;text x=&#34;108.00&#34; y=&#34;120.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;40&lt;/text&gt;&#xA;&lt;text x=&#34;126.00&#34; y=&#34;120.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;50&lt;/text&gt;&#xA;&lt;text x=&#34;144.00&#34; y=&#34;120.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;60&lt;/text&gt;&#xA;&lt;text x=&#34;162.00&#34; y=&#34;120.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;70&lt;/text&gt;&#xA;&lt;text x=&#34;180.00&#34; y=&#34;120.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;80&lt;/text&gt;&#xA;&lt;text x=&#34;198.00&#34; y=&#34;120.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;90&lt;/text&gt;&#xA;&lt;text x=&#34;216.00&#34; y=&#34;120.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;100&lt;/text&gt;&#xA;&lt;text x=&#34;31.00&#34; y=&#34;115.20&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;0&lt;/text&gt;&#xA;&lt;text x=&#34;31.00&#34; y=&#34;100.30&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;1&lt;/text&gt;&#xA;&lt;text x=&#34;31.00&#34; y=&#34;85.41&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;2&lt;/text&gt;&#xA;&lt;text x=&#34;31.00&#34; y=&#34;70.51&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;3&lt;/text&gt;&#xA;&lt;text x=&#34;31.00&#34; y=&#34;55.61&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;4&lt;/text&gt;&#xA;&lt;text x=&#34;31.00&#34; y=&#34;40.72&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;5&lt;/text&gt;&#xA;&lt;text x=&#34;31.00&#34; y=&#34;25.82&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;6&lt;/text&gt;&#xA;&lt;text x=&#34;31.00&#34; y=&#34;10.92&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;7&lt;/text&gt;&#xA;&lt;text x=&#34;126.00&#34; y=&#34;115.20&#34; text-anchor=&#34;middle&#34; font-size=&#34;11&#34; dy=&#34;2.5em&#34;&gt;pattern size &lt;tspan style=&#34;font-style: italic&#34;&gt;n&lt;/tspan&gt;&lt;/text&gt;&#xA;&lt;g transform=&#34;translate(36.00 61.20) rotate(-90)&#34;&gt;&lt;text x=&#34;0&#34; y=&#34;0&#34; text-anchor=&#34;middle&#34; font-size=&#34;11&#34; dy=&#34;-2em&#34;&gt;time (ms)&lt;/text&gt;&lt;/g&gt;&#xA;&lt;g clip-path=&#34;grid&#34;&gt;&#xA;&lt;path d=&#34;M 36.00 93.76 L 37.80 93.21 L 39.60 93.10 L 41.40 92.93 L 43.20 92.66 L 45.00 92.50 L 46.80 92.28 L 48.60 92.03 L 50.40 91.81 L 52.20 91.62 L 54.00 91.35 L 55.80 91.06 L 57.60 90.90 L 59.40 90.74 L 61.20 90.32 L 63.00 90.05 L 64.80 89.95 L 66.60 89.57 L 68.40 89.44 L 70.20 89.05 L 72.00 88.75 L 73.80 88.46 L 75.60 87.87 L 77.40 87.59 L 79.20 87.39 L 81.00 87.12 L 82.80 86.91 L 84.60 86.52 L 86.40 86.22 L 88.20 85.47 L 90.00 85.26 L 91.80 85.04 L 93.60 84.61 L 95.40 84.28 L 97.20 83.87 L 99.00 83.38 L 100.80 83.05 L 102.60 82.74 L 104.40 82.29 L 106.20 81.94 L 108.00 81.48 L 109.80 81.22 L 111.60 80.53 L 113.40 80.13 L 115.20 79.52 L 117.00 79.08 L 118.80 78.61 L 120.60 78.38 L 122.40 77.72 L 124.20 77.39 L 126.00 76.75 L 127.80 76.17 L 129.60 75.98 L 131.40 75.30 L 133.20 74.48 L 135.00 74.34 L 136.80 73.88 L 138.60 73.28 L 140.40 72.81 L 142.20 71.83 L 144.00 71.47 L 145.80 70.95 L 147.60 70.50 L 149.40 69.91 L 151.20 69.51 L 153.00 68.55 L 154.80 68.14 L 156.60 67.31 L 158.40 66.57 L 160.20 66.20 L 162.00 65.24 L 163.80 64.83 L 165.60 64.31 L 167.40 63.50 L 169.20 62.77 L 171.00 62.13 L 172.80 61.15 L 174.60 60.63 L 176.40 60.05 L 178.20 58.81 L 180.00 58.23 L 181.80 57.39 L 183.60 56.55 L 185.40 56.37 L 187.20 54.85 L 189.00 54.50 L 190.80 53.73 L 192.60 52.84 L 194.40 52.14 L 196.20 50.94 L 198.00 50.67 L 199.80 49.73 L 201.60 49.34 L 203.40 48.32 L 205.20 47.57 L 207.00 46.87 L 208.80 45.99 L 210.60 44.91 L 212.40 44.19 L 214.20 43.28&#34; fill=&#34;transparent&#34; stroke=&#34;#00f&#34; stroke-width=&#34;2.0&#34;/&gt;&#xA;&lt;/g&gt;&#xA;&lt;text x=&#34;193.50&#34; y=&#34;25.82&#34; text-anchor=&#34;end&#34; dy=&#34;0.3em&#34; font-size=&#34;11&#34;&gt;&lt;tspan style=&#34;font-family: &#39;Inconsolata&#39;, monospace&#34;&gt;ls | grep&lt;/tspan&gt;&lt;/text&gt;&#xA;&lt;/svg&gt;&#xA;&#xA;&lt;/table&gt;&#xA;&lt;/center&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p class=lp&gt;For &lt;i&gt;n&lt;/i&gt;&amp;nbsp;=&amp;nbsp;8, &lt;code&gt;ls&lt;/code&gt; takes 7.19 minutes while &lt;code&gt;ls&lt;/code&gt; &lt;code&gt;|&lt;/code&gt; &lt;code&gt;grep&lt;/code&gt; runs in 1.56 milliseconds,&#xA;making it 276,538X faster.&#xA;If you&amp;rsquo;ve read my 2007 article “&lt;a href=&#34;https://swtch.com/~rsc/regexp/regexp1.html&#34;&gt;Regular Expression Matching Can Be Simple And Fast (but is slow in Java, Perl, PHP, Python, Ruby, &amp;hellip;)&lt;/a&gt;,”&#xA;those graphs may look familiar.&#xA;Clearly the &lt;code&gt;ls&lt;/code&gt; command is using an exponential pattern-matching algorithm,&#xA;while the &lt;code&gt;ls&lt;/code&gt; &lt;code&gt;|&lt;/code&gt; &lt;code&gt;grep&lt;/code&gt; command is using a nearly linear one.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Shells&lt;/h2&gt;&#xA;&#xA;&lt;p class=lp&gt;In fact it&amp;rsquo;s the shell that evaluates the &lt;a href=&#34;https://en.wikipedia.org/wiki/Glob_%28programming%29&#34;&gt;glob pattern&lt;/a&gt; in the first command, not &lt;code&gt;ls&lt;/code&gt;,&#xA;so let&amp;rsquo;s repeat the experiment with a variety of shells.&#xA;All the tests were run on an HP Z440 workstation with 3.5 GHz Intel Xeon E5-1650 v3 processors&#xA;running Ubuntu 14.04.&lt;/p&gt;&#xA;&#xA;&lt;div class=fig&gt;&#xA;&lt;center&gt;&#xA;&lt;table cellspacing=0 cellpadding=0 border=0&gt;&lt;tr&gt;&lt;td&gt;&#xA;&lt;div class=box&gt;&#xA;&lt;center&gt;&#xA;&lt;b&gt;Time to match&#xA;(&lt;code&gt;a*&lt;/code&gt;)&lt;sup&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sup&gt;&lt;code&gt;b&lt;/code&gt;&#xA;against &#xA;&lt;code&gt;a&lt;/code&gt;&lt;sup&gt;100&lt;/sup&gt; in shells&lt;/b&gt;&#xA;&lt;br&gt;&#xA;&#xA;&lt;svg width=&#34;540pt&#34; height=&#34;295pt&#34; viewBox=&#34;0 0 540 295&#34;&#xA;     xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&#xA;&lt;defs&gt;&#xA;&lt;clipPath id=&#34;grid&#34;&gt;&lt;rect x=&#34;54.00&#34; y=&#34;7.20&#34; width=&#34;378.00&#34; height=&#34;252.00&#34;/&gt;&lt;/clipPath&gt;&lt;/defs&gt;&#xA;&lt;path d=&#34;M 54.00 259.20 L 54.00 7.20 M 54.00 259.20 L 432.00 259.20 M 54.00 259.20 L 54.00 264.20 M 72.90 259.20 L 72.90 262.20 M 91.80 259.20 L 91.80 262.20 M 110.70 259.20 L 110.70 262.20 M 129.60 259.20 L 129.60 262.20 M 148.50 259.20 L 148.50 264.20 M 167.40 259.20 L 167.40 262.20 M 186.30 259.20 L 186.30 262.20 M 205.20 259.20 L 205.20 262.20 M 224.10 259.20 L 224.10 262.20 M 243.00 259.20 L 243.00 264.20 M 261.90 259.20 L 261.90 262.20 M 280.80 259.20 L 280.80 262.20 M 299.70 259.20 L 299.70 262.20 M 318.60 259.20 L 318.60 262.20 M 337.50 259.20 L 337.50 264.20 M 356.40 259.20 L 356.40 262.20 M 375.30 259.20 L 375.30 262.20 M 394.20 259.20 L 394.20 262.20 M 413.10 259.20 L 413.10 262.20 M 432.00 259.20 L 432.00 264.20 M 54.00 10.11 L 51.00 10.11 M 54.00 19.14 L 49.00 19.14 M 54.00 20.51 L 51.00 20.51 M 54.00 22.05 L 51.00 22.05 M 54.00 23.79 L 51.00 23.79 M 54.00 25.80 L 51.00 25.80 M 54.00 28.17 L 51.00 28.17 M 54.00 31.08 L 51.00 31.08 M 54.00 34.83 L 51.00 34.83 M 54.00 40.12 L 51.00 40.12 M 54.00 49.15 L 49.00 49.15 M 54.00 50.52 L 51.00 50.52 M 54.00 52.06 L 51.00 52.06 M 54.00 53.80 L 51.00 53.80 M 54.00 55.81 L 51.00 55.81 M 54.00 58.18 L 51.00 58.18 M 54.00 61.09 L 51.00 61.09 M 54.00 64.84 L 51.00 64.84 M 54.00 70.12 L 51.00 70.12 M 54.00 79.16 L 49.00 79.16 M 54.00 80.53 L 51.00 80.53 M 54.00 82.06 L 51.00 82.06 M 54.00 83.80 L 51.00 83.80 M 54.00 85.81 L 51.00 85.81 M 54.00 88.19 L 51.00 88.19 M 54.00 91.10 L 51.00 91.10 M 54.00 94.85 L 51.00 94.85 M 54.00 100.13 L 51.00 100.13 M 54.00 109.16 L 49.00 109.16 M 54.00 110.54 L 51.00 110.54 M 54.00 112.07 L 51.00 112.07 M 54.00 113.81 L 51.00 113.81 M 54.00 115.82 L 51.00 115.82 M 54.00 118.20 L 51.00 118.20 M 54.00 121.10 L 51.00 121.10 M 54.00 124.85 L 51.00 124.85 M 54.00 130.14 L 51.00 130.14 M 54.00 139.17 L 49.00 139.17 M 54.00 140.54 L 51.00 140.54 M 54.00 142.08 L 51.00 142.08 M 54.00 143.82 L 51.00 143.82 M 54.00 145.83 L 51.00 145.83 M 54.00 148.20 L 51.00 148.20 M 54.00 151.11 L 51.00 151.11 M 54.00 154.86 L 51.00 154.86 M 54.00 160.14 L 51.00 160.14 M 54.00 169.18 L 49.00 169.18 M 54.00 170.55 L 51.00 170.55 M 54.00 172.09 L 51.00 172.09 M 54.00 173.83 L 51.00 173.83 M 54.00 175.84 L 51.00 175.84 M 54.00 178.21 L 51.00 178.21 M 54.00 181.12 L 51.00 181.12 M 54.00 184.87 L 51.00 184.87 M 54.00 190.15 L 51.00 190.15 M 54.00 199.19 L 49.00 199.19 M 54.00 200.56 L 51.00 200.56 M 54.00 202.09 L 51.00 202.09 M 54.00 203.83 L 51.00 203.83 M 54.00 205.84 L 51.00 205.84 M 54.00 208.22 L 51.00 208.22 M 54.00 211.13 L 51.00 211.13 M 54.00 214.88 L 51.00 214.88 M 54.00 220.16 L 51.00 220.16 M 54.00 229.19 L 49.00 229.19 M 54.00 230.57 L 51.00 230.57 M 54.00 232.10 L 51.00 232.10 M 54.00 233.84 L 51.00 233.84 M 54.00 235.85 L 51.00 235.85 M 54.00 238.23 L 51.00 238.23 M 54.00 241.13 L 51.00 241.13 M 54.00 244.88 L 51.00 244.88 M 54.00 250.17 L 51.00 250.17 M 54.00 259.20 L 49.00 259.20 &#34; fill=&#34;transparent&#34; stroke=&#34;black&#34;/&gt;&#xA;&lt;text x=&#34;54.00&#34; y=&#34;264.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;0&lt;/text&gt;&#xA;&lt;text x=&#34;148.50&#34; y=&#34;264.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;5&lt;/text&gt;&#xA;&lt;text x=&#34;243.00&#34; y=&#34;264.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;10&lt;/text&gt;&#xA;&lt;text x=&#34;337.50&#34; y=&#34;264.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;15&lt;/text&gt;&#xA;&lt;text x=&#34;432.00&#34; y=&#34;264.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;20&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;19.14&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;10000 s&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;49.15&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;1000 s&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;79.16&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;100 s&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;109.16&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;10 s&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;139.17&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;1 s&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;169.18&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;100 ms&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;199.19&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;10 ms&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;229.19&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;1 ms&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;259.20&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;100 us&lt;/text&gt;&#xA;&lt;text x=&#34;243.00&#34; y=&#34;259.20&#34; text-anchor=&#34;middle&#34; font-size=&#34;11&#34; dy=&#34;2.5em&#34;&gt;pattern size &lt;tspan style=&#34;font-style: italic&#34;&gt;n&lt;/tspan&gt;&lt;/text&gt;&#xA;&lt;g transform=&#34;translate(54.00 133.20) rotate(-90)&#34;&gt;&lt;text x=&#34;0&#34; y=&#34;0&#34; text-anchor=&#34;middle&#34; font-size=&#34;11&#34; dy=&#34;-4em&#34;&gt;time&lt;/text&gt;&lt;/g&gt;&#xA;&lt;g clip-path=&#34;grid&#34;&gt;&#xA;&lt;path d=&#34;M 54.00 209.74 L 72.90 204.94 L 91.80 207.77 L 110.70 186.36 L 129.60 148.18 L 148.50 110.51 L 167.40 74.52 L 186.30 40.43 L 205.20 8.32&#34; fill=&#34;transparent&#34; stroke=&#34;#F44336&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;path d=&#34;M 54.00 228.55 L 72.90 231.02 L 91.80 229.51 L 110.70 216.70 L 129.60 179.56 L 148.50 142.02 L 167.40 105.84 L 186.30 71.66 L 205.20 38.81&#34; fill=&#34;transparent&#34; stroke=&#34;#FF9800&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;path d=&#34;M 54.00 218.88 L 72.90 211.48 L 91.80 213.08 L 110.70 201.35 L 129.60 181.70 L 148.50 147.79 L 167.40 112.18 L 186.30 77.89 L 205.20 45.59&#34; fill=&#34;transparent&#34; stroke=&#34;#FFEB3B&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;path d=&#34;M 54.00 219.59 L 72.90 211.30 L 91.80 211.19 L 110.70 206.74 L 129.60 190.17 L 148.50 153.89 L 167.40 117.20 L 186.30 82.26 L 205.20 49.22&#34; fill=&#34;transparent&#34; stroke=&#34;#00BCD4&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;path d=&#34;M 54.00 222.14 L 72.90 223.88 L 91.80 225.22 L 110.70 214.51 L 129.60 190.20 L 148.50 158.35 L 167.40 122.14 L 186.30 88.07 L 205.20 55.77&#34; fill=&#34;transparent&#34; stroke=&#34;#4CAF50&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;path d=&#34;M 54.00 221.94 L 72.90 221.31 L 91.80 219.68 L 110.70 215.59 L 129.60 196.91 L 148.50 164.89 L 167.40 127.97 L 186.30 93.09 L 205.20 60.02&#34; fill=&#34;transparent&#34; stroke=&#34;#009688&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;path d=&#34;M 54.00 232.71 L 72.90 236.88 L 91.80 237.09 L 110.70 234.49 L 129.60 211.28 L 148.50 173.90 L 167.40 138.01 L 186.30 103.73 L 205.20 71.05&#34; fill=&#34;transparent&#34; stroke=&#34;#2196F3&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;path d=&#34;M 54.00 189.23 L 72.90 189.77 L 91.80 189.62 L 110.70 185.52 L 129.60 189.65 L 148.50 189.85 L 167.40 189.90 L 186.30 189.66 L 205.20 189.65 L 224.10 189.76 L 243.00 189.53 L 261.90 188.03 L 280.80 183.99 L 299.70 189.74 L 318.60 185.46 L 337.50 189.86 L 356.40 189.72 L 375.30 185.15 L 394.20 189.75 L 413.10 189.65 L 432.00 184.47&#34; fill=&#34;transparent&#34; stroke=&#34;#9C27B0&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;/g&gt;&#xA;&lt;path d=&#34; M 223.20 8.32 L 241.20 8.32&#34; fill=&#34;transparent&#34; stroke=&#34;#F44336&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;text x=&#34;245.70&#34; y=&#34;8.32&#34; dy=&#34;0.3em&#34; font-size=&#34;9&#34;&gt;tcsh 6.18.01&lt;/text&gt;&#xA;&lt;path d=&#34; M 223.20 31.08 L 241.20 31.08&#34; fill=&#34;transparent&#34; stroke=&#34;#FF9800&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;text x=&#34;245.70&#34; y=&#34;31.08&#34; dy=&#34;0.3em&#34; font-size=&#34;9&#34;&gt;ksh 93u+20120801&lt;/text&gt;&#xA;&lt;path d=&#34; M 223.20 40.12 L 241.20 40.12&#34; fill=&#34;transparent&#34; stroke=&#34;#FFEB3B&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;text x=&#34;245.70&#34; y=&#34;40.12&#34; dy=&#34;0.3em&#34; font-size=&#34;9&#34;&gt;Plan 9 rc&lt;/text&gt;&#xA;&lt;path d=&#34; M 223.20 49.15 L 241.20 49.15&#34; fill=&#34;transparent&#34; stroke=&#34;#00BCD4&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;text x=&#34;245.70&#34; y=&#34;49.15&#34; dy=&#34;0.3em&#34; font-size=&#34;9&#34;&gt;zsh 5.0.5&lt;/text&gt;&#xA;&lt;path d=&#34; M 223.20 58.18 L 241.20 58.18&#34; fill=&#34;transparent&#34; stroke=&#34;#4CAF50&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;text x=&#34;245.70&#34; y=&#34;58.18&#34; dy=&#34;0.3em&#34; font-size=&#34;9&#34;&gt;rc 1.7.1&lt;/text&gt;&#xA;&lt;path d=&#34; M 223.20 67.21 L 241.20 67.21&#34; fill=&#34;transparent&#34; stroke=&#34;#009688&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;text x=&#34;245.70&#34; y=&#34;67.21&#34; dy=&#34;0.3em&#34; font-size=&#34;9&#34;&gt;bash 4.3&lt;/text&gt;&#xA;&lt;path d=&#34; M 223.20 76.25 L 241.20 76.25&#34; fill=&#34;transparent&#34; stroke=&#34;#2196F3&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;text x=&#34;245.70&#34; y=&#34;76.25&#34; dy=&#34;0.3em&#34; font-size=&#34;9&#34;&gt;dash 0.5.7&lt;/text&gt;&#xA;&lt;path d=&#34; M 450.00 184.47 L 468.00 184.47&#34; fill=&#34;transparent&#34; stroke=&#34;#9C27B0&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;text x=&#34;472.50&#34; y=&#34;184.47&#34; dy=&#34;0.3em&#34; font-size=&#34;9&#34;&gt;csh 20110502&lt;/text&gt;&#xA;&lt;/svg&gt;&#xA;&#xA;&lt;/center&gt;&#xA;&lt;/div&gt;&#xA;&lt;/table&gt;&#xA;&lt;/center&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p class=lp&gt;Basically, the same thing is going on here as in my regular expression article:&#xA;backtracking was an obvious implementation strategy, so most implementations use it,&#xA;causing the performance cliffs.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;The exception seems to be the original Berkeley csh, which runs in linear time (more precisely, time linear in &lt;em&gt;n&lt;/em&gt;).&#xA;Looking at the source code, it doesn&amp;rsquo;t attempt to perform glob expansion itself.&#xA;Instead it calls the C library implementation &lt;a href=&#34;https://linux.die.net/man/3/glob&#34;&gt;&lt;em&gt;glob&lt;/em&gt;(3)&lt;/a&gt;,&#xA;which runs in linear time, at least on this Linux system.&#xA;So maybe we should look at programming language implementations too.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Programming Languages&lt;/h2&gt;&#xA;&#xA;&lt;p class=lp&gt;Most programming languages provide some kind of glob expansion,&#xA;like C&amp;rsquo;s &lt;code&gt;glob&lt;/code&gt;.&#xA;Let&amp;rsquo;s repeat the experiment in a variety of different programming languages:&lt;/p&gt;&#xA;&#xA;&lt;div class=fig&gt;&#xA;&lt;center&gt;&#xA;&lt;table cellspacing=0 cellpadding=0 border=0&gt;&lt;tr&gt;&lt;td&gt;&#xA;&lt;div class=box&gt;&#xA;&lt;center&gt;&#xA;&lt;b&gt;Time to match&#xA;(&lt;code&gt;a*&lt;/code&gt;)&lt;sup&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sup&gt;&lt;code&gt;b&lt;/code&gt;&#xA;against &#xA;&lt;code&gt;a&lt;/code&gt;&lt;sup&gt;100&lt;/sup&gt; in programming languages&lt;/b&gt;&#xA;&lt;br&gt;&#xA;&#xA;&lt;svg width=&#34;540pt&#34; height=&#34;295pt&#34; viewBox=&#34;0 0 540 295&#34;&#xA;     xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&#xA;&lt;defs&gt;&#xA;&lt;clipPath id=&#34;grid&#34;&gt;&lt;rect x=&#34;54.00&#34; y=&#34;7.20&#34; width=&#34;378.00&#34; height=&#34;252.00&#34;/&gt;&lt;/clipPath&gt;&lt;/defs&gt;&#xA;&lt;path d=&#34;M 54.00 259.20 L 54.00 7.20 M 54.00 259.20 L 432.00 259.20 M 54.00 259.20 L 54.00 264.20 M 72.90 259.20 L 72.90 262.20 M 91.80 259.20 L 91.80 262.20 M 110.70 259.20 L 110.70 262.20 M 129.60 259.20 L 129.60 262.20 M 148.50 259.20 L 148.50 264.20 M 167.40 259.20 L 167.40 262.20 M 186.30 259.20 L 186.30 262.20 M 205.20 259.20 L 205.20 262.20 M 224.10 259.20 L 224.10 262.20 M 243.00 259.20 L 243.00 264.20 M 261.90 259.20 L 261.90 262.20 M 280.80 259.20 L 280.80 262.20 M 299.70 259.20 L 299.70 262.20 M 318.60 259.20 L 318.60 262.20 M 337.50 259.20 L 337.50 264.20 M 356.40 259.20 L 356.40 262.20 M 375.30 259.20 L 375.30 262.20 M 394.20 259.20 L 394.20 262.20 M 413.10 259.20 L 413.10 262.20 M 432.00 259.20 L 432.00 264.20 M 54.00 7.20 L 51.00 7.20 M 54.00 14.92 L 49.00 14.92 M 54.00 16.10 L 51.00 16.10 M 54.00 17.41 L 51.00 17.41 M 54.00 18.90 L 51.00 18.90 M 54.00 20.61 L 51.00 20.61 M 54.00 22.64 L 51.00 22.64 M 54.00 25.13 L 51.00 25.13 M 54.00 28.33 L 51.00 28.33 M 54.00 32.85 L 51.00 32.85 M 54.00 40.57 L 49.00 40.57 M 54.00 41.75 L 51.00 41.75 M 54.00 43.06 L 51.00 43.06 M 54.00 44.55 L 51.00 44.55 M 54.00 46.26 L 51.00 46.26 M 54.00 48.30 L 51.00 48.30 M 54.00 50.78 L 51.00 50.78 M 54.00 53.99 L 51.00 53.99 M 54.00 58.50 L 51.00 58.50 M 54.00 66.23 L 49.00 66.23 M 54.00 67.40 L 51.00 67.40 M 54.00 68.71 L 51.00 68.71 M 54.00 70.20 L 51.00 70.20 M 54.00 71.92 L 51.00 71.92 M 54.00 73.95 L 51.00 73.95 M 54.00 76.43 L 51.00 76.43 M 54.00 79.64 L 51.00 79.64 M 54.00 84.16 L 51.00 84.16 M 54.00 91.88 L 49.00 91.88 M 54.00 93.05 L 51.00 93.05 M 54.00 94.36 L 51.00 94.36 M 54.00 95.85 L 51.00 95.85 M 54.00 97.57 L 51.00 97.57 M 54.00 99.60 L 51.00 99.60 M 54.00 102.08 L 51.00 102.08 M 54.00 105.29 L 51.00 105.29 M 54.00 109.81 L 51.00 109.81 M 54.00 117.53 L 49.00 117.53 M 54.00 118.70 L 51.00 118.70 M 54.00 120.01 L 51.00 120.01 M 54.00 121.50 L 51.00 121.50 M 54.00 123.22 L 51.00 123.22 M 54.00 125.25 L 51.00 125.25 M 54.00 127.74 L 51.00 127.74 M 54.00 130.94 L 51.00 130.94 M 54.00 135.46 L 51.00 135.46 M 54.00 143.18 L 49.00 143.18 M 54.00 144.35 L 51.00 144.35 M 54.00 145.67 L 51.00 145.67 M 54.00 147.15 L 51.00 147.15 M 54.00 148.87 L 51.00 148.87 M 54.00 150.90 L 51.00 150.90 M 54.00 153.39 L 51.00 153.39 M 54.00 156.59 L 51.00 156.59 M 54.00 161.11 L 51.00 161.11 M 54.00 168.83 L 49.00 168.83 M 54.00 170.01 L 51.00 170.01 M 54.00 171.32 L 51.00 171.32 M 54.00 172.81 L 51.00 172.81 M 54.00 174.52 L 51.00 174.52 M 54.00 176.55 L 51.00 176.55 M 54.00 179.04 L 51.00 179.04 M 54.00 182.24 L 51.00 182.24 M 54.00 186.76 L 51.00 186.76 M 54.00 194.48 L 49.00 194.48 M 54.00 195.66 L 51.00 195.66 M 54.00 196.97 L 51.00 196.97 M 54.00 198.46 L 51.00 198.46 M 54.00 200.17 L 51.00 200.17 M 54.00 202.21 L 51.00 202.21 M 54.00 204.69 L 51.00 204.69 M 54.00 207.90 L 51.00 207.90 M 54.00 212.41 L 51.00 212.41 M 54.00 220.14 L 49.00 220.14 M 54.00 221.31 L 51.00 221.31 M 54.00 222.62 L 51.00 222.62 M 54.00 224.11 L 51.00 224.11 M 54.00 225.83 L 51.00 225.83 M 54.00 227.86 L 51.00 227.86 M 54.00 230.34 L 51.00 230.34 M 54.00 233.55 L 51.00 233.55 M 54.00 238.07 L 51.00 238.07 M 54.00 245.79 L 49.00 245.79 M 54.00 246.96 L 51.00 246.96 M 54.00 248.27 L 51.00 248.27 M 54.00 249.76 L 51.00 249.76 M 54.00 251.48 L 51.00 251.48 M 54.00 253.51 L 51.00 253.51 M 54.00 256.00 L 51.00 256.00 M 54.00 259.20 L 51.00 259.20 &#34; fill=&#34;transparent&#34; stroke=&#34;black&#34;/&gt;&#xA;&lt;text x=&#34;54.00&#34; y=&#34;264.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;0&lt;/text&gt;&#xA;&lt;text x=&#34;148.50&#34; y=&#34;264.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;5&lt;/text&gt;&#xA;&lt;text x=&#34;243.00&#34; y=&#34;264.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;10&lt;/text&gt;&#xA;&lt;text x=&#34;337.50&#34; y=&#34;264.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;15&lt;/text&gt;&#xA;&lt;text x=&#34;432.00&#34; y=&#34;264.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;20&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;14.92&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;1000 s&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;40.57&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;100 s&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;66.23&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;10 s&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;91.88&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;1 s&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;117.53&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;100 ms&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;143.18&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;10 ms&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;168.83&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;1 ms&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;194.48&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;100 us&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;220.14&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;10 us&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;245.79&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;1 us&lt;/text&gt;&#xA;&lt;text x=&#34;243.00&#34; y=&#34;259.20&#34; text-anchor=&#34;middle&#34; font-size=&#34;11&#34; dy=&#34;2.5em&#34;&gt;pattern size &lt;tspan style=&#34;font-style: italic&#34;&gt;n&lt;/tspan&gt;&lt;/text&gt;&#xA;&lt;g transform=&#34;translate(54.00 133.20) rotate(-90)&#34;&gt;&lt;text x=&#34;0&#34; y=&#34;0&#34; text-anchor=&#34;middle&#34; font-size=&#34;11&#34; dy=&#34;-4em&#34;&gt;time&lt;/text&gt;&lt;/g&gt;&#xA;&lt;g clip-path=&#34;grid&#34;&gt;&#xA;&lt;path d=&#34;M 54.00 199.28 L 72.90 198.88 L 91.80 180.38 L 110.70 166.57 L 129.60 127.45 L 148.50 99.11 L 167.40 64.53 L 186.30 39.64 L 205.20 8.22&#34; fill=&#34;transparent&#34; stroke=&#34;#F44336&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;path d=&#34;M 54.00 238.18 L 72.90 225.21 L 91.80 207.56 L 110.70 170.02 L 129.60 134.58 L 148.50 101.56 L 167.40 70.56 L 186.30 41.42 L 205.20 13.88&#34; fill=&#34;transparent&#34; stroke=&#34;#FF9800&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;path d=&#34;M 54.00 243.95 L 72.90 217.33 L 91.80 199.58 L 110.70 164.53 L 129.60 133.23 L 148.50 101.68 L 167.40 71.58 L 186.30 42.42 L 205.20 14.93&#34; fill=&#34;transparent&#34; stroke=&#34;#FFEB3B&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;path d=&#34;M 54.00 217.56 L 72.90 200.27 L 91.80 198.54 L 110.70 175.66 L 129.60 143.12 L 148.50 113.77 L 167.40 84.33 L 186.30 54.80 L 205.20 26.60&#34; fill=&#34;transparent&#34; stroke=&#34;#777&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;path d=&#34;M 54.00 220.14 L 72.90 216.39 L 91.80 213.59 L 110.70 187.22 L 129.60 151.20 L 148.50 117.16 L 167.40 85.65 L 186.30 56.06 L 205.20 27.81&#34; fill=&#34;transparent&#34; stroke=&#34;#00BCD4&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;path d=&#34;M 54.00 231.33 L 72.90 216.61 L 91.80 216.30 L 110.70 215.97 L 129.60 216.69 L 148.50 216.57 L 167.40 216.52 L 186.30 216.49 L 205.20 216.21 L 224.10 216.19 L 243.00 216.33 L 261.90 216.14 L 280.80 216.57 L 299.70 216.77 L 318.60 215.66 L 337.50 216.67 L 356.40 216.46 L 375.30 216.33 L 394.20 216.29 L 413.10 216.19 L 432.00 215.89&#34; fill=&#34;transparent&#34; stroke=&#34;#4CAF50&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;path d=&#34;M 54.00 244.21 L 72.90 222.69 L 91.80 224.13 L 110.70 221.83 L 129.60 225.78 L 148.50 223.57 L 167.40 225.98 L 186.30 224.86 L 205.20 222.34 L 224.10 224.67 L 243.00 224.90 L 261.90 224.93 L 280.80 223.76 L 299.70 223.15 L 318.60 224.17 L 337.50 221.86 L 356.40 222.38 L 375.30 223.44 L 394.20 224.03 L 413.10 224.84 L 432.00 222.80&#34; fill=&#34;transparent&#34; stroke=&#34;#009688&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;path d=&#34;M 54.00 244.32 L 72.90 228.52 L 91.80 228.52 L 110.70 228.52 L 129.60 228.47 L 148.50 228.39 L 167.40 228.26 L 186.30 228.22 L 205.20 228.12 L 224.10 228.03 L 243.00 228.07 L 261.90 227.98 L 280.80 227.72 L 299.70 227.67 L 318.60 227.70 L 337.50 227.69 L 356.40 227.60 L 375.30 227.57 L 394.20 227.58 L 413.10 227.50 L 432.00 227.16&#34; fill=&#34;transparent&#34; stroke=&#34;#2196F3&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;path d=&#34;M 54.00 257.36 L 72.90 235.51 L 91.80 235.49 L 110.70 235.30 L 129.60 235.25 L 148.50 235.12 L 167.40 235.03 L 186.30 234.91 L 205.20 234.81 L 224.10 234.77 L 243.00 234.75 L 261.90 234.53 L 280.80 234.59 L 299.70 234.51 L 318.60 234.33 L 337.50 234.27 L 356.40 234.26 L 375.30 234.19 L 394.20 234.03 L 413.10 233.72 L 432.00 233.98&#34; fill=&#34;transparent&#34; stroke=&#34;#9C27B0&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;/g&gt;&#xA;&lt;path d=&#34; M 223.20 8.22 L 241.20 8.22&#34; fill=&#34;transparent&#34; stroke=&#34;#F44336&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;text x=&#34;245.70&#34; y=&#34;8.22&#34; dy=&#34;0.3em&#34; font-size=&#34;9&#34;&gt;Java 8&lt;/text&gt;&#xA;&lt;path d=&#34; M 223.20 17.00 L 241.20 17.00&#34; fill=&#34;transparent&#34; stroke=&#34;#FF9800&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;text x=&#34;245.70&#34; y=&#34;17.00&#34; dy=&#34;0.3em&#34; font-size=&#34;9&#34;&gt;Perl 5.18.2&lt;/text&gt;&#xA;&lt;path d=&#34; M 223.20 25.79 L 241.20 25.79&#34; fill=&#34;transparent&#34; stroke=&#34;#FFEB3B&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;text x=&#34;245.70&#34; y=&#34;25.79&#34; dy=&#34;0.3em&#34; font-size=&#34;9&#34;&gt;BSD libc&lt;/text&gt;&#xA;&lt;path d=&#34; M 223.20 34.57 L 241.20 34.57&#34; fill=&#34;transparent&#34; stroke=&#34;#777&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;text x=&#34;245.70&#34; y=&#34;34.57&#34; dy=&#34;0.3em&#34; font-size=&#34;9&#34;&gt;Python 3.4.3&lt;/text&gt;&#xA;&lt;path d=&#34; M 223.20 43.36 L 241.20 43.36&#34; fill=&#34;transparent&#34; stroke=&#34;#00BCD4&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;text x=&#34;245.70&#34; y=&#34;43.36&#34; dy=&#34;0.3em&#34; font-size=&#34;9&#34;&gt;Tcl 8.6.1&lt;/text&gt;&#xA;&lt;path d=&#34; M 450.00 211.52 L 468.00 211.52&#34; fill=&#34;transparent&#34; stroke=&#34;#4CAF50&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;text x=&#34;472.50&#34; y=&#34;211.52&#34; dy=&#34;0.3em&#34; font-size=&#34;9&#34;&gt;Rust 1.16.0&lt;/text&gt;&#xA;&lt;path d=&#34; M 450.00 220.30 L 468.00 220.30&#34; fill=&#34;transparent&#34; stroke=&#34;#009688&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;text x=&#34;472.50&#34; y=&#34;220.30&#34; dy=&#34;0.3em&#34; font-size=&#34;9&#34;&gt;Go 1.8&lt;/text&gt;&#xA;&lt;path d=&#34; M 450.00 229.09 L 468.00 229.09&#34; fill=&#34;transparent&#34; stroke=&#34;#2196F3&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;text x=&#34;472.50&#34; y=&#34;229.09&#34; dy=&#34;0.3em&#34; font-size=&#34;9&#34;&gt;Ruby 1.9.3&lt;/text&gt;&#xA;&lt;path d=&#34; M 450.00 237.87 L 468.00 237.87&#34; fill=&#34;transparent&#34; stroke=&#34;#9C27B0&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;text x=&#34;472.50&#34; y=&#34;237.87&#34; dy=&#34;0.3em&#34; font-size=&#34;9&#34;&gt;glibc 2.19&lt;/text&gt;&#xA;&lt;/svg&gt;&#xA;&#xA;&lt;/center&gt;&#xA;&lt;/div&gt;&#xA;&lt;/table&gt;&#xA;&lt;/center&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p class=lp&gt;Perhaps the most interesting fact evident in the graph&#xA;is that GNU glibc, the C library used on Linux systems,&#xA;has a linear-time &lt;code&gt;glob&lt;/code&gt; implementation, but&#xA;BSD libc, the C library used on BSD and macOS systems,&#xA;has an exponential-time implementation.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;PHP is not shown in the graph, because its&#xA;&lt;a href=&#34;http://php.net/manual/en/function.glob.php&#34;&gt;glob function&lt;/a&gt; simply invokes&#xA;the host C library&amp;rsquo;s &lt;em&gt;glob&lt;/em&gt;(3),&#xA;so that it runs in linear time on Linux&#xA;and in exponential time on non-Linux systems.&#xA;(I have not tested what happens on Windows.)&#xA;All the languages shown in the graph, however,&#xA;implement glob matching without using the host C library,&#xA;so the results should not vary by host operating system.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;FTP Servers&lt;/h2&gt;&#xA;&#xA;&lt;p class=lp&gt;It&amp;rsquo;s not just shells and programming languages that implement glob matching.&#xA;Although not mandated by the &lt;a href=&#34;https://tools.ietf.org/html/rfc959&#34;&gt;FTP RFC&lt;/a&gt;,&#xA;most FTP servers allow glob patterns as the argument to commands&#xA;like LIST and STAT.&#xA;Let&amp;rsquo;s repeat the experiment with a variety of FTP server implementations:&lt;/p&gt;&#xA;&#xA;&lt;div class=fig&gt;&#xA;&lt;center&gt;&#xA;&lt;table cellspacing=0 cellpadding=0 border=0&gt;&lt;tr&gt;&lt;td&gt;&#xA;&lt;div class=box&gt;&#xA;&lt;center&gt;&#xA;&lt;b&gt;Time to match&#xA;(&lt;code&gt;a*&lt;/code&gt;)&lt;sup&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sup&gt;&lt;code&gt;b&lt;/code&gt;&#xA;against &#xA;&lt;code&gt;a&lt;/code&gt;&lt;sup&gt;100&lt;/sup&gt; in FTP servers&lt;/b&gt;&#xA;&lt;br&gt;&#xA;&#xA;&lt;svg width=&#34;540pt&#34; height=&#34;295pt&#34; viewBox=&#34;0 0 540 295&#34;&#xA;     xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&#xA;&lt;defs&gt;&#xA;&lt;clipPath id=&#34;grid&#34;&gt;&lt;rect x=&#34;54.00&#34; y=&#34;7.20&#34; width=&#34;378.00&#34; height=&#34;252.00&#34;/&gt;&lt;/clipPath&gt;&lt;/defs&gt;&#xA;&lt;path d=&#34;M 54.00 259.20 L 54.00 7.20 M 54.00 259.20 L 432.00 259.20 M 54.00 259.20 L 54.00 264.20 M 72.90 259.20 L 72.90 262.20 M 91.80 259.20 L 91.80 262.20 M 110.70 259.20 L 110.70 262.20 M 129.60 259.20 L 129.60 262.20 M 148.50 259.20 L 148.50 264.20 M 167.40 259.20 L 167.40 262.20 M 186.30 259.20 L 186.30 262.20 M 205.20 259.20 L 205.20 262.20 M 224.10 259.20 L 224.10 262.20 M 243.00 259.20 L 243.00 264.20 M 261.90 259.20 L 261.90 262.20 M 280.80 259.20 L 280.80 262.20 M 299.70 259.20 L 299.70 262.20 M 318.60 259.20 L 318.60 262.20 M 337.50 259.20 L 337.50 264.20 M 356.40 259.20 L 356.40 262.20 M 375.30 259.20 L 375.30 262.20 M 394.20 259.20 L 394.20 262.20 M 413.10 259.20 L 413.10 262.20 M 432.00 259.20 L 432.00 264.20 M 54.00 7.20 L 49.00 7.20 M 54.00 8.64 L 51.00 8.64 M 54.00 10.25 L 51.00 10.25 M 54.00 12.08 L 51.00 12.08 M 54.00 14.19 L 51.00 14.19 M 54.00 16.68 L 51.00 16.68 M 54.00 19.74 L 51.00 19.74 M 54.00 23.67 L 51.00 23.67 M 54.00 29.22 L 51.00 29.22 M 54.00 38.70 L 49.00 38.70 M 54.00 40.14 L 51.00 40.14 M 54.00 41.75 L 51.00 41.75 M 54.00 43.58 L 51.00 43.58 M 54.00 45.69 L 51.00 45.69 M 54.00 48.18 L 51.00 48.18 M 54.00 51.24 L 51.00 51.24 M 54.00 55.17 L 51.00 55.17 M 54.00 60.72 L 51.00 60.72 M 54.00 70.20 L 49.00 70.20 M 54.00 71.64 L 51.00 71.64 M 54.00 73.25 L 51.00 73.25 M 54.00 75.08 L 51.00 75.08 M 54.00 77.19 L 51.00 77.19 M 54.00 79.68 L 51.00 79.68 M 54.00 82.74 L 51.00 82.74 M 54.00 86.67 L 51.00 86.67 M 54.00 92.22 L 51.00 92.22 M 54.00 101.70 L 49.00 101.70 M 54.00 103.14 L 51.00 103.14 M 54.00 104.75 L 51.00 104.75 M 54.00 106.58 L 51.00 106.58 M 54.00 108.69 L 51.00 108.69 M 54.00 111.18 L 51.00 111.18 M 54.00 114.24 L 51.00 114.24 M 54.00 118.17 L 51.00 118.17 M 54.00 123.72 L 51.00 123.72 M 54.00 133.20 L 49.00 133.20 M 54.00 134.64 L 51.00 134.64 M 54.00 136.25 L 51.00 136.25 M 54.00 138.08 L 51.00 138.08 M 54.00 140.19 L 51.00 140.19 M 54.00 142.68 L 51.00 142.68 M 54.00 145.74 L 51.00 145.74 M 54.00 149.67 L 51.00 149.67 M 54.00 155.22 L 51.00 155.22 M 54.00 164.70 L 49.00 164.70 M 54.00 166.14 L 51.00 166.14 M 54.00 167.75 L 51.00 167.75 M 54.00 169.58 L 51.00 169.58 M 54.00 171.69 L 51.00 171.69 M 54.00 174.18 L 51.00 174.18 M 54.00 177.24 L 51.00 177.24 M 54.00 181.17 L 51.00 181.17 M 54.00 186.72 L 51.00 186.72 M 54.00 196.20 L 49.00 196.20 M 54.00 197.64 L 51.00 197.64 M 54.00 199.25 L 51.00 199.25 M 54.00 201.08 L 51.00 201.08 M 54.00 203.19 L 51.00 203.19 M 54.00 205.68 L 51.00 205.68 M 54.00 208.74 L 51.00 208.74 M 54.00 212.67 L 51.00 212.67 M 54.00 218.22 L 51.00 218.22 M 54.00 227.70 L 49.00 227.70 M 54.00 229.14 L 51.00 229.14 M 54.00 230.75 L 51.00 230.75 M 54.00 232.58 L 51.00 232.58 M 54.00 234.69 L 51.00 234.69 M 54.00 237.18 L 51.00 237.18 M 54.00 240.24 L 51.00 240.24 M 54.00 244.17 L 51.00 244.17 M 54.00 249.72 L 51.00 249.72 M 54.00 259.20 L 49.00 259.20 &#34; fill=&#34;transparent&#34; stroke=&#34;black&#34;/&gt;&#xA;&lt;text x=&#34;54.00&#34; y=&#34;264.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;0&lt;/text&gt;&#xA;&lt;text x=&#34;148.50&#34; y=&#34;264.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;5&lt;/text&gt;&#xA;&lt;text x=&#34;243.00&#34; y=&#34;264.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;10&lt;/text&gt;&#xA;&lt;text x=&#34;337.50&#34; y=&#34;264.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;15&lt;/text&gt;&#xA;&lt;text x=&#34;432.00&#34; y=&#34;264.20&#34; dy=&#34;1em&#34; text-anchor=&#34;middle&#34; font-size=&#34;10&#34;&gt;20&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;7.20&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;1000 s&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;38.70&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;100 s&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;70.20&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;10 s&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;101.70&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;1 s&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;133.20&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;100 ms&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;164.70&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;10 ms&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;196.20&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;1 ms&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;227.70&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;100 us&lt;/text&gt;&#xA;&lt;text x=&#34;49.00&#34; y=&#34;259.20&#34; dx=&#34;-0.3em&#34; dy=&#34;0.3em&#34; text-anchor=&#34;end&#34; font-size=&#34;10&#34;&gt;10 us&lt;/text&gt;&#xA;&lt;text x=&#34;243.00&#34; y=&#34;259.20&#34; text-anchor=&#34;middle&#34; font-size=&#34;11&#34; dy=&#34;2.5em&#34;&gt;pattern size &lt;tspan style=&#34;font-style: italic&#34;&gt;n&lt;/tspan&gt;&lt;/text&gt;&#xA;&lt;g transform=&#34;translate(54.00 133.20) rotate(-90)&#34;&gt;&lt;text x=&#34;0&#34; y=&#34;0&#34; text-anchor=&#34;middle&#34; font-size=&#34;11&#34; dy=&#34;-4em&#34;&gt;time&lt;/text&gt;&lt;/g&gt;&#xA;&lt;g clip-path=&#34;grid&#34;&gt;&#xA;&lt;path d=&#34;M 54.00 200.58 L 72.90 201.05 L 91.80 201.44 L 110.70 194.06 L 129.60 158.13 L 148.50 119.12 L 167.40 79.33 L 186.30 42.97 L 205.20 8.51&#34; fill=&#34;transparent&#34; stroke=&#34;#F44336&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;path d=&#34;M 54.00 230.95 L 72.90 229.57 L 91.80 225.90 L 110.70 193.96 L 129.60 151.87 L 148.50 111.91 L 167.40 74.74 L 186.30 62.94&#34; fill=&#34;transparent&#34; stroke=&#34;#FF9800&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;path d=&#34;M 54.00 145.74 L 72.90 145.74 L 91.80 145.74 L 110.70 145.72 L 129.60 144.44 L 148.50 145.76 L 167.40 145.70 L 186.30 145.77 L 205.20 145.74 L 224.10 145.73 L 243.00 145.74 L 261.90 145.74 L 280.80 145.74 L 299.70 145.75 L 318.60 145.74 L 337.50 145.74 L 356.40 145.74 L 375.30 145.74 L 394.20 145.76 L 413.10 145.72 L 432.00 145.75&#34; fill=&#34;transparent&#34; stroke=&#34;#FFEB3B&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;path d=&#34;M 54.00 189.28 L 72.90 190.47 L 91.80 191.59 L 110.70 192.80 L 129.60 190.83 L 148.50 192.29 L 167.40 192.73 L 186.30 192.65 L 205.20 192.87 L 224.10 192.42 L 243.00 192.79 L 261.90 192.86 L 280.80 192.32 L 299.70 192.53 L 318.60 192.85 L 337.50 192.69 L 356.40 192.39 L 375.30 192.26 L 394.20 192.67 L 413.10 192.64 L 432.00 192.76&#34; fill=&#34;transparent&#34; stroke=&#34;#00BCD4&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;path d=&#34;M 54.00 219.38 L 72.90 213.45 L 91.80 213.73 L 110.70 213.76 L 129.60 213.99 L 148.50 214.22 L 167.40 213.92 L 186.30 214.14 L 205.20 214.30 L 224.10 214.47 L 243.00 214.49 L 261.90 213.99 L 280.80 214.05 L 299.70 212.30 L 318.60 214.06 L 337.50 214.35 L 356.40 214.39 L 375.30 213.83 L 394.20 208.13 L 413.10 210.43 L 432.00 210.91&#34; fill=&#34;transparent&#34; stroke=&#34;#4CAF50&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;path d=&#34;M 54.00 233.08 L 72.90 234.33 L 91.80 234.97 L 110.70 234.01 L 129.60 236.28 L 148.50 234.73 L 167.40 234.91 L 186.30 235.64 L 205.20 234.76 L 224.10 235.36 L 243.00 235.59 L 261.90 235.18 L 280.80 235.38 L 299.70 235.32 L 318.60 235.52 L 337.50 235.52 L 356.40 235.73 L 375.30 235.24 L 394.20 235.50 L 413.10 235.62 L 432.00 235.29&#34; fill=&#34;transparent&#34; stroke=&#34;#009688&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;/g&gt;&#xA;&lt;path d=&#34; M 223.20 8.51 L 241.20 8.51&#34; fill=&#34;transparent&#34; stroke=&#34;#F44336&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;text x=&#34;245.70&#34; y=&#34;8.51&#34; dy=&#34;0.3em&#34; font-size=&#34;9&#34;&gt;tnftpd (macOS 10.12.4)&lt;/text&gt;&#xA;&lt;path d=&#34; M 223.20 62.94 L 241.20 62.94&#34; fill=&#34;transparent&#34; stroke=&#34;#FF9800&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;text x=&#34;245.70&#34; y=&#34;62.94&#34; dy=&#34;0.3em&#34; font-size=&#34;9&#34;&gt;Pure-FTPd 1.0.36&lt;/text&gt;&#xA;&lt;path d=&#34; M 450.00 145.75 L 468.00 145.75&#34; fill=&#34;transparent&#34; stroke=&#34;#FFEB3B&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;text x=&#34;472.50&#34; y=&#34;145.75&#34; dy=&#34;0.3em&#34; font-size=&#34;9&#34;&gt;netkit ftpd 0.17&lt;/text&gt;&#xA;&lt;path d=&#34; M 450.00 192.76 L 468.00 192.76&#34; fill=&#34;transparent&#34; stroke=&#34;#00BCD4&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;text x=&#34;472.50&#34; y=&#34;192.76&#34; dy=&#34;0.3em&#34; font-size=&#34;9&#34;&gt;Plan 9 ip/ftpd&lt;/text&gt;&#xA;&lt;path d=&#34; M 450.00 210.91 L 468.00 210.91&#34; fill=&#34;transparent&#34; stroke=&#34;#4CAF50&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;text x=&#34;472.50&#34; y=&#34;210.91&#34; dy=&#34;0.3em&#34; font-size=&#34;9&#34;&gt;ProFTPD 1.3.5&lt;/text&gt;&#xA;&lt;path d=&#34; M 450.00 235.29 L 468.00 235.29&#34; fill=&#34;transparent&#34; stroke=&#34;#009688&#34; stroke-width=&#34;1.5&#34;/&gt;&#xA;&lt;text x=&#34;472.50&#34; y=&#34;235.29&#34; dy=&#34;0.3em&#34; font-size=&#34;9&#34;&gt;vsftpd 3.0.2&lt;/text&gt;&#xA;&lt;/svg&gt;&#xA;&#xA;&lt;/center&gt;&#xA;&lt;/div&gt;&#xA;&lt;/table&gt;&#xA;&lt;/center&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p class=lp&gt;On Linux, Pure-FTPd would probably have run for a hundred or more seconds for &lt;i&gt;n&lt;/i&gt;&amp;nbsp;=&amp;nbsp;7,&#xA;but instead it died and hung up the connection after 17 seconds.&#xA;All the tests were run on the same Linux system as before, except tnftpd, which was run on a mid-2015 MacBook Pro with a 2.8 GHz Intel Core i7 processor running macOS 10.12.4.&#xA;On that Mac system, tnftpd&#xA;(which can only be enabled using the command-line, so most people don&amp;rsquo;t run it)&#xA;has no such time limit:&#xA;even if a client times out and hangs up (as the command-line ftp client does after 30 seconds),&#xA;the server side still consumes CPU until the full pattern match finishes.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;The netkit ftpd runs quickly on Linux because it relies on the host&#xA;C library&amp;rsquo;s &lt;code&gt;glob&lt;/code&gt; function.&#xA;If run on BSD, the netkit ftpd would take exponential time.&#xA;ProFTPD ships a copy of the glibc &lt;code&gt;glob&lt;/code&gt;,&#xA;so it should run quickly even on BSD systems.&#xA;Ironically, Pure-FTPd and tnftpd take exponential time on Linux&#xA;because they ship a copy of the BSD &lt;code&gt;glob&lt;/code&gt; function.&#xA;Presumably they do this to avoid assuming that the host C library is bug-free,&#xA;but, at least in this one case,&#xA;the host C library is better than the one they ship.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Obviously not many servers have a file named &lt;code&gt;a&lt;/code&gt;&lt;sup&gt;100&lt;/sup&gt;,&#xA;but the pattern can be adapted to shorter, less unusual names.&#xA;This gives a denial of service attack against some anonymous FTP servers.&#xA;It appears that tnftpd is derived from the standard FreeBSD ftpd,&#xA;so BSD systems may be affected as well.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;FTP servers and C libraries&#xA;have a &lt;a href=&#34;http://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=glob&#34;&gt;long history of problems with glob patterns&lt;/a&gt;,&#xA;including buffer and heap overflows causing crashes or even remote code execution.&#xA;But here let&amp;rsquo;s focus on CPU exhaustion issues around pattern matching.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;In 2001, &lt;a href=&#34;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1501&#34;&gt;CVE-2001-1501&lt;/a&gt; was issued for a &lt;a href=&#34;http://marc.info/?l=bugtraq&amp;amp;m=98477291420305&amp;amp;w=2&#34;&gt;vulnerability in ProFTPD 1.2.1&lt;/a&gt;, because it could run for a very long time finding and recording the very many matches for a pattern like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;ls */../*/../*/../*/../*/../*/../*/../*/../*/../*&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;In response, most &lt;code&gt;glob&lt;/code&gt; implementations &lt;a href=&#34;https://github.com/openbsd/src/commit/98e1217625a0&#34;&gt;added a &lt;code&gt;GLOB_LIMIT&lt;/code&gt; flag&lt;/a&gt; that can be used to limit the number of matches returned, controlling both the CPU and the memory usage for such a pattern.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Unfortunately, a pattern like that can cause a lot of effort without finding any matches.&#xA;In 2010, &lt;a href=&#34;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2632&#34;&gt;CVE-2010-2632&lt;/a&gt; was issued for a &lt;a href=&#34;http://cxsecurity.com/issue/WLB-2010100135&#34;&gt;variant with no matches&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;ls */../*/../*/../*/../*/../*/../*/../*/../*blablahaha&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;In response, most &lt;code&gt;glob&lt;/code&gt; implementations &lt;a href=&#34;https://github.com/openbsd/src/commit/46df4fe576b7&#34;&gt;expanded &lt;code&gt;GLOB_LIMIT&lt;/code&gt;&lt;/a&gt; to count directory read and file stat operations in addition to matches.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;In 2015, &lt;a href=&#34;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5917&#34;&gt;CVE-2015-5917&lt;/a&gt; was issued for &lt;a href=&#34;https://cxsecurity.com/issue/WLB-2013040082&#34;&gt;the same vulnerability in OS X 10.10.5&amp;rsquo;s FTP server&lt;/a&gt; (reported in 2013), which had its own copy of the &lt;code&gt;glob&lt;/code&gt; implementation and had not been patched in 2010.&#xA;There have also been similar problems around FTP servers implementing brace expansion,&#xA;such as &lt;a href=&#34;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-0418&#34;&gt;CVE-2011-0418&lt;/a&gt; (&lt;a href=&#34;http://cxsecurity.com/issue/WLB-2011050004&#34;&gt;details&lt;/a&gt;).&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Unfortunately, none of these protections address the cost of matching a single path element of a single file name.&#xA;In 2005, &lt;a href=&#34;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0256&#34;&gt;CVE-2005-0256&lt;/a&gt; was issued for a &lt;a href=&#34;http://marc.info/?l=bugtraq&amp;amp;m=110935886414939&amp;amp;w=2&#34;&gt;DoS vulnerability in WU-FTPD 2.6.2&lt;/a&gt;, because it ran for a very long time finding even a single match during:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;ftp&amp;gt; dir ************************************************&#xA;         ************************************************&#xA;         ************************************************&#xA;         **.*&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;The apparent &lt;a href=&#34;http://marc.info/?l=bugtraq&amp;amp;m=110960890901497&amp;amp;w=2&#34;&gt;“fix” used in some implementations&lt;/a&gt; is&#xA;to collapse multiple adjacent stars into a single star.&#xA;That solves one test case, but not the general problem.&#xA;In particular it doesn&amp;rsquo;t help &lt;code&gt;a*a*a*a*a*a*a*a*b&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;The next section discusses ways to implement glob patterns efficiently,&#xA;but if you have an anonymous FTP server accepting glob patterns,&#xA;there are two more fundamental questions to ask:&#xA;Do you really need to run an anonymous FTP server anymore?&#xA;Does it really need to accept glob patterns?&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;At the very least, most FTP servers should probably reject&#xA;glob patterns with more than, say, 3 stars.&#xA;Note that glob patterns are only provided as a convenience for&#xA;command-line FTP users.&#xA;Graphical FTP clients typically use the&#xA;&lt;a href=&#34;https://tools.ietf.org/html/rfc3659#page-23&#34;&gt;&lt;code&gt;MLST&lt;/code&gt; and &lt;code&gt;MLSD&lt;/code&gt; commands&lt;/a&gt;,&#xA;which have a machine-readable output format and are defined not to&#xA;interpret their arguments as glob patterns.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Implementation Details&lt;/h2&gt;&#xA;&#xA;&lt;p class=lp&gt;How do these implementations work? What&amp;rsquo;s going on here?&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;The obvious implementation of glob pattern matching against a single path element&#xA;is to walk the pattern and the name together, matching letters or wildcards in the pattern&#xA;to letters in the name.&#xA;If the walk reaches the end of the pattern at the same time as the end of the name, they match.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Here&amp;rsquo;s a basic outline of that algorithm, in Go:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;func match(pattern, name string) bool {&#xA;    px := 0&#xA;    nx := 0&#xA;    for px &amp;lt; len(pattern) || nx &amp;lt; len(name) {&#xA;        if px &amp;lt; len(pattern) {&#xA;            c := pattern[px]&#xA;            switch c {&#xA;            default: // ordinary character&#xA;                if nx &amp;lt; len(name) &amp;&amp; name[nx] == c {&#xA;                    px++&#xA;                    nx++&#xA;                    continue&#xA;                }&#xA;            case &#39;?&#39;: // single-character wildcard&#xA;                if nx &amp;lt; len(name) {&#xA;                    px++&#xA;                    nx++&#xA;                    continue&#xA;                }&#xA;            case &#39;*&#39;: // zero-or-more-character wildcard&#xA;                ...&#xA;            }&#xA;        }&#xA;        // Mismatch.&#xA;        return false&#xA;    }&#xA;    // Matched all of pattern to all of name. Success.&#xA;    return true&#xA;}&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;In this code, &lt;code&gt;px&lt;/code&gt; is the index into the pattern&#xA;and &lt;code&gt;nx&lt;/code&gt; the index into the name.&#xA;The loop runs until both pattern and name are exhausted,&#xA;meaning &lt;code&gt;px&lt;/code&gt; &lt;code&gt;==&lt;/code&gt; &lt;code&gt;len(pattern)&lt;/code&gt; and &lt;code&gt;nx&lt;/code&gt; &lt;code&gt;==&lt;/code&gt; &lt;code&gt;len(name)&lt;/code&gt;.&#xA;If it does happen that both pattern and name are exhausted at the same time,&#xA;then we have a match (the final &lt;code&gt;return&lt;/code&gt; &lt;code&gt;true&lt;/code&gt;).&#xA;Inside the loop, the code must make progress (advance &lt;code&gt;px&lt;/code&gt; or &lt;code&gt;nx&lt;/code&gt; or both) and &lt;code&gt;continue&lt;/code&gt; on each iteration.&#xA;If not, the control flow ends up at the bottom of the loop body&#xA;(marked &lt;code&gt;//&lt;/code&gt; &lt;code&gt;Mismatch.&lt;/code&gt;) and reports no match.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;The only difficulty is in the implementation of the variable-length wildcard pattern (&lt;code&gt;case&lt;/code&gt; &lt;code&gt;&#39;*&#39;&lt;/code&gt;):&#xA;how much of the name should that match?&#xA;In general, the code must try all possibilities from matching nothing to matching the entire remainder of the string.&#xA;The obvious way to do that is with recursion:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;span style=&#34;color: #aaa;&#34;&gt;func match(pattern, name string) bool {&#xA;    px := 0&#xA;    nx := 0&#xA;    for px &amp;lt; len(pattern) || nx &amp;lt; len(name) {&#xA;        if px &amp;lt; len(pattern) {&#xA;            c := pattern[px]&#xA;            switch c {&#xA;            default: // ordinary character&#xA;                if nx &amp;lt; len(name) &amp;&amp; name[nx] == c {&#xA;                    px++&#xA;                    nx++&#xA;                    continue&#xA;                }&#xA;            case &#39;?&#39;: // single-character wildcard&#xA;                if nx &amp;lt; len(name) {&#xA;                    px++&#xA;                    nx++&#xA;                    continue&#xA;                }&#xA;            case &#39;*&#39;: // zero-or-more-character wildcard&lt;span style=&#34;color: #000; font-weight:bold;&#34;&gt;&#xA;                // Try to match at nx, nx+1, and so on.&#xA;                for ; nx &amp;lt;= len(name); nx++ {&#xA;                    if match(pattern[px+1:], name[nx:]) {&#xA;                        return true&#xA;                    }&#xA;                }&lt;/span&gt;&#xA;            }&#xA;        }&#xA;        // Mismatch.&#xA;        return false&#xA;    }&#xA;    // Matched all of pattern to all of name. Success.&#xA;    return true&#xA;}&#xA;&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;If there are &lt;i&gt;e&lt;/i&gt; stars that can each potentially end their matches at &lt;i&gt;n&lt;/i&gt; positions in the string,&#xA;that gives &lt;i&gt;n&lt;/i&gt;&lt;sup&gt;&lt;i&gt;e&lt;/i&gt;&lt;/sup&gt; possibilities to explore, leading to the exponential run times observed earlier.&#xA;However, most of these possibilities are not worth exploring.&#xA;Because &lt;code&gt;*&lt;/code&gt; is the only variable-sized&#xA;wildcard in the pattern syntax and therefore the only&#xA;source of possible backtracking, there&amp;rsquo;s an even easier implementation:&#xA;don&amp;rsquo;t backtrack to an earlier star.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Consider the pattern &lt;code&gt;a*bx*cy*d&lt;/code&gt;.&#xA;If we end the first star at the first &lt;code&gt;bx&lt;/code&gt;, we have the rest of the name to find the &lt;code&gt;cy&lt;/code&gt; and then the &lt;code&gt;d&lt;/code&gt;.&#xA;Using any later &lt;code&gt;bx&lt;/code&gt; can only remove choices for &lt;code&gt;cy&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt;; it cannot lead to a successful match&#xA;that using the first &lt;code&gt;bx&lt;/code&gt; missed.&#xA;So we should implement&#xA;&lt;code&gt;a*bx*cy*d&lt;/code&gt; without any second-guessing,&#xA;as&#xA;“find a leading &lt;code&gt;a&lt;/code&gt;, then find the earliest &lt;code&gt;bx&lt;/code&gt; after that, then find the earliest &lt;code&gt;cy&lt;/code&gt; after that, then find a trailing &lt;code&gt;d&lt;/code&gt;, or else give up.”&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;We can implement this algorithm by replacing the handling of the star wildcard&#xA;in our Go program:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;span style=&#34;color: #aaa;&#34;&gt;func match(pattern, name string) bool {&#xA;    px := 0&#xA;    nx := 0&#xA;    &lt;span style=&#34;color: black; font-weight: bold;&#34;&gt;nextPx := 0&#xA;    nextNx := 0&lt;/span&gt;&#xA;    for px &amp;lt; len(pattern) || nx &amp;lt; len(name) {&#xA;        if px &amp;lt; len(pattern) {&#xA;            c := pattern[px]&#xA;            switch c {&#xA;            default: // ordinary character&#xA;                if nx &amp;lt; len(name) &amp;&amp; name[nx] == c {&#xA;                    px++&#xA;                    nx++&#xA;                    continue&#xA;                }&#xA;            case &#39;?&#39;: // single-character wildcard&#xA;                if nx &amp;lt; len(name) {&#xA;                    px++&#xA;                    nx++&#xA;                    continue&#xA;                }&#xA;            case &#39;*&#39;: // zero-or-more-character wildcard&#xA;                &lt;span style=&#34;color: black; font-weight: bold;&#34;&gt;// Try to match at nx.&#xA;                // If that doesn&#39;t work out,&#xA;                // restart at nx+1 next.&#xA;                nextPx = px&#xA;                nextNx = nx + 1&#xA;                px++&#xA;                continue&lt;/span&gt;&#xA;            }&#xA;        }&#xA;        &lt;span style=&#34;color: black; font-weight: bold;&#34;&gt;// Mismatch. Maybe restart.&#xA;        if 0 &amp;lt; nextNx &amp;&amp; nextNx &amp;lt;= len(name) {&#xA;            px = nextPx&#xA;            nx = nextNx&#xA;            continue&#xA;        }&lt;/span&gt;&#xA;        return false&#xA;    }&#xA;    // Matched all of pattern to all of name. Success.&#xA;    return true&#xA;}&lt;/span&gt;&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;Each time the code encounters a star, it implements the repeated trials needed&#xA;for that star by recording in &lt;code&gt;nextPx&lt;/code&gt;, &lt;code&gt;nextNx&lt;/code&gt; where to restart the search&#xA;if the current match fails.&#xA;Each subsequent star encountered overwrites the restart information&#xA;for the previous star, in effect locking in the choice made for the&#xA;previous star.&#xA;If you&amp;rsquo;d like to experiment, I&amp;rsquo;ve posted &lt;a href=&#34;glob.go&#34;&gt;both of these programs and a test harness&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;An alternate implementation of the algorithm would be to split the&#xA;pattern on stars and then consider each of the star-separated&#xA;subpatterns in turn, special-casing the first subpattern and the last,&#xA;which must be anchored at the start and end of the name, respectively.&#xA;Go&amp;rsquo;s &lt;a href=&#34;https://golang.org/src/path/filepath/match.go&#34;&gt;src/path/filepath/match.go&lt;/a&gt;&#xA;is an example of this implementation.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Go&amp;rsquo;s &lt;a href=&#34;https://golang.org/pkg/path/filepath/#Match&#34;&gt;&lt;code&gt;filepath.Match&lt;/code&gt;&lt;/a&gt;&#xA;(used by &lt;a href=&#34;https://golang.org/pkg/path/filepath/#Glob&#34;&gt;&lt;code&gt;filepath.Glob&lt;/code&gt;&lt;/a&gt;),&#xA;glibc&amp;rsquo;s &lt;code&gt;glob&lt;/code&gt;, and vsftpd&amp;rsquo;s pattern matcher&#xA;all use this algorithm.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;A more straightforward approach is to translate the glob pattern to&#xA;a regular expression and then invoke a linear-time regular expression match.&#xA;Plan 9&amp;rsquo;s ftpd does this, as does the &lt;code&gt;ls&lt;/code&gt; &lt;code&gt;|&lt;/code&gt; &lt;code&gt;grep&lt;/code&gt; example above.&#xA;(&lt;a href=&#34;https://github.com/python/cpython/blob/master/Lib/fnmatch.py#L39&#34;&gt;Python also does this&lt;/a&gt;, but then it runs the regular expression&#xA;with an exponential-time matching engine.)&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;I have not looked at the other linear-time implementations to see what they do,&#xA;but I expect they all use one of these two approaches.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Additional Reading&lt;/h2&gt;&#xA;&#xA;&lt;p class=lp&gt;This post is an elaboration of an informal &lt;a href=&#34;https://plus.google.com/u/2/+RussCox-rsc/posts/8aANoDNvhie&#34;&gt;2012 Google+ post&lt;/a&gt;&#xA;showing that most shells used exponential-time glob expansion.&#xA;At the time, Tom Duff, the author of Plan 9&amp;rsquo;s rc shell, commented that,&#xA;“I can confirm that rc gets it wrong.&#xA;My excuse, feeble as it is, is that doing it that way meant that the code took 10 minutes to write,&#xA;but it took 20 years for someone to notice the problem.&#xA;(That&amp;rsquo;s 10 ‘programmer minutes’, i.e. less than a day.)”&#xA;I agree that&amp;rsquo;s a reasonable decision for a shell.&#xA;In contrast, a language library routine, not to mention a network server,&#xA;today needs to be robust against worst-case inputs that might be controlled&#xA;by remote attackers,&#xA;but nearly all of the code in question predates that kind of concern.&#xA;I didn&amp;rsquo;t realize the connection to FTP servers until I started doing&#xA;additional research for this post and came across a reference to&#xA;CVE-2010-2632 in &lt;a href=&#34;https://github.com/freebsd/freebsd/blob/5b0d2af29a95/lib/libc/gen/glob.c#L100&#34;&gt;FreeBSD&amp;rsquo;s &lt;code&gt;glob&lt;/code&gt; implementation&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Dave Presotto, the author of Plan 9&amp;rsquo;s ftpd, avoided rc&amp;rsquo;s glob implementation not&#xA;because of the algorithmic complexity but to make sure that long strings&#xA;were handled safely (using a Plan 9 library for handling long strings in C).&#xA;He wrote this comment at the top of&#xA;Plan 9&amp;rsquo;s &lt;a href=&#34;http://plan9.bell-labs.com/sources/plan9/sys/src/cmd/ip/glob.c&#34;&gt;/sys/src/cmd/ip/glob.c&lt;/a&gt;,&#xA;which converts glob expressions into regular expressions:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/*&#xA; *  I wrote this glob so that there would be no limit&#xA; *  on element or path size.  The one in rc is probably&#xA; *  better, certainly faster. - presotto&#xA; */&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;As it turns out, this is untrue: the one in rc is certainly slower, at least in terms of&#xA;worst-case asymptotics.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;If you liked this post, you may also like to browse&#xA;Nelson Elhage&amp;rsquo;s &lt;a href=&#34;https://accidentallyquadratic.tumblr.com/post/113840433022/why-accidentally-quadratic&#34;&gt;Accidentally Quadratic&lt;/a&gt; collection.&#xA;(Of course, here the glob pattern matching is accidentally exponential.)&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;&lt;a name=&#34;updates&#34;&gt;Updates, as of April 28, 2017.&lt;/h2&gt;&#xA;&#xA;&lt;p class=lp&gt;NetBSD has an &lt;a href=&#34;http://cvsweb.netbsd.org/bsdweb.cgi/src/lib/libc/gen/glob.c.diff?r1=1.36&amp;amp;r2=1.37&amp;amp;f=h&#34;&gt;updated glob&lt;/a&gt;&#xA;pending for the next release.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Perl has an &lt;a href=&#34;https://perl5.git.perl.org/perl.git/commitdiff/33252c318625f3c6c89b816ee88481940e3e6f95?hp=57ab6c610267dba697199c8256f4258af7d391c1&#34;&gt;updated glob&lt;/a&gt; pending for the next release.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Pure-FTPd 1.0.46 has added a &lt;a href=&#34;https://github.com/jedisct1/pure-ftpd/commit/63d98420e2c205c40e5a0849bde142e0aab17955&#34;&gt;check that patterns must not have more than three stars&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Thanks to &lt;a href=&#34;https://news.ycombinator.com/item?id=14185822&#34;&gt;js2 on Hacker News&lt;/a&gt; for pointing out that Python translates globs to&#xA;regular expressions.&lt;/p&gt;&#xA;&#xA;&#xA;</content>
  </entry>
  <entry>
    <title>My Go Resolutions for 2017</title>
    <id>tag:research.swtch.com,2012:research.swtch.com/go2017</id>
    <link rel="alternate" href="http://research.swtch.com/go2017"></link>
    <published>2017-01-18T09:00:00-05:00</published>
    <updated>2017-01-18T09:01:00-05:00</updated>
    <summary type="text">What I would like to do for Go in 2017.</summary>
    <content type="html">&lt;p class=lp&gt;’Tis the season for resolutions,&#xA;and I thought it would make sense to write a little&#xA;about what I hope to work on this year as far as Go is concerned.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;My goal every year is to &lt;em&gt;help Go developers&lt;/em&gt;.&#xA;I want to make sure that the work we do on the Go team&#xA;has a significant, positive impact on Go developers.&#xA;That may sound obvious, but there are a variety of common ways to fail to achieve that:&#xA;for example, spending too much time cleaning up or optimizing code that doesn’t need it;&#xA;responding only to the most common or recent complaints or requests;&#xA;or focusing too much on short-term improvements.&#xA;It’s important to step back and make sure we’re focusing&#xA;our development work where it does the most good.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;This post outlines a few of my own major focuses for this year.&#xA;This is only my personal list, not the Go team’s list.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;One reason for posting this is to gather feedback.&#xA;If these spark any ideas or suggestions of your own,&#xA;please feel free to comment below or on the linked GitHub issues.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Another reason is to make clear that I’m aware of these issues as important.&#xA;I think too often people interpret lack of action by the Go team&#xA;as a signal that we think everything is perfect, when instead&#xA;there is simply other, higher priority work to do first.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;&lt;a name=&#34;alias&#34;&gt;&lt;/a&gt;Type aliases&lt;/h2&gt;&#xA;&#xA;&lt;p class=lp&gt;There is a recurring problem with moving types&#xA;from one package to another during large codebase refactorings.&#xA;We tried to solve it last year with &lt;a href=&#34;https://golang.org/issue/16339&#34;&gt;general aliases&lt;/a&gt;,&#xA;which didn’t work for at least two reasons: we didn’t explain the change well enough,&#xA;and we didn’t deliver it on time, so it wasn’t ready for Go 1.8.&#xA;Learning from that experience,&#xA;I &lt;a href=&#34;https://www.youtube.com/watch?v=h6Cw9iCDVcU&#34;&gt;gave a talk&lt;/a&gt;&#xA;and &lt;a href=&#34;https://talks.golang.org/2016/refactor.article&#34;&gt;wrote an article&lt;/a&gt;&#xA;about the underlying problem,&#xA;and that started a &lt;a href=&#34;https://golang.org/issue/18130&#34;&gt;productive discussion&lt;/a&gt;&#xA;on the Go issue tracker about the solution space.&#xA;It looks like more limited &lt;a href=&#34;https://golang.org/design/18130-type-alias&#34;&gt;type aliases&lt;/a&gt;&#xA;are the right next step.&#xA;I want to make sure those land smoothly in Go 1.9. &lt;a href=&#34;https://golang.org/issue/18130&#34;&gt;#18130&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;&lt;a name=&#34;package&#34;&gt;&lt;/a&gt;Package management&lt;/h2&gt;&#xA;&#xA;&lt;p class=lp&gt;I designed the Go support for downloading published packages&#xA;(“goinstall”, which became “go get”) in February 2010.&#xA;A lot has happened since then.&#xA;In particular, other language ecosystems have really raised the bar&#xA;for what people expect from package management,&#xA;and the open source world has mostly agreed on&#xA;&lt;a href=&#34;http://semver.org/&#34;&gt;semantic versioning&lt;/a&gt;, which provides a useful base&#xA;for inferring version compatibility.&#xA;Go needs to do better here, and a group of contributors have been&#xA;&lt;a href=&#34;https://blog.gopheracademy.com/advent-2016/saga-go-dependency-management/&#34;&gt;working on a solution&lt;/a&gt;.&#xA;I want to make sure these ideas are integrated well&#xA;into the standard Go toolchain and to make package management&#xA;a reason that people love Go.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;&lt;a name=&#34;build&#34;&gt;&lt;/a&gt;Build improvements&lt;/h2&gt;&#xA;&#xA;&lt;p class=lp&gt;There are a handful of shortcomings in the design of&#xA;the go command’s build system that are overdue to be fixed.&#xA;Here are three representative examples that I intend to&#xA;address with a bit of a redesign of the internals of the go command.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Builds can be too slow,&#xA;because the go command doesn’t cache build results as aggressively as it should.&#xA;Many people don’t realize that &lt;code&gt;go&lt;/code&gt; &lt;code&gt;install&lt;/code&gt; saves its work while &lt;code&gt;go&lt;/code&gt; &lt;code&gt;build&lt;/code&gt; does not,&#xA;and then they run repeated &lt;code&gt;go&lt;/code&gt; &lt;code&gt;build&lt;/code&gt; commands that are slow&#xA;because the later builds do more work than they should need to.&#xA;The same for repeated &lt;code&gt;go&lt;/code&gt; &lt;code&gt;test&lt;/code&gt; without &lt;code&gt;go&lt;/code&gt; &lt;code&gt;test&lt;/code&gt; &lt;code&gt;-i&lt;/code&gt; when dependencies are modified.&#xA;All builds should be as incremental as possible.&#xA;&lt;a href=&#34;https://golang.org/issue/4719&#34;&gt;#4719&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Test results should be cached too:&#xA;if none of the inputs to a test have changed,&#xA;then usually there is no need to rerun the test.&#xA;This will make it very cheap to run “all tests” when little or nothing has changed.&#xA;&lt;a href=&#34;https://golang.org/issue/11193&#34;&gt;#11193&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Work outside GOPATH should be supported nearly as well&#xA;as work inside GOPATH.&#xA;In particular, it should be possible to &lt;code&gt;git&lt;/code&gt; &lt;code&gt;clone&lt;/code&gt; a repo,&#xA;&lt;code&gt;cd&lt;/code&gt; into it, and run &lt;code&gt;go&lt;/code&gt; commands and have them work fine.&#xA;Package management only makes that more important:&#xA;you’ll need to be able to work on different versions of a package (say, v1 and v2)&#xA;without having entirely separate GOPATHs for them.&#xA;&lt;a href=&#34;https://golang.org/issue/17271&#34;&gt;#17271&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;&lt;a name=&#34;corpus&#34;&gt;&lt;/a&gt;Code corpus&lt;/h2&gt;&#xA;&#xA;&lt;p class=lp&gt;I think it helped to have concrete examples from real projects&#xA;in the talk and article I prepared about codebase refactoring (see &lt;a href=&#34;#alias&#34;&gt;above&lt;/a&gt;).&#xA;We&amp;rsquo;ve also defined that &lt;a href=&#34;https://golang.org/src/cmd/vet/README&#34;&gt;additions to vet&lt;/a&gt;&#xA;must target problems that happen frequently in real programs.&#xA;I&amp;rsquo;d like to see that kind of analysis of actual practice—examining&#xA;the effects on and possible improvements to real programs—become a&#xA;standard way we discuss and evaluate changes to Go.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Right now there&amp;rsquo;s not an agreed-upon representative corpus of code to use for&#xA;those analyses: everyone must first create their own, which is too much work.&#xA;I&amp;rsquo;d like to put together a single, self-contained Git repo people can check out that&#xA;contains our official baseline corpus for those analyses.&#xA;A possible starting point could be the top 100 Go language repos&#xA;on GitHub by stars or forks or both.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;&lt;a name=&#34;vet&#34;&gt;&lt;/a&gt;Automatic vet&lt;/h2&gt;&#xA;&#xA;&lt;p class=lp&gt;The Go distribution ships with this powerful tool,&#xA;&lt;a href=&#34;https://golang.org/cmd/vet/&#34;&gt;&lt;code&gt;go&lt;/code&gt; &lt;code&gt;vet&lt;/code&gt;&lt;/a&gt;,&#xA;that points out correctness bugs.&#xA;We have a high bar for checks, so that when vet speaks, you should listen.&#xA;But everyone has to remember to run it.&#xA;It would be better if you didn’t have to remember.&#xA;In particular, I think we could probably run vet&#xA;in parallel with the final compile and link of the test binary&#xA;during &lt;code&gt;go&lt;/code&gt; &lt;code&gt;test&lt;/code&gt; without slowing the compile-edit-test cycle at all.&#xA;If we can do that, and if we limit the enabled vet checks to a subset&#xA;that is essentially 100% accurate,&#xA;we can make passing vet a precondition for running a test at all.&#xA;Then developers don’t need to remember to run &lt;code&gt;go&lt;/code&gt; &lt;code&gt;vet&lt;/code&gt;.&#xA;They run &lt;code&gt;go&lt;/code&gt; &lt;code&gt;test&lt;/code&gt;,&#xA;and once in a while vet speaks up with something important&#xA;and avoids a debugging session.&#xA;&lt;a href=&#34;https://golang.org/issue/18084&#34;&gt;#18084&lt;/a&gt;,&#xA;&lt;a href=&#34;https://golang.org/issue/18085&#34;&gt;#18085&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;&lt;a name=&#34;error&#34;&gt;&lt;/a&gt;Errors &amp;amp; best practices&lt;/h2&gt;&#xA;&#xA;&lt;p class=lp&gt;Part of the intended contract for error reporting in Go is that functions&#xA;include relevant available context, including the operation being attempted&#xA;(such as the function name and its arguments).&#xA;For example, this program:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;err := os.Remove(&amp;quot;/tmp/nonexist&amp;quot;)&#xA;fmt.Println(err)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;prints this output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;remove /tmp/nonexist: no such file or directory&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;Not enough Go code adds context like &lt;code&gt;os.Remove&lt;/code&gt; does. Too much code does only&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if err != nil {&#xA;    return err&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;all the way up the call stack,&#xA;discarding useful context that should be reported&#xA;(like &lt;code&gt;remove&lt;/code&gt; &lt;code&gt;/tmp/nonexist:&lt;/code&gt; above).&#xA;I would like to try to understand whether our expectations&#xA;for including context are wrong, or if there is something&#xA;we can do to make it easier to write code that returns better errors.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;There are also various discussions in the community about&#xA;agreed-upon interfaces for stripping error context.&#xA;I would like to try to understand when that makes sense and&#xA;whether we should adopt an official recommendation.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;&lt;a name=&#34;context&#34;&gt;&lt;/a&gt;Context &amp;amp; best practices&lt;/h2&gt;&#xA;&#xA;&lt;p class=lp&gt;We added the new &lt;a href=&#34;https://golang.org/pkg/context/&#34;&gt;context package&lt;/a&gt;&#xA;in Go 1.7 for holding request-scoped information like&#xA;&lt;a href=&#34;https://blog.golang.org/context&#34;&gt;timeouts, cancellation state, and credentials&lt;/a&gt;.&#xA;An individual context is immutable (like an individual string or int):&#xA;it is only possible to derive a new, updated context and&#xA;pass that context explicitly further down the call stack or&#xA;(less commonly) back up to the caller.&#xA;The context is now carried through APIs such as&#xA;&lt;a href=&#34;https://golang.org/pkg/database/sql&#34;&gt;database/sql&lt;/a&gt;&#xA;and&#xA;&lt;a href=&#34;https://golang.org/pkg/net/http&#34;&gt;net/http&lt;/a&gt;,&#xA;mainly so that those can stop processing a request when the caller&#xA;is no longer interested in the result.&#xA;Timeout information is appropriate to carry in a context,&#xA;but—to use a &lt;a href=&#34;https://golang.org/issue/18284&#34;&gt;real example we removed&lt;/a&gt;—database options&#xA;are not, because they are unlikely to apply equally well to all possible&#xA;database operations carried out during a request.&#xA;What about the current clock source, or logging sink?&#xA;Is either of those appropriate to store in a context?&#xA;I would like to try to understand and characterize the&#xA;criteria for what is and is not an appropriate use of context.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;&lt;a name=&#34;memory&#34;&gt;&lt;/a&gt;Memory model&lt;/h2&gt;&#xA;&#xA;&lt;p class=lp&gt;Go’s &lt;a href=&#34;https://golang.org/ref/mem&#34;&gt;memory model&lt;/a&gt; is intentionally low-key,&#xA;making few promises to users, compared to other languages.&#xA;In fact it starts by discouraging people from reading the rest of the document.&#xA;At the same time, it demands more of the compiler than other languages:&#xA;in particular, a race on an integer value is not sufficient license&#xA;for your program to misbehave in arbitrary ways.&#xA;But there are some complete gaps, in particular no mention of&#xA;the &lt;a href=&#34;https://golang.org/pkg/sync/atomic/&#34;&gt;sync/atomic package&lt;/a&gt;.&#xA;I think the core compiler and runtime developers all agree&#xA;that the behavior of those atomics should be roughly the same as&#xA;C++ seqcst atomics or Java volatiles,&#xA;but we still need to write that down carefully in the memory model,&#xA;and probably also in a long blog post.&#xA;&lt;a href=&#34;https://golang.org/issue/5045&#34;&gt;#5045&lt;/a&gt;,&#xA;&lt;a href=&#34;https://golang.org/issue/7948&#34;&gt;#7948&lt;/a&gt;,&#xA;&lt;a href=&#34;https://golang.org/issue/9442&#34;&gt;#9442&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;&lt;a name=&#34;immutability&#34;&gt;&lt;/a&gt;Immutability&lt;/h2&gt;&#xA;&#xA;&lt;p class=lp&gt;The &lt;a href=&#34;https://golang.org/doc/articles/race_detector.html&#34;&gt;race detector&lt;/a&gt;&#xA;is one of Go’s most loved features.&#xA;But not having races would be even better.&#xA;I would love it if there were some reasonable way to integrate&#xA;&lt;a href=&#34;https://www.google.com/search?q=%22reference+immutability%22&#34;&gt;reference immutability&lt;/a&gt; into Go,&#xA;so that programmers can make clear, checked assertions about what can and cannot&#xA;be written and thereby eliminate certain races at compile time.&#xA;Go already has one immutable type, &lt;code&gt;string&lt;/code&gt;; it would&#xA;be nice to retroactively define that&#xA;&lt;code&gt;string&lt;/code&gt; is a named type (or type alias) for &lt;code&gt;immutable&lt;/code&gt; &lt;code&gt;[]byte&lt;/code&gt;.&#xA;I don’t think that will happen this year,&#xA;but I’d like to understand the solution space better.&#xA;Javari, Midori, Pony, and Rust have all staked out interesting points&#xA;in the solution space, and there are plenty of research papers&#xA;beyond those.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;In the long-term, if we could statically eliminate the possibility of races,&#xA;that would eliminate the need for most of the memory model.&#xA;That may well be an impossible dream,&#xA;but again I’d like to understand the solution space better.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;&lt;a name=&#34;generics&#34;&gt;&lt;/a&gt;Generics&lt;/h2&gt;&#xA;&#xA;&lt;p class=lp&gt;Nothing sparks more &lt;a href=&#34;https://research.swtch.com/dogma&#34;&gt;heated arguments&lt;/a&gt;&#xA;among Go and non-Go developers than the question of whether Go should&#xA;have support for generics (or how many years ago that should have happened).&#xA;I don’t believe the Go team has ever said “Go does not need generics.”&#xA;What we &lt;em&gt;have&lt;/em&gt; said is that there are higher-priority issues facing Go.&#xA;For example, I believe that better support for package management&#xA;would have a much larger immediate positive impact on most Go developers&#xA;than adding generics.&#xA;But we do certainly understand that for a certain subset of Go use cases,&#xA;the lack of parametric polymorphism is a significant hindrance.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Personally, I would like to be able to write general channel-processing&#xA;functions like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// Join makes all messages received on the input channels&#xA;// available for receiving from the returned channel.&#xA;func Join(inputs ...&amp;lt;-chan T) &amp;lt;-chan T&#xA;&#xA;// Dup duplicates messages received on c to both c1 and c2.&#xA;func Dup(c &amp;lt;-chan T) (c1, c2 &amp;lt;-chan T)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;I would also like to be able to write&#xA;Go support for high-level data processing abstractions,&#xA;analogous to&#xA;&lt;a href=&#34;https://research.google.com/pubs/archive/35650.pdf&#34;&gt;FlumeJava&lt;/a&gt; or&#xA;C#’s &lt;a href=&#34;https://en.wikipedia.org/wiki/Language_Integrated_Query&#34;&gt;LINQ&lt;/a&gt;,&#xA;in a way that catches type errors at compile time instead of at run time.&#xA;There are also any number of data structures or generic algorithms&#xA;that might be written,&#xA;but I personally find these broader applications more compelling.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;We’ve &lt;a href=&#34;https://research.swtch.com/generic&#34;&gt;struggled&lt;/a&gt; off and on&#xA;&lt;a href=&#34;https://golang.org/design/15292-generics&#34;&gt;for years&lt;/a&gt;&#xA;to find the right way to add generics to Go.&#xA;At least a few of the past proposals got hung up on trying to design&#xA;something that provided both general parametric polymorphism&#xA;(like &lt;code&gt;chan&lt;/code&gt; &lt;code&gt;T&lt;/code&gt;) and also a unification of &lt;code&gt;string&lt;/code&gt; and &lt;code&gt;[]byte&lt;/code&gt;.&#xA;If the latter is handled by parameterization over immutability,&#xA;as described in the previous section, then maybe that simplifies&#xA;the demands on a design for generics.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;When I first started thinking about generics for Go in 2008,&#xA;the main examples to learn from were C#, Java, Haskell, and ML.&#xA;None of the approaches in those languages seemed like a&#xA;perfect fit for Go.&#xA;Today, there are newer attempts to learn from as well,&#xA;including Dart, Midori, Rust, and Swift.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;It’s been a few years since we ventured out and explored the design space.&#xA;It is probably time to look around again,&#xA;especially in light of the insight about mutability and&#xA;the additional examples set by newer languages.&#xA;I don’t think generics will happen this year,&#xA;but I’d like to be able to say I understand the solution space better.&lt;/p&gt;&#xA;&#xA;&#xA;</content>
  </entry>
  <entry>
    <title>Go and Dogma</title>
    <id>tag:research.swtch.com,2012:research.swtch.com/dogma</id>
    <link rel="alternate" href="http://research.swtch.com/dogma"></link>
    <published>2017-01-09T09:00:00-05:00</published>
    <updated>2017-01-09T09:01:00-05:00</updated>
    <summary type="text">Programming language dogmatics.</summary>
    <content type="html">&lt;p class=lp&gt;[&lt;i&gt;Cross-posting from last year’s &lt;a href=&#34;https://www.reddit.com/r/golang/comments/46bd5h/ama_we_are_the_go_contributors_ask_us_anything/d05yyde/?context=3&amp;amp;st=ixq5hjko&amp;amp;sh=7affd469&#34;&gt;Go contributors AMA&lt;/a&gt; on Reddit, because it’s still important to remember.&lt;/i&gt;]&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;One of the perks of working on Go these past years has been the chance to have many great discussions with other language designers and implementers, for example about how well various design decisions worked out or the common problems of implementing what look like very different languages (for example both Go and Haskell need some kind of “green threads”, so there are more shared runtime challenges than you might expect). In one such conversation, when I was talking to a group of early Lisp hackers, one of them pointed out that these discussions are basically never dogmatic. Designers and implementers remember working through the good arguments on both sides of a particular decision, and they’re often eager to hear about someone else’s experience with what happens when you make that decision differently. Contrast that kind of discussion with the heated arguments or overly zealous statements you sometimes see from users of the same languages. There’s a real disconnect, possibly because the users don’t have the experience of weighing the arguments on both sides and don’t realize how easily a particular decision might have gone the other way.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Language design and implementation is engineering. We make decisions using evaluations of costs and benefits or, if we must, using predictions of those based on past experience. I think we have an important responsibility to explain both sides of a particular decision, to make clear that the arguments for an alternate decision are actually good ones that we weighed and balanced, and to avoid the suggestion that particular design decisions approach dogma. I hope &lt;a href=&#34;https://www.reddit.com/r/golang/comments/46bd5h/ama_we_are_the_go_contributors_ask_us_anything/d05yyde/?context=3&amp;amp;st=ixq5hjko&amp;amp;sh=7affd469&#34;&gt;the Reddit AMA&lt;/a&gt; as well as discussion on &lt;a href=&#34;https://groups.google.com/group/golang-nuts&#34;&gt;golang-nuts&lt;/a&gt; or &lt;a href=&#34;http://stackoverflow.com/questions/tagged/go&#34;&gt;StackOverflow&lt;/a&gt; or the &lt;a href=&#34;https://forum.golangbridge.org/&#34;&gt;Go Forum&lt;/a&gt; or at &lt;a href=&#34;https://golang.org/wiki/Conferences&#34;&gt;conferences&lt;/a&gt; help with that.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;But we need help from everyone. Remember that none of the decisions in Go are infallible; they’re just our best attempts at the time we made them, not wisdom received on stone tablets. If someone asks why Go does X instead of Y, please try to present the engineering reasons fairly, including for Y, and avoid argument solely by appeal to authority. It’s too easy to fall into the “well that’s just not how it’s done here” trap. And now that I know about and watch for that trap, I see it in nearly every technical community, although some more than others.&lt;/p&gt;&#xA;&#xA;&#xA;</content>
  </entry>
  <entry>
    <title>Lock-Free Bugs</title>
    <id>tag:research.swtch.com,2012:research.swtch.com/lockfree</id>
    <link rel="alternate" href="http://research.swtch.com/lockfree"></link>
    <published>2017-01-04T00:00:00-05:00</published>
    <updated>2017-01-04T00:01:00-05:00</updated>
    <summary type="text">Locked frees and freed locks.</summary>
    <content type="html">&lt;p class=lp&gt;[&lt;i&gt;I wrote this post in mid-2014 for debuggers.co, which seems to have gone at least partly defunct, so I am reproducing it here. That site collected answers from programmers to the prompt “What&amp;rsquo;s the most interesting bug you&amp;rsquo;ve encountered?”&lt;/i&gt;]&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;To me, the most interesting bugs are the ones that reveal fundamental, subtle misunderstandings about the way a program works.&#xA;A good bug is like a good science experiment:&#xA;through it, you learn something unexpected&#xA;about the virtual world you are exploring.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;About ten years ago I was working on a networked server that used threads,&#xA;coordinating with locks and condition variables.&#xA;This server was part of Plan 9 and was written in C.&#xA;Occasionally it would crash inside &lt;code&gt;malloc&lt;/code&gt;,&#xA;which usually means some kind of memory corruption due&#xA;to a write-after-free error.&#xA;One day, while benchmarking with the bulk of the server disabled,&#xA;I was lucky enough to have the crash happen reproducibly.&#xA;The server being mostly disabled gave me a head start in isolating the bug,&#xA;and the reproducibility made it possible to cut code out, piece by piece,&#xA;until one section was very clearly implicated.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;The code in question was cleaning up after a client that had recently disconnected.&#xA;In the server, there is a per-client data structure shared by two threads:&#xA;the thread R reads from the client connection, and the thread W writes to it.&#xA;R notices the disconnect as an EOF from a read, notifies W,&#xA;waits for an acknowledgement from W, and then frees the per-client structure.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;To acknowledge the disconnect, W ran code like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;qlock(&amp;amp;conn-&amp;gt;lk);&#xA;conn-&amp;gt;writer_done = 1;&#xA;qsignal(&amp;amp;conn-&amp;gt;writer_ack);&#xA;qunlock(&amp;amp;conn-&amp;gt;lk);&#xA;thread_exit();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;And to wait for the acknowledgement, R ran code like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;qlock(&amp;amp;conn-&amp;gt;lk);&#xA;while(!conn-&amp;gt;writer_done)&#xA;    qwait(&amp;amp;conn-&amp;gt;writer_ack);&#xA;&#xA;// The writer is done, and so are we:&#xA;// free the connection.&#xA;free(conn);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;This is a standard locks and condition variables piece of code:&#xA;&lt;code&gt;qwait&lt;/code&gt; is defined to release the lock (here, &lt;code&gt;conn-&amp;gt;lk&lt;/code&gt;),&#xA;wait, and then reacquire the lock before returning.&#xA;Once R observes that &lt;code&gt;writer_done&lt;/code&gt; is set,&#xA;R knows that W is gone, so R can &lt;code&gt;free&lt;/code&gt; the per-connection data structure.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;R does not call &lt;code&gt;qunlock(&amp;amp;conn-&amp;gt;lk)&lt;/code&gt;.&#xA;My reasoning was that calling &lt;code&gt;qunlock&lt;/code&gt; before &lt;code&gt;free&lt;/code&gt; sends mixed messages:&#xA;&lt;code&gt;qunlock&lt;/code&gt; suggests coordination with another thread using &lt;code&gt;conn&lt;/code&gt;,&#xA;but &lt;code&gt;free&lt;/code&gt; is only safe if no other thread is using &lt;code&gt;conn&lt;/code&gt;.&#xA;W was the other thread, and W is gone.&#xA;But somehow, when I added &lt;code&gt;qunlock(&amp;amp;conn-&amp;gt;lk)&lt;/code&gt; before &lt;code&gt;free(conn)&lt;/code&gt;, the crashes stopped. Why?&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;To answer that, we have to look at how locks are implemented.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Conceptually, the core of a lock is a variable with two markings &lt;em&gt;unlocked&lt;/em&gt; and &lt;em&gt;locked&lt;/em&gt;.&#xA;To acquire a lock, a thread checks that the core is marked &lt;em&gt;unlocked&lt;/em&gt;&#xA;and, if so, marks it &lt;em&gt;locked&lt;/em&gt;, in one atomic operation.&#xA;Because the operation is atomic, if two (or more) threads are attempting to acquire the lock, only one can succeed.&#xA;That thread—let’s call it thread A—now holds the lock.&#xA;Another thread vying for the lock—thread B—sees the core is&#xA;marked &lt;em&gt;locked&lt;/em&gt; and must now decide what to do.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;The first, simplest approach, is to try again, and again, and again.&#xA;Eventually thread A will release the lock (by marking the core &lt;em&gt;unlocked&lt;/em&gt;),&#xA;at which point thread B’s atomic operation will succeed.&#xA;This approach is called spinning, and a lock using this approach is called a &lt;a href=&#34;http://en.wikipedia.org/wiki/Spinlock&#34;&gt;spin lock&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;A simple spin lock implementation looks like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;struct SpinLock&#xA;{&#xA;    int bit;&#xA;};&#xA;&#xA;void&#xA;spinlock(SpinLock *lk)&#xA;{&#xA;    for(;;) {&#xA;        if(atomic_cmp_and_set(&amp;amp;lk-&amp;gt;bit, 0, 1))&#xA;            return;&#xA;    }&#xA;}&#xA;&#xA;void&#xA;spinunlock(SpinLock *lk)&#xA;{&#xA;    atomic_set(&amp;amp;lk-&amp;gt;bit, 0);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;The spin lock’s core is the &lt;code&gt;bit&lt;/code&gt; field.&#xA;It is 0 or 1 to indicate unlocked or locked.&#xA;The &lt;code&gt;atomic_cmp_and_set&lt;/code&gt; and &lt;code&gt;atomic_set&lt;/code&gt;&#xA;use special machine instructions to manipulate &lt;code&gt;lk-&amp;gt;bit&lt;/code&gt; atomically.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Spinning only makes sense if the lock is never held for very long,&#xA;so that B’s spin loop only executes a small number of times.&#xA;If the lock can be held for longer periods of time, spinning while it is held&#xA;wastes CPU and can interact badly with the operating system scheduler.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;The second, more general approach is to maintain a queue of threads interested in acquiring the lock.&#xA;In this approach, when thread B finds the lock already held,&#xA;it adds itself to the queue and uses an operating system primitive to go to sleep.&#xA;When thread A eventually releases the lock, it checks the queue, finds B,&#xA;and uses an operating system primitive to wake B.&#xA;This approach is called queueing, and a lock using this approach is called a queue lock.&#xA;Queueing is more efficient than spinning when the lock may be held for a long time.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;The queue lock’s queue needs its own lock, almost always a spin lock.&#xA;In the library I was using, &lt;code&gt;qlock&lt;/code&gt; and &lt;code&gt;qunlock&lt;/code&gt; were implemented as:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;struct QLock&#xA;{&#xA;    SpinLock spin;&#xA;    Thread *owner;&#xA;    ThreadQueue queue;&#xA;};&#xA;&#xA;void&#xA;qlock(QLock *lk)&#xA;{&#xA;    spinlock(&amp;amp;lk-&amp;gt;spin);&#xA;    if(lk-&amp;gt;owner == nil) {&#xA;        lk-&amp;gt;owner = current_thread();&#xA;        spinunlock(&amp;amp;lk-&amp;gt;spin);&#xA;        return;&#xA;    }&#xA;    push(&amp;amp;lk-&amp;gt;queue, current_thread());&#xA;    spinunlock(&amp;amp;lk-&amp;gt;spin);&#xA;    os_sleep();&#xA;}&#xA;&#xA;void&#xA;qunlock(QLock *lk)&#xA;{&#xA;    Thread *t;&#xA;&#xA;    spinlock(&amp;amp;lk-&amp;gt;spin);&#xA;    t = pop(&amp;amp;lk-&amp;gt;queue);&#xA;    lk-&amp;gt;owner = t;&#xA;    if(t != nil)&#xA;        os_wakeup(t);&#xA;    spinunlock(&amp;amp;lk-&amp;gt;spin);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;The queue lock’s core is the &lt;code&gt;owner&lt;/code&gt; field.&#xA;If &lt;code&gt;owner&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;, the lock is unlocked;&#xA;otherwise &lt;code&gt;owner&lt;/code&gt; records the thread that holds the lock.&#xA;The operations on &lt;code&gt;lk-&amp;gt;owner&lt;/code&gt; are made atomic by&#xA;holding the spin lock &lt;code&gt;lk-&amp;gt;spin&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Back to the bug.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;The locks in the crashing code were queue locks.&#xA;The acknowledgement protocol between R and W sets up a race between W’s call to &lt;code&gt;qunlock&lt;/code&gt; and R’s call to &lt;code&gt;qlock&lt;/code&gt; (either the explicit call in the code or the implicit call inside &lt;code&gt;qwait&lt;/code&gt;).&#xA;Which call happens first?&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;If W’s &lt;code&gt;qunlock&lt;/code&gt; happens first, then R’s &lt;code&gt;qlock&lt;/code&gt; finds the lock unlocked, locks it, and everything proceeds uneventfully.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;If R’s &lt;code&gt;qlock&lt;/code&gt; happens first, it finds the lock held by W, so it adds R to the queue and puts R to sleep. Then W’s &lt;code&gt;qunlock&lt;/code&gt; executes. It sets the owner to R, wakes up R, and unlocks the spin lock.&#xA;By the time W unlocks the spin lock, R may have already started running, and R may have already called &lt;code&gt;free(conn)&lt;/code&gt;. The &lt;code&gt;spinunlock&lt;/code&gt;’s &lt;code&gt;atomic_set&lt;/code&gt; writes a zero to &lt;code&gt;conn-&amp;gt;lk.spin.bit&lt;/code&gt;.&#xA;That’s the write-after-free, and if the memory allocator didn’t want a zero there, the zero may cause a crash (or a memory leak, or some other behavior).&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;But is the server code wrong or is &lt;code&gt;qunlock&lt;/code&gt; wrong?&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;The fundamental misunderstanding here is in the definition of the queue lock API.&#xA;Is a queue lock required to be unlocked before being freed?&#xA;Or is a queue lock required to support being freed while locked?&#xA;I had written the queue lock routines as part of a cross-platform library&#xA;mimicking Plan 9’s, and this question had not occurred to me when&#xA;I was writing &lt;code&gt;qunlock&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;One one hand, if the queue lock must be freed only when unlocked,&#xA;then &lt;code&gt;qunlock&lt;/code&gt;’s implementation is correct&#xA;and the server must change.&#xA;If R calls &lt;code&gt;qunlock&lt;/code&gt; before &lt;code&gt;free&lt;/code&gt;,&#xA;then R’s &lt;code&gt;qunlock&lt;/code&gt;’s &lt;code&gt;spinlock&lt;/code&gt; must wait for W’s &lt;code&gt;qunlock&lt;/code&gt;’s &lt;code&gt;spinunlock&lt;/code&gt;,&#xA;so that W will really be gone by the time R calls &lt;code&gt;free&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;On the other hand, if the queue lock can be freed while locked, then the server is correct and&#xA;&lt;code&gt;qunlock&lt;/code&gt; must change: the &lt;code&gt;os_wakeup&lt;/code&gt; gives up&#xA;control of &lt;code&gt;lk&lt;/code&gt; and must be delayed until after the &lt;code&gt;spinunlock&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;The Plan 9 documentation for queue locks does not address the question directly,&#xA;but the implementation was such that freeing locked queue locks was harmless,&#xA;and since I was using my library to run unmodified Plan 9 software,&#xA;I &lt;a href=&#34;https://github.com/9fans/plan9port/commit/80b8842f3e4d562e67455de1c1de80cba5532aec&#34;&gt;changed the lock implementation&lt;/a&gt;&#xA;to call &lt;code&gt;os_wakeup&lt;/code&gt; after &lt;code&gt;spinunlock&lt;/code&gt;.&#xA;Two years later, while fixing a different bug, I defensively&#xA;&lt;a href=&#34;https://github.com/9fans/plan9port/commit/4f6d2bb1e8e38aaeeeabb159272da19718bfb05d&#34;&gt;changed the server implementation&lt;/a&gt; to call&#xA;&lt;code&gt;qunlock&lt;/code&gt; too, just in case.&#xA;The definition of the POSIX &lt;a href=&#34;http://pubs.opengroup.org/onlinepubs/7908799/xsh/pthread_mutex_init.html&#34;&gt;pthread_mutex_destroy&lt;/a&gt;&#xA;function gives a different answer to the same design question:&#xA;“It is safe to destroy an initialised mutex that is unlocked.&#xA;Attempting to destroy a locked mutex results in undefined behaviour.”&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;What did we learn?&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;The rationale I gave for not calling &lt;code&gt;qunlock&lt;/code&gt; before &lt;code&gt;free&lt;/code&gt;&#xA;made an implicit assumption that the two were independent.&#xA;After looking inside an implementation, we can see why&#xA;the two are intertwined and why an API might specify,&#xA;as POSIX does, that you must unlock a lock before destroying it.&#xA;This is an example of implementation concerns influencing an API,&#xA;creating a “&lt;a href=&#34;http://en.wikipedia.org/wiki/Leaky_abstraction&#34;&gt;leaky abstraction&lt;/a&gt;.”&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;What makes this bug interesting is that it was caused by a&#xA;complex interaction between manual memory management and&#xA;&lt;a href=&#34;http://blog.golang.org/concurrency-is-not-parallelism&#34;&gt;concurrency&lt;/a&gt;.&#xA;Obviously a program must stop using a resource before freeing it.&#xA;But a concurrent program must stop all threads from&#xA;using a resource before freeing it.&#xA;On a good day, that can require bookkeeping or careful coordination&#xA;to track which threads are still using the resource.&#xA;On a bad day, that can require reading the lock implementation&#xA;to understand the exact order of operations carried&#xA;out in the different threads.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;In the modern computing world of clients and servers and clouds,&#xA;concurrency is a fundamental concern for most programs.&#xA;In that world, choosing garbage collection instead of&#xA;manual memory management eliminates a source of leaky abstractions&#xA;and makes programs simpler and easier to reason about.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;I started the post by saying that good bugs help you learn something unexpected&#xA;about the virtual world you are exploring.&#xA;This was especially true for Maurice Wilkes and his team, who built &lt;a href=&#34;http://en.wikipedia.org/wiki/Electronic_Delay_Storage_Automatic_Calculator&#34;&gt;EDSAC&lt;/a&gt;, the first practical stored-program computer.&#xA;The first program they ran on EDSAC (printing square numbers) ran correctly,&#xA;but the second did not: the &lt;a href=&#34;http://www.cl.cam.ac.uk/relics/elog.html&#34;&gt;log&lt;/a&gt; for May 7, 1949 reads “Table of primes attempted - programme incorrect.”&#xA;That was a Saturday, making this the first weekend spent working on a buggy program.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;What did they learn? Wilkes later recalled,&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p class=lp&gt;“By June 1949, people had begun to realize that it was not so easy to get a program right as had at one time appeared. &amp;hellip; It was on one of my journeys between the EDSAC room and the punching equipment that the realization came over me with full force that a good part of the remainder of my life was going to be spent in finding errors in my own programs.” (&lt;a href=&#34;http://books.google.com/books?id=9Uc4AQAAIAAJ&#34;&gt;Wilkes&lt;/a&gt;, p.&amp;nbsp;145)&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p class=lp&gt;For more about this early history, see Brian Hayes’s “&lt;a href=&#34;http://bit-player.org/wp-content/extras/bph-publications/Sciences-1993-07-Hayes-EDSAC.pdf&#34;&gt;The Discovery of Debugging&lt;/a&gt;”&#xA;and Martin Campbell-Kelly’s “&lt;a href=&#34;http://dx.doi.org/10.1109/85.194051&#34;&gt;The Airy Tape: An Early Chapter in the History of Debugging&lt;/a&gt;.”&lt;/p&gt;&#xA;&#xA;&#xA;</content>
  </entry>
  <entry>
    <title>Version SAT</title>
    <id>tag:research.swtch.com,2012:research.swtch.com/version-sat</id>
    <link rel="alternate" href="http://research.swtch.com/version-sat"></link>
    <published>2016-12-13T10:00:00-05:00</published>
    <updated>2016-12-13T10:01:00-05:00</updated>
    <summary type="text">Dependency hell is NP-complete</summary>
    <content type="html">&lt;style&gt;&#xA;sub { font-size: 70% }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;p class=lp&gt;Dependency hell is NP-complete. But maybe we can climb out.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;The package version selection problem is to find a set of dependencies that can be used to build a top-level package P that is complete (all dependencies satisfied) and compatible (no two incompatible packages are selected). There may be no such set, because of the diamond dependency problem: perhaps A needs B and C; B needs D version 1, not 2; and C needs D version 2, not 1. In this case, assuming it&amp;rsquo;s not possible to choose both versions of D, there is no way to build A.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;center&gt;&lt;img src=&#34;version-sat.svg&#34;&gt;&lt;/center&gt;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;A package manager needs an algorithm to select package versions: when you run &lt;code&gt;apt-get install perl&lt;/code&gt;, it may assume you mean the latest version of Perl, but then it has to find a way to satisfy Perl&amp;rsquo;s transitive dependencies, or else to print an understandable explanation of why Perl can&amp;rsquo;t be installed. You might reasonably wonder: how expensive is it to solve this problem, in the worst case? You probably don&amp;rsquo;t want your package manager to take hours or days or years to decide whether it can install Perl.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Unfortunately, the version selection problem is NP-complete,&#xA;which means that we&amp;rsquo;re exceedingly unlikely to find an algorithm guaranteed to run quickly on every input.&#xA;This post gives a proof of NP-completeness for version selection,&#xA;looks at how existing package managers cope,&#xA;and briefly discusses possible approaches to avoid an NP-complete task.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;&lt;a name=&#34;proof&#34;&gt;&lt;/a&gt;Proof of NP-Completeness&lt;/h2&gt;&#xA;&#xA;&lt;p class=lp&gt;To consider NP-completeness, we need to shift from our modern world of algorithms with rich outputs to the limited world of complexity theory,&#xA;where algorithms have one boolean output: yes or no.&#xA;In this world of complexity theory, we&amp;rsquo;ll define the VERSION problem (they&amp;rsquo;re always all caps) to ask whether there is a valid version selection.&#xA;This boolean VERSION problem is only half of our original problem, and we can prove that it&amp;rsquo;s NP-complete.&#xA;To do so, we need to prove two separate facts: that VERSION is in NP and that VERSION is NP-hard.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;A problem is in NP if every “yes” answer has an easily-checked polynomial-size explanation.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;VERSION is in NP, because any “yes” answer can be explained by listing the selected package versions.&#xA;This list is no bigger than the input and can be checked for correctness in time no worse than quadratic&#xA;in the input (probably linear, depending on details of the computing model).&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;A problem is NP-hard if an efficient solution for that problem can be adapted into an efficient solution to &lt;em&gt;every&lt;/em&gt; other problem in NP.&#xA;That&amp;rsquo;s a pretty tall order, but it is enough for us to show how to adapt an efficient solution for VERSION&#xA;into an efficient solution for one other NP-hard problem (call it HARD) and then rely on the fact that&#xA;someone else has proven that an efficient solution for HARD can be adapted into an efficient solution&#xA;for every other problem in NP.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;A useful example of an NP-complete (in NP and NP-hard) problem is 3-SAT.&#xA;In 3-SAT, the input is a boolean formula over some number of boolean variables,&#xA;constrained to be a conjunction (an AND) of some number of disjunctions (ORs)&#xA;of three literals each, where a literal is a variable or its negation.&#xA;For example, here is an input for 3-SAT (∧ means AND, ∨ means OR, and ¬ means NOT):&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;center&gt;(¬&amp;thinsp;&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;1&lt;/sub&gt; ∨ ¬&amp;thinsp;&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt; ∨ ¬&amp;thinsp;&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;3&lt;/sub&gt;)&amp;ensp;&lt;font style=&#34;font-size: 120%;&#34;&gt;∧&lt;/font&gt;&amp;ensp;(¬&amp;thinsp;&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt; ∨ ¬&amp;thinsp;&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;3&lt;/sub&gt; ∨ ¬&amp;thinsp;&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;4&lt;/sub&gt;)&amp;ensp;&lt;font style=&#34;font-size: 120%;&#34;&gt;∧&lt;/font&gt;&amp;ensp;(¬&amp;thinsp;&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt; ∨ ¬&amp;thinsp;&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt; ∨ &lt;i&gt;x&lt;/i&gt;&lt;sub&gt;3&lt;/sub&gt;)&amp;ensp;&lt;font style=&#34;font-size: 120%;&#34;&gt;∧&lt;/font&gt;&amp;ensp;(&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt; ∨ &lt;i&gt;x&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt; ∨ &lt;i&gt;x&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt;)&lt;/center&gt;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;It is satisfiable by exactly one assignment to the variables—&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;1&lt;/sub&gt;&amp;thinsp;=&amp;thinsp;0, &lt;i&gt;x&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt;&amp;thinsp;=&amp;thinsp;1, &lt;i&gt;x&lt;/i&gt;&lt;sub&gt;3&lt;/sub&gt;&amp;thinsp;=&amp;thinsp;1, &lt;i&gt;x&lt;/i&gt;&lt;sub&gt;4&lt;/sub&gt;&amp;thinsp;=&amp;thinsp;0—so the answer is yes.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;If we extend it to add one more clause,&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;center&gt;(¬&amp;thinsp;&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;1&lt;/sub&gt; ∨ ¬&amp;thinsp;&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt; ∨ ¬&amp;thinsp;&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;3&lt;/sub&gt;)&amp;ensp;&lt;font style=&#34;font-size: 120%;&#34;&gt;∧&lt;/font&gt;&amp;ensp;(¬&amp;thinsp;&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt; ∨ ¬&amp;thinsp;&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;3&lt;/sub&gt; ∨ ¬&amp;thinsp;&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;4&lt;/sub&gt;)&amp;ensp;&lt;font style=&#34;font-size: 120%;&#34;&gt;∧&lt;/font&gt;&amp;ensp;(¬&amp;thinsp;&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt; ∨ ¬&amp;thinsp;&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt; ∨ &lt;i&gt;x&lt;/i&gt;&lt;sub&gt;3&lt;/sub&gt;)&amp;ensp;&lt;font style=&#34;font-size: 120%;&#34;&gt;∧&lt;/font&gt;&amp;ensp;(&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt; ∨ &lt;i&gt;x&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt; ∨ &lt;i&gt;x&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt;)&amp;ensp;&lt;font style=&#34;font-size: 120%;&#34;&gt;∧&lt;/font&gt;&amp;ensp;(&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;1&lt;/sub&gt; ∨ ¬&amp;thinsp;&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt; ∨ &lt;i&gt;x&lt;/i&gt;&lt;sub&gt;4&lt;/sub&gt;)&lt;/center&gt;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;then it is unsatisfiable by any assignment to the variables, so the answer is no.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;The general form of a 3-SAT instance is a formula &lt;i&gt;F&lt;/i&gt; that is the conjunction of&#xA;clauses &lt;i&gt;C&lt;/i&gt;&lt;sub&gt;1&lt;/sub&gt; through &lt;i&gt;C&lt;/i&gt;&lt;sub&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sub&gt; over variables &lt;i&gt;V&lt;/i&gt;&lt;sub&gt;1&lt;/sub&gt; through &lt;i&gt;V&lt;/i&gt;&lt;sub&gt;&lt;i&gt;m&lt;/i&gt;&lt;/sub&gt;,&#xA;where each &lt;i&gt;C&lt;/i&gt;&lt;sub&gt;&lt;i&gt;i&lt;/i&gt;&lt;/sub&gt; is a disjunction of three literals, each of the form&#xA;&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;&lt;i&gt;j&lt;/i&gt;&lt;/sub&gt; or ¬&amp;thinsp;&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;&lt;i&gt;j&lt;/i&gt;&lt;/sub&gt;   for some variable &lt;i&gt;x&lt;/i&gt;&lt;sub&gt;&lt;i&gt;j&lt;/i&gt;&lt;/sub&gt; .&#xA;Duplicate literals in a clause are allowed, as in (¬&amp;thinsp;&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt; ∨ ¬&amp;thinsp;&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt; ∨ &lt;i&gt;x&lt;/i&gt;&lt;sub&gt;3&lt;/sub&gt;) and (&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt; ∨ &lt;i&gt;x&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt; ∨ &lt;i&gt;x&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt;) above.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;We can convert any 3-SAT instance to a VERSION instance with the same answer.&#xA;About the package manager we will assume only that:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;A package can list zero or more packages or specific package versions as dependencies.&lt;/li&gt;&#xA;&lt;li&gt;To install a package, all its dependencies must be installed.&lt;/li&gt;&#xA;&lt;li&gt;Each version of a package can have different dependencies.&lt;/li&gt;&#xA;&lt;li&gt;Two different versions of a package cannot be installed simultaneously.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p class=lp&gt;We&amp;rsquo;ll abbreviate package &lt;code&gt;P&lt;/code&gt; version &lt;code&gt;V&lt;/code&gt; as &lt;code&gt;P:V&lt;/code&gt;&#xA;(now using fixed-width font for packages to distinguish from the standard math italics for formulas).&#xA;A dependency on &lt;code&gt;P:V&lt;/code&gt; must be satisfied by version &lt;code&gt;V&lt;/code&gt; exactly, not &lt;code&gt;V&lt;/code&gt;-1 and not &lt;code&gt;V&lt;/code&gt;+1.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Given a 3-SAT formula, we can create a package &lt;code&gt;F&lt;/code&gt; representing the whole formula,&#xA;packages &lt;code&gt;C1&lt;/code&gt;, &lt;code&gt;C2&lt;/code&gt;, &amp;hellip;, &lt;code&gt;C&lt;i&gt;n&lt;/i&gt;&lt;/code&gt; representing each clause,&#xA;and packages &lt;code&gt;X1&lt;/code&gt;, &lt;code&gt;X2&lt;/code&gt;, &amp;hellip;, &lt;code&gt;X&lt;i&gt;m&lt;/i&gt;&lt;/code&gt; representing each variable.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Each package &lt;code&gt;X&lt;i&gt;j&lt;/i&gt;&lt;/code&gt; has two versions &lt;code&gt;X&lt;i&gt;j&lt;/i&gt;:0&lt;/code&gt; and &lt;code&gt;X&lt;i&gt;j&lt;/i&gt;:1&lt;/code&gt;.&#xA;As assumed above, &lt;code&gt;X&lt;i&gt;j&lt;/i&gt;:0&lt;/code&gt; and &lt;code&gt;X&lt;i&gt;j&lt;/i&gt;:1&lt;/code&gt; conflict and cannot both be installed.&#xA;&lt;code&gt;X&lt;i&gt;j&lt;/i&gt;:1&lt;/code&gt; being installed corresponds to &lt;i&gt;x&lt;/i&gt;&lt;sub&gt;&lt;i&gt;j&lt;/i&gt;&lt;/sub&gt;&amp;thinsp;=&amp;thinsp;1 in the original formula.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Package &lt;code&gt;C&lt;i&gt;i&lt;/i&gt;&lt;/code&gt; has three versions numbered 0, 1, 2, each of which depends on a literal from the corresponding clause.&#xA;For example, if &lt;i&gt;C&lt;/i&gt;&lt;sub&gt;5&lt;/sub&gt; is (&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;1&lt;/sub&gt; ∨ ¬&amp;thinsp;&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt; ∨ &lt;i&gt;x&lt;/i&gt;&lt;sub&gt;4&lt;/sub&gt;), then &lt;code&gt;C5:0&lt;/code&gt; depends on &lt;code&gt;X1:1&lt;/code&gt;, &lt;code&gt;C5:1&lt;/code&gt; depends on &lt;code&gt;X2:0&lt;/code&gt;, and &lt;code&gt;C5:2&lt;/code&gt; depends on &lt;code&gt;X4:1&lt;/code&gt;.&#xA;&lt;code&gt;C&lt;i&gt;i&lt;/i&gt;:&lt;i&gt;k&lt;/i&gt;&lt;/code&gt; being installed corresponds to &lt;i&gt;C&lt;/i&gt;&lt;sub&gt;&lt;i&gt;i&lt;/i&gt;&lt;/sub&gt;&amp;rsquo;s &lt;i&gt;k&lt;/i&gt;’th literal being true (and therefore &lt;i&gt;C&lt;sub&gt;i&lt;/sub&gt;&lt;/i&gt; being true) in the original formula.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Package &lt;code&gt;F&lt;/code&gt; depends on &lt;code&gt;C1&lt;/code&gt;, &lt;code&gt;C2&lt;/code&gt;, &amp;hellip;, &lt;code&gt;C&lt;i&gt;n&lt;/i&gt;&lt;/code&gt;.&#xA;&lt;code&gt;F&lt;/code&gt; being installed implies that all the &lt;code&gt;C&lt;i&gt;i&lt;/i&gt;&lt;/code&gt; are installed, which corresponds to all the &lt;i&gt;C&lt;/i&gt;&lt;sub&gt;&lt;i&gt;i&lt;/i&gt;&lt;/sub&gt; being true and therefore to &lt;i&gt;F&lt;/i&gt; being true.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;If the package manager can find a way to install package &lt;code&gt;F&lt;/code&gt;, then a satisfying assignment for the&#xA;original formula can be read out from the install status of &lt;code&gt;X&lt;i&gt;j&lt;/i&gt;:1&lt;/code&gt; for each variable &lt;i&gt;x&lt;/i&gt;&lt;sub&gt;&lt;i&gt;j&lt;/i&gt;&lt;/sub&gt;.&#xA;Similarly, if the formula is satisfiable, the satisfying assignment gives one way the package manager&#xA;could successfully install &lt;code&gt;F&lt;/code&gt;.&#xA;Therefore, we&amp;rsquo;ve converted the 3-SAT instance into a corresponding VERSION instance with the same answer,&#xA;which establishes that 3-SAT can be solved using VERSION, so VERSION is NP-hard.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Since VERSION is in NP and is NP-hard, VERSION is NP-complete.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;&lt;a name=&#34;implementations&#34;&gt;&lt;/a&gt;Implementations&lt;/h2&gt;&#xA;&#xA;&lt;p class=lp&gt;The assumptions above are quite minimal:&#xA;packages have a list of dependencies,&#xA;a package&amp;rsquo;s dependencies can change with its own version to version,&#xA;a package&amp;rsquo;s dependencies can be restricted to specific versions of those dependencies,&#xA;and it is possible for two versions of a package to conflict with each other.&#xA;That may be the bare minimum for a package manager to be useful.&#xA;Some package managers might not allow a dependency to list a specific version,&#xA;instead requiring a range, but we can easily change the version requirements 0 and 1&#xA;to ≤&amp;thinsp;0 and ≥&amp;thinsp;1.&#xA;Some package managers might not assume that different versions of a package&#xA;conflict by default, but it must be at least possible to specify such a conflict:&#xA;there can&amp;rsquo;t be two &lt;code&gt;/bin/bash&lt;/code&gt; on a Unix system, or two definitions of &lt;code&gt;printf&lt;/code&gt; built into a C program.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;The assumptions are true of every package manager I have looked at:&#xA;Debian&amp;rsquo;s APT, RedHat&amp;rsquo;s RPM, Rust&amp;rsquo;s Cargo, Node&amp;rsquo;s npmjs, Java&amp;rsquo;s Maven, Haskell&amp;rsquo;s Cabal, and more.&#xA;The implication is that these package managers faces an NP-complete task.&#xA;Each must choose between possibly taking a very long time&#xA;to decide on an installation strategy or possibly reporting an installable&#xA;package as uninstallable.&#xA;(Of course, a given implementation may inadvertently do both.)&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Knuth writes in &lt;a href=&#34;http://ptgmedia.pearsoncmg.com/images/9780134397603/samplepages/9780134397603.pdf&#34;&gt;Volume 4, Fascicle 6&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p class=lp&gt;The story of satisfiability is the tale of a triumph of software engineering,&#xA;blended with rich doses of beautiful mathematics. Thanks to elegant new data&#xA;structures and other techniques, modern SAT solvers are able to deal routinely&#xA;with practical problems that involve many thousands of variables, although such&#xA;problems were regarded as hopeless just a few years ago.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p class=lp&gt;In practice, it does seem that modern package managers are moving toward using SAT solvers:&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;a href=&#34;http://0install.net/&#34;&gt;&lt;strong&gt;0install&lt;/strong&gt;&lt;/a&gt; started with heuristics but &lt;a href=&#34;https://mail.mozilla.org/pipermail/rust-dev/2012-February/001378.html&#34;&gt;found it necessary&lt;/a&gt; to switch to &lt;a href=&#34;http://0install.net/solver.html&#34;&gt;a SAT solver&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;a href=&#34;https://chef.io&#34;&gt;&lt;strong&gt;Chef&lt;/strong&gt;&lt;/a&gt;, a systems integration framework, uses the &lt;a href=&#34;https://github.com/chef/dep-selector&#34;&gt;dep-selector Ruby bindings&lt;/a&gt; for the &lt;a href=&#34;http://www.gecode.org/&#34;&gt;Gecode constraint solver&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;a href=&#34;https://pub.dartlang.org/&#34;&gt;&lt;strong&gt;Dart&amp;rsquo;s pub&lt;/strong&gt;&lt;/a&gt; includes a &lt;a href=&#34;https://github.com/dart-lang/pub/blob/master/lib/src/solver/backtracking_solver.dart&#34;&gt;backtracking solver&lt;/a&gt; that &lt;a href=&#34;https://github.com/dart-lang/pub/issues/912&#34;&gt;often takes a long time&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;a href=&#34;https://wiki.debian.org/apt-get&#34;&gt;&lt;strong&gt;Debian&amp;rsquo;s apt-get&lt;/strong&gt;&lt;/a&gt; uses heuristics by default but can &lt;a href=&#34;http://www.dicosmo.org/MyOpinions/index.php?post/2014/10/30/139-saved-yet-another-time-by-an-external-solver-for-apt&#34;&gt;invoke a SAT solver&lt;/a&gt;&#xA;and can&#xA;&lt;a href=&#34;http://www.dicosmo.org/MyOpinions/index.php?post/2014/03/05/137-user-preferences-for-dependency-solvers-a-short-survey-and-new-features-added-in-the-latest-aspcud-solver&#34;&gt;take user preferences into account&lt;/a&gt;.&#xA;The Debian Quality Assurance team also &lt;a href=&#34;http://www.dicosmo.org/MyOpinions/index.php?post/2014/05/21/138-static-analysis-of-software-component-repositories-from-debian-to-opam&#34;&gt;runs a solver&lt;/a&gt; to identify uninstallable packages in their repos.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;a href=&#34;https://www.eclipse.org/&#34;&gt;&lt;strong&gt;Eclipse&lt;/strong&gt;&lt;/a&gt; uses the &lt;a href=&#34;http://www.sat4j.org/&#34;&gt;sat4j SAT solver&lt;/a&gt; to &lt;a href=&#34;https://forge.ow2.org/forum/forum.php?forum_id=1369&#34;&gt;manage installation of its plugins&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;a href=&#34;https://lwn.net/Articles/503581/&#34;&gt;&lt;strong&gt;Fedora&amp;rsquo;s DNF&lt;/strong&gt;&lt;/a&gt; (“Dandified yum”) uses &lt;a href=&#34;https://fedoraproject.org/wiki/Features/DNF#Detailed_Description&#34;&gt;a SAT solver&lt;/a&gt; in an experimental mode.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;a href=&#34;https://github.com/freebsd/pkg&#34;&gt;&lt;strong&gt;FreeBSD&amp;rsquo;s pkg&lt;/strong&gt;&lt;/a&gt;, also used by DragonflyBSD, uses &lt;a href=&#34;https://github.com/freebsd/pkg/tree/master/external/picosat&#34;&gt;the picosat SAT solver&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;a href=&#34;https://opam.ocaml.org/&#34;&gt;&lt;strong&gt;OCaml&amp;rsquo;s OPAM&lt;/strong&gt;&lt;/a&gt; can &lt;a href=&#34;https://opam.ocaml.org/doc/Specifying_Solver_Preferences.html&#34;&gt;invoke a SAT solver locally or remotely over a network&lt;/a&gt;. Like with Debian&amp;rsquo;s apt-get, OPAM&amp;rsquo;s solver can take user preferences into account,&#xA;and the OPAM repos are scanned for uninstallable packages.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;a href=&#34;https://www.opensuse.org/&#34;&gt;&lt;strong&gt;OpenSUSE&lt;/strong&gt;&lt;/a&gt;&amp;rsquo;s package manager uses &lt;a href=&#34;https://github.com/openSUSE/libsolv&#34;&gt;libsolv&lt;/a&gt;, “a free package dependency solver using a satisfiability algorithm.” There is also OpenSUSE&amp;rsquo;s zypper, which uses its own &lt;a href=&#34;https://en.opensuse.org/openSUSE:Libzypp_satsolver&#34;&gt;libzypp&lt;/a&gt; SAT solver.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;a href=&#34;https://www.continuum.io/anaconda-overview&#34;&gt;&lt;strong&gt;Python&amp;rsquo;s Anaconda&lt;/strong&gt;&lt;/a&gt; uses a &lt;a href=&#34;https://www.continuum.io/blog/developer/new-advances-conda-0&#34;&gt;SAT solver&lt;/a&gt; but can &lt;a href=&#34;https://groups.google.com/a/continuum.io/forum/#!topic/anaconda/CT7viK-fFDI&#34;&gt;take a long time&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;a href=&#34;https://blog.rust-lang.org/2016/05/05/cargo-pillars.html&#34;&gt;&lt;strong&gt;Rust&amp;rsquo;s Cargo&lt;/strong&gt;&lt;/a&gt; uses a &lt;a href=&#34;https://github.com/rust-lang/cargo/blob/8b5aec111926d1d03d2da32dd494e0fff073f870/src/cargo/core/resolver/mod.rs#L426&#34;&gt;basic backtracking solver&lt;/a&gt;. It also allows multiple versions of a crate to be linked into the final binary.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;a href=&#34;https://docs.oracle.com/cd/E36784_01/html/E36856/docinfo.html#scrolltoc&#34;&gt;&lt;strong&gt;Solaris&amp;rsquo;s pkg&lt;/strong&gt;&lt;/a&gt;, also used by Illumos and sometimes known as IPS, &lt;a href=&#34;https://blogs.oracle.com/barts/entry/satisfaction&#34;&gt;uses the minisat SAT solver&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;&lt;strong&gt;Swift&amp;rsquo;s package manager&lt;/strong&gt;&lt;/a&gt; uses a &lt;a href=&#34;https://github.com/apple/swift-package-manager/blob/master/Sources/PackageGraph/DependencyResolver.swift#L518&#34;&gt;basic backtracking solver&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;[I would like to add more package managers here. If you know details for one (or something here is wrong), please &lt;a href=&#34;mailto:rsc@swtch.com&#34;&gt;email me&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/_rsc&#34;&gt;send a tweet&lt;/a&gt;. Thanks.]&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;&lt;a name=&#34;alternatives&#34;&gt;&lt;/a&gt;Alternatives?&lt;/h2&gt;&#xA;&#xA;&lt;p class=lp&gt;How should we react to the fact that package version selection is NP-complete?&#xA;One reaction is to embrace the complexity and be thankful that&#xA;SAT solvers are as good as they are.&#xA;Another reaction is to ask whether this can possibly be a good idea.&#xA;Maybe we should not be building tools that require solving this problem.&#xA;Maybe something has gone wrong in the way we develop software.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;If package version selection is NP-complete, that means&#xA;the search space of possible package combinations&#xA;is too large and intricate for efficient systematic analysis;&#xA;what about efficient systematic testing?&#xA;If a search finds a conflict-free combination, why should we believe the combination will work?&#xA;The absence of a version conflict may indicate only that the combination is untested.&#xA;If a search doesn&amp;rsquo;t find a conflict-free combination, how can that failure&#xA;be explained to a developer in a way that makes it clear&#xA;what to do next?&#xA;Software is hard enough to get right without admitting&#xA;NP-complete problems into our software configuration decisions.&#xA;Let&amp;rsquo;s reexamine how we got here and how we might escape.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;The proof above depends on these of assumptions, copied from above:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;A package can list zero or more packages or specific package versions as dependencies.&lt;/li&gt;&#xA;&lt;li&gt;To install a package, all its dependencies must be installed.&lt;/li&gt;&#xA;&lt;li&gt;Each version of a package can have different dependencies.&lt;/li&gt;&#xA;&lt;li&gt;Two different versions of a package cannot be installed simultaneously.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p class=lp&gt;The conventional wisdom, as I suggested above, is that these are roughly&#xA;the “the bare minimum for a package manager to be useful,”&#xA;but maybe we can find a way to reduce them after all.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;One way to avoid NP-completeness is to attack assumption 1:&#xA;what if, instead of allowing a dependency to list specific package versions,&#xA;a dependency can only specify a minimum version?&#xA;Then there is a trivial algorithm for finding the packages to use:&#xA;start with the newest version of what you want to install,&#xA;and then get the newest version of all its dependencies,&#xA;recursively.&#xA;In the original diamond dependency at the beginning of this article,&#xA;A needs B and C, and B and C need different versions of D.&#xA;If B needs D 1.5 and C needs D 1.6, the build can use D 1.6 for both.&#xA;If B doesn&amp;rsquo;t work with D 1.6,&#xA;then either the version of B we&amp;rsquo;re considering is buggy or D 1.6 is buggy.&#xA;The buggy version should be removed from circulation entirely,&#xA;and then a new released version should fix the problem.&#xA;Adding a conflict to the dependency graph instead&#xA;is like documenting a bug instead of fixing it.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Another way to avoid NP-completeness is to attack assumption 4:&#xA;what if two different versions of a package could be installed&#xA;simultaneously?&#xA;Then almost any search algorithm will find a combination of&#xA;packages to build the program; it just might not be the&#xA;smallest possible combination (that&amp;rsquo;s still NP-complete).&#xA;If B needs D 1.5 and C needs D 2.2, the build can include both&#xA;packages in the final binary, treating them as distinct packages.&#xA;I mentioned above that there can&amp;rsquo;t be two definitions of &lt;code&gt;printf&lt;/code&gt; built into a C program,&#xA;but languages with explicit module systems should have no&#xA;problem including separate copies of D (under different fully-qualified names) into a program.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Another way to avoid NP-completeness is to combine the previous two.&#xA;As the examples already hint at,&#xA;if packages follow &lt;a href=&#34;http://semver.org/&#34;&gt;semantic versioning&lt;/a&gt;,&#xA;a package manager might automatically use the newest version&#xA;of a dependency within a major version but then treat&#xA;different major versions as different packages.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;One rationale for such restrictions is that developers are likely not thinking&#xA;about the entire space of all possible package combinations when building&#xA;or testing software. It would help for the developers and their tools to&#xA;agree about how software is built.&#xA;If any of these approaches can be made to work in practice,&#xA;it could go a long way toward simplifying the operation&#xA;and understandability of language package managers.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;&lt;a name=&#34;related&#34;&gt;&lt;/a&gt;Related Work&lt;/h2&gt;&#xA;&#xA;&lt;p class=lp&gt;Proofs that Debian and RedHat package installation are both NP-complete are given in&#xA;“&lt;a href=&#34;https://hal.inria.fr/hal-00697463&#34;&gt;EDOS deliverable WP2-D2.1: Report on Formal Management of Software Dependencies&lt;/a&gt;” (2005), pages 49-50.&#xA;The difficult step in the reduction of 3-SAT to package installation&#xA;is how to construct a disjunction.&#xA;The EDOS proofs encode the disjunction using the package manager&amp;rsquo;s&#xA;ability to specify a list of alternatives for a single dependency,&#xA;either directly (in Debian) or using “provides” directives (in RedHat).&#xA;For example, these systems allow a pseudo-package &lt;code&gt;text-editor&lt;/code&gt;&#xA;to be defined that is considered installed when any of the real packages&#xA;&lt;code&gt;ed&lt;/code&gt;, &lt;code&gt;vi&lt;/code&gt;, or &lt;code&gt;acme&lt;/code&gt; is installed.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;The dependency specifications for a language package manager&#xA;like Rust&amp;rsquo;s Cargo are dramatically simpler than those for Debian and RedHat,&#xA;and so the EDOS proofs do not apply.&#xA;One might therefore hope that language package managers face&#xA;an easier (not NP-complete) job.&#xA;The new proof above dashes that hope.&#xA;(One way to view the proof above is that it simulates the “provides” directive&#xA;in the last example by defining a &lt;code&gt;text-editor&lt;/code&gt; package with three versions,&#xA;one of which depends on &lt;code&gt;ed&lt;/code&gt;, one on &lt;code&gt;vi&lt;/code&gt;, and one on &lt;code&gt;acme&lt;/code&gt;.)&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;By encoding the disjunction in the changing dependencies&#xA;of different versions of a package, the new proof works without modification&#xA;for both Debian&amp;rsquo;s and RedHat&amp;rsquo;s package managers but also applies to essentially&#xA;any foreseeable operating system or language package manager.&#xA;I suspect that most language package manager authors assumed&#xA;the problem they faced was NP-complete, but I&amp;rsquo;ve been unable to find&#xA;prior written proofs of that fact.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;A few dependency systems use constraint solvers instead of SAT solvers,&#xA;but the underlying problem is &lt;a href=&#34;https://en.wikipedia.org/wiki/Schaefer%27s_dichotomy_theorem&#34;&gt;still NP-complete&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;In 2008, Daniel Burrows wrote a blog post about &lt;a href=&#34;http://web.archive.org/web/20160326062818/http://algebraicthunk.net/~dburrows/blog/entry/package-management-sudoku/&#34;&gt;using dpkg to solve Sudoku problems&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Thanks to Sam Boyer for pointing me at the EDOS report&#xA;and for his excellent &lt;a href=&#34;https://medium.com/@sdboyer/so-you-want-to-write-a-package-manager-4ae9c17d9527&#34;&gt;overview of package management&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Roberto Di Cosmo has written a number of followups to the EDOS report,&#xA;&lt;a href=&#34;http://www.dicosmo.org/Publications/publi-by-topic.html&#34;&gt;listed here&lt;/a&gt;, in particular,&#xA;“&lt;a href=&#34;http://www.dicosmo.org/Articles/2012-AbateDiCosmoTreinenZacchiroli-Jss.pdf&#34;&gt;Dependency solving: a separate concern in component evolution management&lt;/a&gt;,”&#xA;which contains an updated proof.&#xA;That line of research applies SAT solvers but also works to take user preferences into account.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Another related line of work is “&lt;a href=&#34;https://cseweb.ucsd.edu/~lerner/papers/opium.pdf&#34;&gt;OPIUM: Optimal Package Install/Uninstall Manager&lt;/a&gt;” by Tucker et al., ICSE 2007. OPIUM was the &lt;a href=&#34;http://0install.net/solver.html#idp172528&#34;&gt;starting point for 0install&amp;rsquo;s solver&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Jaroslav Tulach discovered the &lt;a href=&#34;http://wiki.apidesign.org/wiki/LibraryReExportIsNPComplete&#34;&gt;same proof as above in 2009&lt;/a&gt;.&#xA;Thanks to HN reader &lt;a href=&#34;https://news.ycombinator.com/item?id=13167981&#34;&gt;edwintorok for the link&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;The &lt;a href=&#34;http://lambda-the-ultimate.org/node/3588&#34;&gt;discussion of Tulach&amp;rsquo;s proof on LtU&lt;/a&gt; mentions Daniel Burrows&amp;rsquo;s 2005 paper “&lt;a href=&#34;https://people.debian.org/~dburrows/model.pdf&#34;&gt;Modelling and Resolving Software Dependencies&lt;/a&gt;,” but that paper&amp;rsquo;s proof is more like the EDOS proof than Tulach&amp;rsquo;s proof / the proof above.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Many readers sent additional links to references and to package managers with SAT solvers. Thanks to all.&lt;/p&gt;&#xA;&#xA;&#xA;</content>
  </entry>
  <entry>
    <title>Hacking the OS X Kernel for Fun and Profiles</title>
    <id>tag:research.swtch.com,2012:research.swtch.com/macpprof</id>
    <link rel="alternate" href="http://research.swtch.com/macpprof"></link>
    <published>2013-08-13T11:00:00-04:00</published>
    <updated>2013-08-13T11:00:00-04:00</updated>
    <summary type="text">Modifying the OS X kernel binary to make user-level CPU profiling work</summary>
    <content type="html">&#xA;&lt;style&gt;&#xA;&lt;/style&gt;&#xA;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;My last post described how user-level CPU profilers work,&#xA;and specifically how Google&amp;rsquo;s pprof profiler gathers its CPU profiles&#xA;with the help of the operating system.&#xA;The specific feature needed from the operating system is&#xA;the profiling timer provided by &lt;i&gt;setitimer&lt;/i&gt;(2) and the&#xA;&lt;code&gt;SIGPROF&lt;/code&gt; signals that it delivers.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;If the operating system&amp;rsquo;s implementation of that feature doesn&amp;rsquo;t work,&#xA;then the profiler doesn&amp;rsquo;t work.&#xA;This post looks at a common bug in Unix implementations&#xA;of profiling signals and the fix for OS X, applied by editing&#xA;the OS X kernel binary.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;If you haven&amp;rsquo;t read &amp;ldquo;&lt;a href=&#34;pprof&#34;&gt;How to Build a User-Level CPU Profiler&lt;/a&gt;,&amp;rsquo;&amp;rsquo; you might want to start there.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Unix and Signals and Threads&lt;/h3&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;My earlier post referred to profiling &lt;i&gt;programs&lt;/i&gt;, without mention&#xA;of processes or threads.&#xA;Unix in general and SIGPROF in particular predate the idea of threads.&#xA;SIGPROF originated in the 4.2BSD release of Berkeley Unix, published in 1983.&#xA;In Unix at the time, a process was a single thread of execution.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;Threads did not come easily to Unix.&#xA;Early implementations were slow and buggy and best avoided.&#xA;Each of the popular Unix variants added thread support&#xA;independently, with many shared mistakes.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;Even before we get to implementation, many of the original Unix APIs&#xA;are incompatible with the idea of threads.&#xA;Multithreaded processes allow multiple threads of execution in a&#xA;single process address space.&#xA;Unix maintains much per-process state, and the kernel authors&#xA;must decide whether each piece of state should remain per-process&#xA;or change to be per-thread.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;For example, the single process stack must be split into per-thread stacks:&#xA;it is impossible for independently executing threads to be running on &#xA;a single stack.&#xA;Because there are many threads, thread stacks tend to be smaller than the&#xA;one big process stack that non-threaded Unix programs had.&#xA;As a result, it can be important to define a separate stack for running&#xA;signal handlers.&#xA;That setting is per-thread, for the same reason that ordinary stacks are per-thread.&#xA;But the choice of handler is per-process.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;File descriptors are per-process, but then one thread might open a file moments&#xA;before another thread forks and execs a new program. In order for the open file not&#xA;to be inherited by the new program, we must introduce a new variant of &lt;i&gt;open&lt;/i&gt;(2)&#xA;that can open a file descriptor atomically marked &amp;ldquo;close on exec.&amp;rsquo;&amp;rsquo; And not just open: &#xA;every system call that creates a new file descriptor needs a variant that&#xA;creates the file descriptor &amp;ldquo;close on exec.&amp;rsquo;&amp;rsquo;&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;Memory is per-process, so malloc must use a lock to serialize access&#xA;by independent threads. But again, one thread might acquire the malloc lock&#xA;moments before another thread forks and execs a new program.&#xA;The fork makes a new copy of the current process memory, including&#xA;the locked malloc lock, and that copy will never see the unlock by the&#xA;thread in the original program. So the child of fork can no longer use malloc&#xA;without occasional deadlocks.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;That&amp;rsquo;s just the tip of the iceberg.&#xA;There are a lot of changes to make, and it&amp;rsquo;s easy to miss one.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Profiling Signals&lt;/h3&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;Here&amp;rsquo;s a thread-related change that is easy to miss.&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;The goal of the profiling signal is to enable user-level profiling.&#xA;The signal is sent in response to a program using up a certain amount of CPU time.&#xA;More specifically, in a multithreaded kernel, the profiling signal is sent&#xA;when the hardware timer interrupts a thread and the timer interrupt&#xA;handler finds that the execution of that thread has caused the&#xA;thread&amp;rsquo;s process&amp;rsquo;s profiling timer to expire.&#xA;In order to profile the code whose execution triggered the timer,&#xA;the profiling signal must be sent to the thread that is running.&#xA;If the signal is sent to a thread that is not running, the profile will&#xA;record idleness such as being blocked on I/O or sleeping&#xA;as execution and will be neither accurate nor useful.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;Modern Unix kernels support sending a signal&#xA;to a process, in which case it can be delivered to an arbitrary thread,&#xA;or to a specific thread. &lt;i&gt;Kill&lt;/i&gt;(2) sends a signal to a process, and&#xA;&lt;i&gt;pthread_kill&lt;/i&gt;(2) sends a signal to a specific thread within a process.&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;Before Unix had threads, the code that delivered a profiling signal&#xA;looked like &lt;code&gt;psignal(p,&lt;/code&gt; &lt;code&gt;SIGPROF)&lt;/code&gt;, where&#xA;&lt;code&gt;psignal&lt;/code&gt; is a clearer name for the implementation&#xA;of the &lt;i&gt;kill&lt;/i&gt;(2) system call and &lt;code&gt;p&lt;/code&gt; is the process&#xA;with the timer that just expired.&#xA;If there is just one thread per process, delivering the signal to the&#xA;process cannot possibly deliver it to the wrong thread.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;In multithreaded programs, the &lt;code&gt;SIGPROF&lt;/code&gt; must be&#xA;delivered to the running thread: the kernel must call the internal equivalent&#xA;of &lt;i&gt;pthread_kill&lt;/i&gt;(2), not &lt;i&gt;kill&lt;/i&gt;(2).&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;FreeBSD and Linux deliver profiling signals correctly. &#xA;Empirically, NetBSD, OpenBSD, and OS X do not.&#xA;(Here is a &lt;a href=&#34;sigtest.c&#34;&gt;simple C test program&lt;/a&gt;.)&#xA;Without correct delivery of profiling signals, it is impossible&#xA;to build a correct profiler.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;OS X Signal Delivery&lt;/h3&gt;&#xA;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;To Apple&amp;rsquo;s credit, the OS X kernel sources are published and open source, &#xA;so we can look more closely at the buggy OS X implementation.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;The profiling signals are delivered by the function &lt;code&gt;bsd_ast&lt;/code&gt;&#xA;in the file &lt;a href=&#34;http://www.opensource.apple.com/source/xnu/xnu-2050.22.13/bsd/kern/kern_sig.c&#34;&gt;kern_sig.c&lt;/a&gt;.&#xA;Here is the relevant bit of code:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;void&#xA;bsd_ast(thread_t thread)&#xA;{&#xA;    proc_t p = current_proc();&#xA;    ...&#xA;    if (timerisset(&amp;amp;p-&amp;gt;p_vtimer_prof.it_value)) {&#xA;        uint32_t    microsecs;&#xA;&#xA;        task_vtimer_update(p-&amp;gt;task, TASK_VTIMER_PROF, &amp;amp;microsecs);&#xA;&#xA;        if (!itimerdecr(p, &amp;amp;p-&amp;gt;p_vtimer_prof, microsecs)) {&#xA;            if (timerisset(&amp;amp;p-&amp;gt;p_vtimer_prof.it_value))&#xA;                task_vtimer_set(p-&amp;gt;task, TASK_VTIMER_PROF);&#xA;            else&#xA;                task_vtimer_clear(p-&amp;gt;task, TASK_VTIMER_PROF);&#xA;&#xA;            &lt;b&gt;psignal(p, SIGPROF);&lt;/b&gt;&#xA;        }&#xA;    }&#xA;    ...&#xA;}&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;The &lt;code&gt;bsd_ast&lt;/code&gt; function is the BSD half of the OS X timer interrupt handler.&#xA;If profiling is enabled, &lt;code&gt;bsd_ast&lt;/code&gt; decrements the timer and sends the signal&#xA;if the timer expires.&#xA;The innermost if statement is resetting the the timer state,&#xA;because &lt;i&gt;setitimer&lt;/i&gt;(2) allows both one-shot and periodic timers.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;As predicted, the code is sending the profiling signal to the process,&#xA;not to the current thread.&#xA;There is a function &lt;code&gt;psignal_uthread&lt;/code&gt; defined in&#xA;the same source file that sends a signal instead to a specific thread.&#xA;One possible fix is very simple:&#xA;change &lt;code&gt;psignal&lt;/code&gt; to &lt;code&gt;psignal_uthread&lt;/code&gt;.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;I filed a report about this bug as &lt;a href=&#34;http://golang.org/change/35b716c94225&#34;&gt;Apple Bug Report #9177434&lt;/a&gt; in March 2011,&#xA;but the bug has persisted in subsequent releases of OS X.&#xA;In my report, I suggested a different fix, inside the implementation of &lt;code&gt;psignal&lt;/code&gt;,&#xA;but changing &lt;code&gt;psignal&lt;/code&gt; to &lt;code&gt;psignal_uthread&lt;/code&gt;&#xA;is even simpler.&#xA;Let&amp;rsquo;s do that.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Patching the Kernel&lt;/h3&gt;&#xA;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;It should be possible to rebuild the OS X kernel from the released sources.&#xA;However, I do not know whether the sources are complete, and I do not know&#xA;what configuration I need to use to recreate the kernel on my machine.&#xA;I have no confidence that I&amp;rsquo;d end up with a kernel appropriate for my computer.&#xA;Since the fix is so simple, it should be possible to just modify the standard OS X kernel binary directly.&#xA;That binary lives in &lt;code&gt;/mach_kernel&lt;/code&gt; on OS X computers.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;If we run &lt;code&gt;gdb&lt;/code&gt; on &lt;code&gt;/mach_kernel&lt;/code&gt; we can see the compiled machine&#xA;code for &lt;code&gt;bsd_ast&lt;/code&gt; and find the section we care about.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;$ gdb /mach_kernel&#xA;(gdb) disas bsd_ast&#xA;Dump of assembler code for function bsd_ast:&#xA;0xffffff8000568a50 &amp;lt;bsd_ast+0&amp;gt;: push   %rbp&#xA;0xffffff8000568a51 &amp;lt;bsd_ast+1&amp;gt;: mov    %rsp,%rbp&#xA;...&#xA;&lt;i&gt;if (timerisset(&amp;amp;p-&amp;gt;p_vtimer_prof.it_value))&lt;/i&gt;&#xA;0xffffff8000568b7b &amp;lt;bsd_ast+299&amp;gt;:       cmpq   $0x0,0x1e0(%r15)&#xA;0xffffff8000568b83 &amp;lt;bsd_ast+307&amp;gt;:       jne    0xffffff8000568b8f &amp;lt;bsd_ast+319&amp;gt;&#xA;0xffffff8000568b85 &amp;lt;bsd_ast+309&amp;gt;:       cmpl   $0x0,0x1e8(%r15)&#xA;0xffffff8000568b8d &amp;lt;bsd_ast+317&amp;gt;:       je     0xffffff8000568b9f &amp;lt;bsd_ast+335&amp;gt;&#xA;&lt;i&gt;task_vtimer_set(p-&amp;gt;task, TASK_VTIMER_PROF);&lt;/i&gt;&#xA;0xffffff8000568b8f &amp;lt;bsd_ast+319&amp;gt;:       mov    0x18(%r15),%rdi&#xA;0xffffff8000568b93 &amp;lt;bsd_ast+323&amp;gt;:       mov    $0x2,%esi&#xA;0xffffff8000568b98 &amp;lt;bsd_ast+328&amp;gt;:       callq  0xffffff80002374f0 &amp;lt;task_vtimer_set&amp;gt;&#xA;0xffffff8000568b9d &amp;lt;bsd_ast+333&amp;gt;:       jmp    0xffffff8000568bad &amp;lt;bsd_ast+349&amp;gt;&#xA;&lt;i&gt;task_vtimer_clear(p-&amp;gt;task, TASK_VTIMER_PROF);&lt;/i&gt;&#xA;0xffffff8000568b9f &amp;lt;bsd_ast+335&amp;gt;:       mov    0x18(%r15),%rdi&#xA;0xffffff8000568ba3 &amp;lt;bsd_ast+339&amp;gt;:       mov    $0x2,%esi&#xA;0xffffff8000568ba8 &amp;lt;bsd_ast+344&amp;gt;:       callq  0xffffff8000237660 &amp;lt;task_vtimer_clear&amp;gt;&#xA;&lt;i&gt;psignal(p, SIGPROF);&lt;/i&gt;&#xA;0xffffff8000568bad &amp;lt;bsd_ast+349&amp;gt;:       mov    %r15,%rdi&#xA;0xffffff8000568bb0 &amp;lt;bsd_ast+352&amp;gt;:       xor    %esi,%esi&#xA;0xffffff8000568bb2 &amp;lt;bsd_ast+354&amp;gt;:       xor    %edx,%edx&#xA;0xffffff8000568bb4 &amp;lt;bsd_ast+356&amp;gt;:       xor    %ecx,%ecx&#xA;0xffffff8000568bb6 &amp;lt;bsd_ast+358&amp;gt;:       mov    $0x1b,%r8d&#xA;0xffffff8000568bbc &amp;lt;bsd_ast+364&amp;gt;:       callq  0xffffff8000567340 &amp;lt;threadsignal+224&amp;gt;&#xA;...&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;I&amp;rsquo;ve annotated the assembly with the corresponding C code in italics.&#xA;The final sequence is odd. It should be a call to &lt;code&gt;psignal&lt;/code&gt; but instead it is a call to&#xA;code 224 bytes beyond the start of the &lt;code&gt;threadsignal&lt;/code&gt; function.&#xA;What&amp;rsquo;s going on is that &lt;code&gt;psignal&lt;/code&gt; is a thin wrapper around&#xA;&lt;code&gt;psignal_internal&lt;/code&gt;, and that wrapper has been inlined.&#xA;Since &lt;code&gt;psignal_internal&lt;/code&gt; is a static function, it does not appear&#xA;in the kernel symbol table, and so &lt;code&gt;gdb&lt;/code&gt; doesn&amp;rsquo;t know its name.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;The definitions of &lt;code&gt;psignal&lt;/code&gt; and &lt;code&gt;psignal_uthread&lt;/code&gt; are:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;void&#xA;psignal(proc_t p, int signum)&#xA;{&#xA;    psignal_internal(p, NULL, NULL, 0, signum);&#xA;}&#xA;&#xA;static void&#xA;psignal_uthread(thread_t thread, int signum)&#xA;{&#xA;    psignal_internal(PROC_NULL, TASK_NULL, thread, PSIG_THREAD, signum);&#xA;}&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;With the constants expanded, the call we&amp;rsquo;re seeing is &lt;code&gt;psignal_internal(p,&lt;/code&gt; &lt;code&gt;0,&lt;/code&gt; &lt;code&gt;0,&lt;/code&gt; &lt;code&gt;0,&lt;/code&gt; &lt;code&gt;0x1b)&lt;/code&gt;&#xA;and the call we want to turn it into is &lt;code&gt;psignal_internal(0,&lt;/code&gt; &lt;code&gt;0,&lt;/code&gt; &lt;code&gt;thread,&lt;/code&gt; &lt;code&gt;4,&lt;/code&gt; &lt;code&gt;0x1b)&lt;/code&gt;.&#xA;All we need to do is prepare the different argument list.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;Unfortunately, the &lt;code&gt;thread&lt;/code&gt; variable was passed to &lt;code&gt;bsd_ast&lt;/code&gt; in a register,&#xA;and since it is no longer needed where we are in the function, the register has been reused&#xA;for other purposes: &lt;code&gt;thread&lt;/code&gt; is gone.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;Fortunately, &lt;code&gt;bsd_ast&lt;/code&gt;&amp;rsquo;s one and only invocation in the kernel is&#xA;&lt;code&gt;bsd_ast(current_thread())&lt;/code&gt;, so we can reconstruct the value by calling&#xA;&lt;code&gt;current_thread&lt;/code&gt; ourselves.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;Unfortunately, there is no room in the 15 bytes from &lt;code&gt;bsd_ast+349&lt;/code&gt; to &lt;code&gt;bsd_ast+364&lt;/code&gt;&#xA;to insert such a call and still prepare the other arguments.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;Fortunately, we can optimize a bit of the preceding code to make room.&#xA;Notice that the calls to &lt;code&gt;task_vtimer_set&lt;/code&gt; and &lt;code&gt;task_vtimer_clear&lt;/code&gt;&#xA;are passing the same argument list, and that argument list is prepared in both sides&#xA;of the conditional:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre class=&#34;oldcode&#34;&gt;&#xA;...&#xA;&lt;i&gt;if (timerisset(&amp;amp;p-&amp;gt;p_vtimer_prof.it_value))&lt;/i&gt;&#xA;0xffffff8000568b7b &amp;lt;bsd_ast+299&amp;gt;:       cmpq   $0x0,0x1e0(%r15)&#xA;0xffffff8000568b83 &amp;lt;bsd_ast+307&amp;gt;:       jne    0xffffff8000568b8f &amp;lt;bsd_ast+319&amp;gt;&#xA;0xffffff8000568b85 &amp;lt;bsd_ast+309&amp;gt;:       cmpl   $0x0,0x1e8(%r15)&#xA;0xffffff8000568b8d &amp;lt;bsd_ast+317&amp;gt;:       je     0xffffff8000568b9f &amp;lt;bsd_ast+335&amp;gt;&#xA;&lt;i&gt;task_vtimer_set(p-&amp;gt;task, TASK_VTIMER_PROF);&lt;/i&gt;&#xA;0xffffff8000568b8f &amp;lt;bsd_ast+319&amp;gt;:       &lt;b&gt;mov    0x18(%r15),%rdi&lt;/b&gt;&#xA;0xffffff8000568b93 &amp;lt;bsd_ast+323&amp;gt;:       &lt;b&gt;mov    $0x2,%esi&lt;/b&gt;&#xA;0xffffff8000568b98 &amp;lt;bsd_ast+328&amp;gt;:       callq  0xffffff80002374f0 &amp;lt;task_vtimer_set&amp;gt;&#xA;0xffffff8000568b9d &amp;lt;bsd_ast+333&amp;gt;:       jmp    0xffffff8000568bad &amp;lt;bsd_ast+349&amp;gt;&#xA;&lt;i&gt;task_vtimer_clear(p-&amp;gt;task, TASK_VTIMER_PROF);&lt;/i&gt;&#xA;0xffffff8000568b9f &amp;lt;bsd_ast+335&amp;gt;:       &lt;b&gt;mov    0x18(%r15),%rdi&lt;/b&gt;&#xA;0xffffff8000568ba3 &amp;lt;bsd_ast+339&amp;gt;:       &lt;b&gt;mov    $0x2,%esi&lt;/b&gt;&#xA;0xffffff8000568ba8 &amp;lt;bsd_ast+344&amp;gt;:       callq  0xffffff8000237660 &amp;lt;task_vtimer_clear&amp;gt;&#xA;&lt;i&gt;psignal(p, SIGPROF);&lt;/i&gt;&#xA;0xffffff8000568bad &amp;lt;bsd_ast+349&amp;gt;:       mov    %r15,%rdi&#xA;0xffffff8000568bb0 &amp;lt;bsd_ast+352&amp;gt;:       xor    %esi,%esi&#xA;0xffffff8000568bb2 &amp;lt;bsd_ast+354&amp;gt;:       xor    %edx,%edx&#xA;0xffffff8000568bb4 &amp;lt;bsd_ast+356&amp;gt;:       xor    %ecx,%ecx&#xA;0xffffff8000568bb6 &amp;lt;bsd_ast+358&amp;gt;:       mov    $0x1b,%r8d&#xA;0xffffff8000568bbc &amp;lt;bsd_ast+364&amp;gt;:       callq  0xffffff8000567340 &amp;lt;threadsignal+224&amp;gt;&#xA;...&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;We can pull that call setup above the conditional, eliminating one copy&#xA;and giving ourselves nine bytes to use for delivering the signal.&#xA;A call to &lt;code&gt;current_thread&lt;/code&gt; would take five bytes, and then&#xA;moving the result into an appropriate register would take two more,&#xA;so nine is plenty.&#xA;In fact, since we have nine bytes,&#xA;we can inline the body of &lt;code&gt;current_thread&lt;/code&gt;—a single nine-byte &lt;code&gt;mov&lt;/code&gt; instruction—and change it to store the result to the correct register directly.&#xA;That avoids needing to prepare a position-dependent call instruction.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;The final version is:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre class=&#34;oldcode&#34;&gt;&#xA;...&#xA;0xffffff8000568b7b &amp;lt;bsd_ast+299&amp;gt;:       &lt;b&gt;mov    0x18(%r15),%rdi&lt;/b&gt;&#xA;0xffffff8000568b7f &amp;lt;bsd_ast+303&amp;gt;:       &lt;b&gt;mov    $0x2,%esi&lt;/b&gt;&#xA;0xffffff8000568b84 &amp;lt;bsd_ast+308&amp;gt;:       cmpq   $0x0,0x1e0(%r15)&#xA;0xffffff8000568b8c &amp;lt;bsd_ast+316&amp;gt;:       jne    0xffffff8000568b98 &amp;lt;bsd_ast+328&amp;gt;&#xA;0xffffff8000568b8e &amp;lt;bsd_ast+318&amp;gt;:       cmpl   $0x0,0x1e8(%r15)&#xA;0xffffff8000568b96 &amp;lt;bsd_ast+326&amp;gt;:       je     0xffffff8000568b9f &amp;lt;bsd_ast+335&amp;gt;&#xA;0xffffff8000568b98 &amp;lt;bsd_ast+328&amp;gt;:       callq  0xffffff80002374f0 &amp;lt;task_vtimer_set&amp;gt;&#xA;0xffffff8000568b9d &amp;lt;bsd_ast+333&amp;gt;:       jmp    0xffffff8000568ba4 &amp;lt;bsd_ast+340&amp;gt;&#xA;0xffffff8000568b9f &amp;lt;bsd_ast+335&amp;gt;:       callq  0xffffff8000237660 &amp;lt;task_vtimer_clear&amp;gt;&#xA;0xffffff8000568ba4 &amp;lt;bsd_ast+340&amp;gt;:       &lt;b&gt;xor    %edi,%edi&lt;/b&gt;&#xA;0xffffff8000568ba6 &amp;lt;bsd_ast+342&amp;gt;:       xor    %esi,%esi&#xA;0xffffff8000568ba8 &amp;lt;bsd_ast+344&amp;gt;:       &lt;b&gt;mov    %gs:0x8,%rdx&lt;/b&gt;&#xA;0xffffff8000568bb1 &amp;lt;bsd_ast+353&amp;gt;:       &lt;b&gt;mov    $0x4,%ecx&lt;/b&gt;&#xA;0xffffff8000568bb6 &amp;lt;bsd_ast+358&amp;gt;:       mov    $0x1b,%r8d&#xA;0xffffff8000568bbc &amp;lt;bsd_ast+364&amp;gt;:       callq  0xffffff8000567340 &amp;lt;threadsignal+224&amp;gt;&#xA;...&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;If we hadn&amp;rsquo;t found the duplicate call setup to factor out,&#xA;another possible approach would have been to factor the two very similar&#xA;code blocks handling &lt;code&gt;SIGVTALRM&lt;/code&gt; and &lt;code&gt;SIGPROF&lt;/code&gt; into a single subroutine,&#xA;sitting in the middle of the &lt;code&gt;bsd_ast&lt;/code&gt; function code, and to call it twice.&#xA;Removing the second copy of the code would leave plenty of space&#xA;for the longer &lt;code&gt;psignal_uthread&lt;/code&gt; call setup.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;The code we&amp;rsquo;ve been using is from OS X Mountain Lion, but all versions of OS X have this bug,&#xA;and the relevant bits of &lt;code&gt;bsd_ast&lt;/code&gt; haven&amp;rsquo;t changed from version to version,&#xA;although the compiler and therefore the generated code do change.&#xA;Even so, all have the basic pattern and all can be fixed with the same kind of rewrite.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Using the Patch&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;&#xA;If you use the Go or the C++ gperftools and want accurate CPU profiles on OS X, I&amp;rsquo;ve packaged up the &#xA;binary patcher as &lt;a href=&#34;http://godoc.org/code.google.com/p/rsc/cmd/pprof_mac_fix&#34;&gt;code.google.com/p/rsc/cmd/pprof_mac_fix&lt;/a&gt;.&#xA;It can handle OS X Snow Leopard, Lion, and Mountain Lion.&#xA;Will OS X Mavericks need a fix too?&#xA;We&amp;rsquo;ll see.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Further Reading&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;&#xA;Binary patching is an old, venerable technique. This is just a simple instance of it.&#xA;If you liked reading about this, you may also like to read Jeff Arnold&amp;rsquo;s paper&#xA;&amp;ldquo;&lt;a href=&#34;http://www.ksplice.com/doc/ksplice.pdf&#34;&gt;Ksplice: Automatic Rebootless Kernel Updates&lt;/a&gt;.&amp;rsquo;&amp;rsquo;&#xA;Ksplice can construct binary patches for Linux security vulnerabilities&#xA;and apply them on the fly to a running system.&#xA;&lt;/p&gt;&#xA;&#xA;&#xA;</content>
  </entry>
  <entry>
    <title>How To Build a User-Level CPU Profiler</title>
    <id>tag:research.swtch.com,2012:research.swtch.com/pprof</id>
    <link rel="alternate" href="http://research.swtch.com/pprof"></link>
    <published>2013-08-08T13:00:00-04:00</published>
    <updated>2013-08-08T13:00:00-04:00</updated>
    <summary type="text">The internals of Google&#39;s pprof CPU Profiler (for C++ and Go)</summary>
    <content type="html">&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;When I spent a summer as a Google intern in 2006,&#xA;one of the many pleasant surprises was Google&amp;rsquo;s pprof tool,&#xA;which makes profiling a C++ program&amp;rsquo;s CPU and memory usage incredibly easy.&#xA;It had already been open sourced, and when I returned to grad school,&#xA;I incorporated pprof into my standard development toolbox when&#xA;writing C programs.&#xA;Later, when I was back at Google working on Go, implementing&#xA;support for pprof was a must.&#xA;Now it&amp;rsquo;s part of the standard development toolbox for any Go programmer.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;I&amp;rsquo;ve written on the Go blog about&#xA;&lt;a href=&#34;http://blog.golang.org/profiling-go-programs&#34;&gt;what it&amp;rsquo;s like to use pprof&#xA;to profile Go programs&lt;/a&gt;.&#xA;This post is about how pprof gathers the CPU profile,&#xA;with the help of hardware timers and the operating system.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Hardware Timers&lt;/h3&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;One of the key jobs of an operating system is to allow multiple programs to run&#xA;on a computer at the same time, each under the illusion that they have continuous&#xA;access to one or more CPUs, even though in practice each CPU can only be&#xA;running one program at a time.&#xA;On most systems, what happens is that the operating system asks the computer&amp;rsquo;s timer chip&#xA;to interrupt normal execution every so often (every 10 milliseconds is common)&#xA;and run a small piece of the operating system called, appropriately enough,&#xA;the timer interrupt handler.&#xA;The timer interrupt handler checks to see if other programs are waiting to run.&#xA;If so, and if the current program has used up its turn on the CPU, the handler&#xA;saves the CPU registers of the current program and loads the CPU registers for&#xA;another program that has been waiting.&#xA;Shuffling the programs on and off the CPUs is called multitasking, and doing it&#xA;based on hardware interrupts like this is called preemptive multitasking: one &#xA;running program is preempted to make room for another.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;Not all operating systems provide preemptive multitasking.&#xA;Some, like MS-DOS or iOS 3, have no multitasking, so only one program can run at a time.&#xA;Others, like Windows 3.1 and Mac OS 9, use cooperative multitasking,&#xA;in which programs voluntarily relinquish the CPU at certain points.&#xA;Cooperative multitasking avoids the complexity of using the timer,&#xA;but it means that one badly written program&#xA;can hang a machine.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;Another useful thing you can do with a hardware interrupt is gather a profile&#xA;of a running program.&#xA;Every time the hardware interrupt happens, the operating system can record&#xA;what the program was doing. A collection of these samples makes up a &#xA;(hopefully representative) profile of where the program spends its time.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;A Simple Profiler&lt;/h3&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;Since the operating system moderates access to the hardware, it must be&#xA;involved to use the hardware timer to implement a profiler.&#xA;The simplest approach is for the operating system to collect the profile.&#xA;To illustrate this approach, I&amp;rsquo;ll describe what the Plan 9 kernel does&#xA;for user-level profiling.&#xA;This is little changed from the original Unix &lt;i&gt;profil&lt;/i&gt;(2) scheme.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;When a program is running, writing to a control file in the /proc&#xA;file system enables profiling.&#xA;At that point, the operating system allocates an array of counts&#xA;with one count for every 8-byte section of the program code,&#xA;and attaches it to the program.&#xA;Then, each time a timer interrupt happens, the handler &#xA;uses the program counter—the address of the instruction in the&#xA;code that the program is currently executing—divided by 8 as&#xA;an index into that array and increments that entry.&#xA;Later, another program (on Plan 9, called &lt;i&gt;tprof&lt;/i&gt;) can be run to&#xA;read the profile from the kernel and determine the function&#xA;and specific line in the original source code corresponding to&#xA;each counter and summarize the results.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;This design keeps the kernel very simple: the timer handler only&#xA;adds an increment instruction. However, it is also inflexible: that&amp;rsquo;s&#xA;all the kernel will do for a program.&#xA;And there are potential improvements that could be made with&#xA;more flexibility. For example, in programs that use libraries, the&#xA;profiles may not have enough context to be useful.&#xA;If you find your program is spending 30% of its time in &lt;code&gt;memset&lt;/code&gt;&#xA;but you don&amp;rsquo;t know what is calling &lt;code&gt;memset&lt;/code&gt;, you can&amp;rsquo;t fix the problem.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;The next step forward is to move profiling logic out of the kernel,&#xA;so that it is easier to customize.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;User-Level Timers&lt;/h3&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;Modern Unix systems move profiling logic out of the kernel by providing&#xA;a timer abstraction to user programs. The programs can then&#xA;build whatever they want, including profiling.&#xA;(Another use might be to build preemptive scheduling in a user-level&#xA;lightweight thread scheduler.)&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;On these systems, &lt;i&gt;setitimer&lt;/i&gt;(2) provides three timers, for &amp;ldquo;real time,&amp;rsquo;&amp;rsquo; &amp;ldquo;virtual time,&amp;rsquo;&amp;rsquo;&#xA;and &amp;ldquo;profiling time.&amp;rsquo;&amp;rsquo;&#xA;The &amp;ldquo;real time&amp;rsquo;&amp;rsquo; timer counts down in real (wall clock) time. If it is set for 5 seconds,&#xA;it fires 5 seconds from now.&#xA;The &amp;ldquo;virtual time&amp;rsquo;&amp;rsquo; timer counts down in program execution time. If it is set for 5 seconds,&#xA;it fires after the program has executed for 5 seconds.&#xA;The &amp;ldquo;profiling time&amp;rsquo;&amp;rsquo; timer is similar except that it also counts down when&#xA;the kernel is executing a system call on behalf of the program.&#xA;When any of these timers fires, the kernel stops what the program is doing&#xA;and invokes a special routine in the program called a signal handler.&#xA;The signal handler in a program is analogous to the timer interrupt handler&#xA;in the kernel.&#xA;The signal being delivered depends on the kind of timer: &lt;code&gt;SIGALRM&lt;/code&gt;, &lt;code&gt;SIGVTALRM&lt;/code&gt;, or &lt;code&gt;SIGPROF&lt;/code&gt; for the three kinds.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;A program that wants to profile its own execution can set a profiling timer&#xA;and then arrange to record a profiling sample in its signal handler.&#xA;Because the profiling is being done by the program, not by the kernel,&#xA;it can be replaced without kernel changes and reboots,&#xA;by changing the program and recompiling.&#xA;This allows experimentation and in turn the construction of richer&#xA;profiles. In particular, it allows gathering more information in each&#xA;profiling sample.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Profiling with pprof&lt;/h3&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;In pprof, each profiling sample records not just the current program counter&#xA;but also the program counter for each frame in the current call stack.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;Obtaining the current call stack is not always trivial: typically it requires&#xA;arranging for the code being executed to maintain a certain form&#xA;(for example, to use a frame pointer in all functions) or arranging for&#xA;additional metadata to be available during the trace.&#xA;But modern computers are incredibly fast: even walking the call stack&#xA;using metadata lookups can be done in well under 100 microseconds,&#xA;which would correspond to only a 1% slowdown for a 10 millisecond profiling&#xA;period.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;Recording a sampled stack is a little tricky. The signal handler, because it&#xA;interrupts normal program execution, is limited in what it can do.&#xA;In particular, the signal handler cannot even allocate memory or&#xA;acquire locks, so the stored profile cannot grow dynamically.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;In pprof, the profile is maintained in a hash table in which each entry&#xA;records a distinct stack. Specifically, in the Go pprof,&#xA;each stack hashes to a specific hash value&#xA;denoting one of 1024 buckets in a hash table, and in that bucket are four entries for stacks with&#xA;that hash. If the stack being recorded is already present, the existing&#xA;entry&amp;rsquo;s count is simply incremented. Otherwise, the stack must replace&#xA;one of the four entries. If one or more is unused, the decision is easy.&#xA;If all four entries are in use, pprof evicts the entry with the smallest&#xA;count. The evicted entry is appended to a fixed-size log with space for&#xA;2&lt;sup&gt;1&lt;/sup&gt;&lt;sup&gt;8&lt;/sup&gt; entries, and then its space is reused for the stack we want to record.&#xA;A background goroutine, not running as a signal handler,&#xA;copies entries out of the log and into the saved profile data.&#xA;If the goroutine cannot keep up with the rate at which the log is filling,&#xA;the counts for the entries that are lost are assigned to a special&#xA;&amp;ldquo;lost profile&amp;rsquo;&amp;rsquo; function. In practice, most programs spend their time&#xA;doing the same thing over and over again, so the active work of the&#xA;program fits in the hash table, the log grows slowly, and the log&#xA;draining goroutine has no problem keeping up.&#xA;In C++ pprof, there is no log-draining goroutine. Instead, the signal&#xA;handler writes the log to an already open file when it fills.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Interpreting the data&lt;/h3&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;A pprof profile, then, is a set of stack traces with each mapped&#xA;to the count of the number of times that trace was seen.&#xA;The usual way this profile is presented is to create a graph&#xA;in which each function is a node and an edge between nodes denotes a call.&#xA;Each function node has two counts: first the sum of the counts of all the profiles&#xA;in which it was the final entry and second the sum of the counts of all the profiles&#xA;in which it appeared.&#xA;These correspond to time executing that function and cumulative time&#xA;executing that function and the things it called.&#xA;The edges are given counts corresponding to the number of samples&#xA;in which that call was observed somewhere on the stack.&#xA;Sizing the nodes and edges based on their counts makes the expensive parts&#xA;of the program stand out.&#xA;&lt;a href=&#34;http://benchgraffiti.googlecode.com/hg/havlak/havlak1.svg&#34;&gt;This example&lt;/a&gt; should view nicely in most web browsers;&#xA;use the scroll wheel to zoom and click and drag to pan.&#xA;In that profile, it is apparent that &lt;code&gt;hash_lookup&lt;/code&gt; called from &lt;code&gt;mapaccess1&lt;/code&gt;&#xA;is taking the most time, and we can use the call context to see that&#xA;about 40% of the calls are from code in &lt;code&gt;main.FindLoops&lt;/code&gt; while 60% of&#xA;the calls are from code in &lt;code&gt;main.DFS&lt;/code&gt;.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&lt;a href=&#34;http://benchgraffiti.googlecode.com/hg/havlak/havlak1.svg&#34;&gt;&lt;img src=&#34;pprof.png&#34; style=&#34;border: 1px solid black;&#34;&gt;&lt;/a&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;Of course, there is also a command-line interface, tabular results, and annotated source code.&#xA;See the &lt;a href=&#34;http://blog.golang.org/profiling-go-programs&#34;&gt;Profiling Go Programs&lt;/a&gt; post.&#xA;&#xA;&lt;h3&gt;Further Reading&lt;/h3&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;Timer-based profiling is very old. On Unix, the heritage dates back at least &#xA;to the Seventh Edition.&#xA;The &lt;a href=&#34;http://plan9.bell-labs.com/7thEdMan/v7vol1.pdf&#34;&gt;Seventh Edition Unix manual&lt;/a&gt; contains documentation&#xA;for &lt;i&gt;prof&lt;/i&gt;(1), &lt;i&gt;profil&lt;/i&gt;(2), and &lt;i&gt;monitor&lt;/i&gt;(3), and you can even read the source for&#xA;&lt;a href=&#34;http://www.tuhs.org/Archive/PDP-11/Trees/V7/usr/src/libc/gen/mon.c&#34;&gt;monitor&lt;/a&gt;.&#xA;However, pprof is the first profiler I&amp;rsquo;ve seen that records and presents stack traces well.&#xA;If you&amp;rsquo;d like to read more about pprof,&#xA;it is part of the C++ &lt;a href=&#34;https://code.google.com/p/gperftools/&#34;&gt;gperftools&lt;/a&gt; open source project and has&#xA;good documentation.&#xA;The Go implementation of the CPU profile collection&#xA;is in &lt;a href=&#34;http://golang.org/src/pkg/runtime/cpuprof.c&#34;&gt;runtime/cpuprof.c&lt;/a&gt;.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;It is of course also possible to collect profiles without timers, such as by rewriting the program code.&#xA;In general the overhead of these tends to be larger than timer-based sampling,&#xA;and it can skew the results so that what looks expensive with profiling enabled&#xA;is not expensive normally.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;Modern CPUs have introduced all kinds of other profiling timers, based on instructions executed,&#xA;cache misses, and so on. These are very powerful, but so far the interfaces to them are&#xA;operating system-specific.&#xA;One nice thing about pprof is that, because it&amp;rsquo;s using an old, widely supported Unix feature,&#xA;it&amp;rsquo;s fairly portable. I can use a single tool on FreeBSD, Linux, and OS X.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;pp&#34;&gt;&#xA;&lt;i&gt;Setitimer&lt;/i&gt;(2) was introduced by 4.2BSD; that indirection makes excellent tools like pprof possible.&#xA;Of course, it has to work correctly.&#xA;In my next post I&amp;rsquo;ll look at one system where it doesn&amp;rsquo;t.&#xA;&lt;/p&gt;&#xA;&#xA;&#xA;</content>
  </entry>
  <entry>
    <title>A Tour of Acme</title>
    <id>tag:research.swtch.com,2012:research.swtch.com/acme</id>
    <link rel="alternate" href="http://research.swtch.com/acme"></link>
    <published>2012-09-17T11:00:00-04:00</published>
    <updated>2012-09-17T11:00:00-04:00</updated>
    <summary type="text">A video introduction to Acme, the Plan 9 text editor</summary>
    <content type="html">&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;People I work with recognize my computer easily:&#xA;it&#39;s the one with nothing but yellow windows and blue bars on the screen.&#xA;That&#39;s the text editor acme, written by Rob Pike for Plan 9 in the early 1990s.&#xA;Acme focuses entirely on the idea of text as user interface.&#xA;It&#39;s difficult to explain acme without seeing it, though, so I&#39;ve put together&#xA;a screencast explaining the basics of acme and showing a brief programming session.&#xA;Remember as you watch the video that the 854x480 screen is quite cramped.&#xA;Usually you&#39;d run acme on a larger screen: even my MacBook Air has almost four times&#xA;as much screen real estate.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&lt;div style=&#34;border: 1px solid black; width: 853px; height: 480px;&#34;&gt;&lt;iframe width=&#34;853&#34; height=&#34;480&#34; src=&#34;https://www.youtube.com/embed/dP1xVpMPn8M?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;The video doesn&#39;t show everything acme can do, nor does it show all the ways you can use it.&#xA;Even small idioms like where you type text to be loaded or executed vary from user to user.&#xA;To learn more about acme, read Rob Pike&#39;s paper &amp;ldquo;&lt;a href=&#34;/acme.pdf&#34;&gt;Acme: A User Interface for Programmers&lt;/a&gt;&amp;rdquo; and then try it.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Acme runs on most operating systems.&#xA;If you use &lt;a href=&#34;http://plan9.bell-labs.com/plan9/&#34;&gt;Plan 9 from Bell Labs&lt;/a&gt;, you already have it.&#xA;If you use FreeBSD, Linux, OS X, or most other Unix clones, you can get it as part of &lt;a href=&#34;http://swtch.com/plan9port/&#34;&gt;Plan 9 from User Space&lt;/a&gt;.&#xA;If you use Windows, I suggest trying acme as packaged in &lt;a href=&#34;http://code.google.com/p/acme-sac/&#34;&gt;acme stand alone complex&lt;/a&gt;, which is based on the Inferno programming environment.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=lp&gt;&lt;b&gt;Mini-FAQ&lt;/b&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;i&gt;Q. Can I use scalable fonts?&lt;/i&gt; A. On the Mac, yes. If you run &lt;code&gt;acme -f /mnt/font/Monaco/16a/font&lt;/code&gt; you get 16-point anti-aliased Monaco as your font, served via &lt;a href=&#34;http://swtch.com/plan9port/man/man4/fontsrv.html&#34;&gt;fontsrv&lt;/a&gt;. If you&#39;d like to add X11 support to fontsrv, I&#39;d be happy to apply the patch.&#xA;&lt;li&gt;&lt;i&gt;Q. Do I need X11 to build on the Mac?&lt;/i&gt; A. No. The build will complain that it cannot build &amp;lsquo;snarfer&amp;rsquo; but it should complete otherwise. You probably don&#39;t need snarfer.&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;If you&#39;re interested in history, the predecessor to acme was called help. Rob Pike&#39;s paper &amp;ldquo;&lt;a href=&#34;/help.pdf&#34;&gt;A Minimalist Global User Interface&lt;/a&gt;&amp;rdquo; describes it. See also &amp;ldquo;&lt;a href=&#34;/sam.pdf&#34;&gt;The Text Editor sam&lt;/a&gt;&amp;rdquo;&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;&lt;i&gt;Correction&lt;/i&gt;: the smiley program in the video was written by Ken Thompson.&#xA;I got it from Dennis Ritchie, the more meticulous archivist of the pair.&#xA;&lt;/p&gt;&#xA;&#xA;&#xA;</content>
  </entry>
  <entry>
    <title>A Tour of Go</title>
    <id>tag:research.swtch.com,2012:research.swtch.com/gotour</id>
    <link rel="alternate" href="http://research.swtch.com/gotour"></link>
    <published>2012-06-21T00:00:00-04:00</published>
    <updated>2012-06-21T00:00:00-04:00</updated>
    <summary type="text">A video introduction to Go: interfaces, reflection, concurrency</summary>
    <content type="html">&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;Last week, I gave a talk about Go at the Boston Google Developers&#xA;Group meeting. There were some problems with the recording, so I&#xA;have rerecorded the talk as a screencast and posted it on YouTube.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/ytEkHepK08c?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;Here are the answers to questions asked at the end of the talk.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;&lt;b&gt;Q. How does Go work with debuggers?&lt;/b&gt;&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;To start, both Go toolchains include debugging information that gdb&#xA;can read in the final binaries, so basic gdb functionality works on Go&#xA;programs just as it does on C programs.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;We&amp;rsquo;ve talked for a while about a custom Go debugger, but there isn&amp;rsquo;t&#xA;one yet.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;Many of the programs we want to debug are live, running programs. The&#xA;&lt;a href=&#34;http://golang.org/pkg/net/http/pprof/&#34;&gt;net/http/pprof&lt;/a&gt; package provides debugging information like goroutine&#xA;stacks, memory profiling, and cpu profiling in response to special&#xA;HTTP requests.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;&lt;b&gt;Q. If a goroutine is stuck reading from a channel with no other references, does the goroutine get garbage collected?&lt;/b&gt;&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;No. From the garbage collection point of view, both sides of the&#xA;channel are represented by the same pointer, so it can&amp;rsquo;t distinguish&#xA;the receive and send sides. Even if we could detect this situation,&#xA;we&amp;rsquo;ve found that it&amp;rsquo;s very useful to keep these goroutines around,&#xA;because the program is probably heading for a deadlock. When a Go&#xA;program deadlocks, it prints all its goroutine stacks and then exits.&#xA;If we garbage collected the goroutines as they got stuck, the deadlock&#xA;handler wouldn&amp;rsquo;t have anything useful to print except &#34;your entire&#xA;program has been garbage collected&#34;.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;&lt;b&gt;Q. Can a C++ program call into Go?&lt;/b&gt;&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;We wrote a tool called &lt;a href=&#34;http://golang.org/cmd/cgo/&#34;&gt;cgo&lt;/a&gt; so that Go programs can call into C, and&#xA;we&amp;rsquo;ve implemented support for Go in SWIG, so that Go programs can call&#xA;into C++. In those programs, the C or C++ can in turn call back into&#xA;Go. But we don&amp;rsquo;t have support for a C or C++ program—one that starts&#xA;execution in the C or C++ world instead of the Go world—to call into&#xA;Go.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;The hardest part of the cross-language calls is converting between the&#xA;C calling convention and the Go calling convention, specifically with&#xA;the regard to the implementation of segmented stacks. But that&amp;rsquo;s been&#xA;done and works.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;Making the assumption that these mixed-language binaries start in Go&#xA;has simplified a number of parts of the implementation. I don&amp;rsquo;t&#xA;anticipate any technical surprises involved in removing these&#xA;assumptions. It&amp;rsquo;s just work.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;&lt;b&gt;Q. What are the areas that you specifically are trying to improve the language?&lt;/b&gt;&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;For the most part, I&amp;rsquo;m not trying to improve the language itself. Part&#xA;of the effort in preparing Go 1 was to identify what we wanted to&#xA;improve and do it. Many of the big changes were based on two or three&#xA;years of experience writing Go programs, and they were changes we&amp;rsquo;d&#xA;been putting off because we knew that they&amp;rsquo;d be disruptive. But now&#xA;that Go 1 is out, we want to stop changing things and spend another&#xA;few years using the language as it exists today. At this point we&#xA;don&amp;rsquo;t have enough experience with Go 1 to know what really needs&#xA;improvement.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;My Go work is a small amount of fixing bugs in the libraries or in the&#xA;compiler and a little bit more work trying to improve the performance&#xA;of what&amp;rsquo;s already there.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;&lt;b&gt;Q. What about talking to databases and web services?&lt;/b&gt;&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;For databases, one of the packages we added in Go 1 is a standard&#xA;&lt;a href=&#34;http://golang.org/pkg/database/sql/&#34;&gt;database/sql&lt;/a&gt; package. That package defines a standard API for&#xA;interacting with SQL databases, and then people can implement drivers&#xA;that connect the API to specific database implementations like SQLite&#xA;or MySQL or Postgres.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;For web services, you&amp;rsquo;ve seen the support for JSON and XML encodings.&#xA;Those are typically good enough for ad hoc REST services. I recently&#xA;wrote a &lt;a href=&#34;http://go.pkgdoc.org/code.google.com/p/rsc/smugmug&#34;&gt;package for connecting to the SmugMug photo hosting API&lt;/a&gt;, and there&amp;rsquo;s one&#xA;generic call that unmarshals the response into a struct of the&#xA;appropriate type, using &lt;a href=&#34;http://golang.org/pkg/encoding/json/#Unmarshal&#34;&gt;json.Unmarshal&lt;/a&gt;. I expect that XML-based web&#xA;services like SOAP could be framed this way too, but I&amp;rsquo;m not aware of&#xA;anyone who&amp;rsquo;s done that.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;Inside Google, of course, we have plenty of services, but they&amp;rsquo;re&#xA;based on protocol buffers, so of course there&amp;rsquo;s a good&#xA;&lt;a href=&#34;http://code.google.com/p/goprotobuf/&#34;&gt;protocol buffer library for Go&lt;/a&gt;.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;&lt;b&gt;Q. What about generics? How far off are they?&lt;/b&gt;&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;People have asked us about generics from day 1. The answer has always&#xA;been, and still is, that it&amp;rsquo;s something we&amp;rsquo;ve put a lot of thought&#xA;into, but we haven&amp;rsquo;t yet found an approach that we think is a good fit&#xA;for Go. We&amp;rsquo;ve talked to people who have been involved in the design of&#xA;generics in other languages, and they&amp;rsquo;ve almost universally cautioned&#xA;us not to rush into something unless we understand it very well and&#xA;are comfortable with the implications. We don&amp;rsquo;t want to do something&#xA;that we&amp;rsquo;ll be stuck with forever and regret.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;Also, speaking for myself, I don&amp;rsquo;t miss generics when I write Go&#xA;programs. What&amp;rsquo;s there, having built-in support for arrays, slices,&#xA;and maps, seems to work very well.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;Finally, we just made this promise about backwards compatibility with&#xA;the release of Go 1. If we did add some form of generics, my guess is&#xA;that some of the existing APIs would need to change, which can&amp;rsquo;t&#xA;happen until Go 2, which I think is probably years away.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;&lt;b&gt;Q. What types of projects does Google use Go for?&lt;/b&gt;&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;Most of the things we use Go for I can&amp;rsquo;t talk about. One notable&#xA;exception is that Go is an App Engine language, which we announced at&#xA;I/O last year. Another is &lt;a href=&#34;http://code.google.com/p/vitess/&#34;&gt;vtocc&lt;/a&gt;,&#xA;a MySQL load balancer used to manage database lookups in YouTube&amp;rsquo;s core infrastructure.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;&lt;b&gt;Q. How does the Plan 9 toolchain differ from other compilers?&lt;/b&gt;&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;It&amp;rsquo;s a completely incompatible toolchain in every way. The main&#xA;difference is that object files don&amp;rsquo;t contain machine code in the&#xA;sense of having the actual instruction bytes that will be used in the&#xA;final binary. Instead they contain a custom encoding of the assembly&#xA;listings, and the linker is in charge of turning those into actual&#xA;machine instructions. This means that the assembler, C compiler, and&#xA;Go compiler don&amp;rsquo;t all duplicate this logic. The main change for Go is&#xA;the support for segmented stacks.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;I should add that we love the fact that we have two completely&#xA;different compilers, because it keeps us honest about really&#xA;implementing the spec.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;&lt;b&gt;Q. What are segmented stacks?&lt;/b&gt;&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;One of the problems in threaded C programs is deciding how big a stack&#xA;each thread should have. If the stack is too small, then the thread&#xA;might run out of stack and cause a crash or silent memory corruption,&#xA;and if the stack is too big, then you&amp;rsquo;re wasting memory. In Go, each&#xA;goroutine starts with a small stack, typically 4 kB, and then each&#xA;function checks if it is about to run out of stack and if so allocates&#xA;a new stack segment that gets recycled once it&amp;rsquo;s not needed anymore.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;Gccgo supports segmented stacks, but it requires support added&#xA;recently to the new GNU linker, gold, and that support is only&#xA;implemented for x86-32 and x86-64.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;Segmented stacks are something that lots of people have done before in&#xA;experimental or research systems, but they have never made it into the&#xA;C toolchains.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;&lt;b&gt;Q. What is the overhead of segmented stacks?&lt;/b&gt;&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;It&amp;rsquo;s a few instructions per function call. It&amp;rsquo;s been a long time since&#xA;I tried to measure the precise overhead, but in most programs I expect&#xA;it to be not more than 1-2%. There are definitely things we could do&#xA;to try to reduce that, but it hasn&amp;rsquo;t been a concern.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;&lt;b&gt;Q. Do goroutine stacks adapt in size?&lt;/b&gt;&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;The initial stack allocated for a goroutine does not adapt. It&amp;rsquo;s&#xA;always 4k right now. It has been other values in the past but always a&#xA;constant. One of the things I&amp;rsquo;d like to do is to look at what the&#xA;goroutine will be running and adjust the stack accordingly, but I&#xA;haven&amp;rsquo;t.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;&lt;b&gt;Q. Are there any short-term plans for dynamic loading of modules?&lt;/b&gt;&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;No. I don&amp;rsquo;t think there are any technical surprises, but assuming that&#xA;everything is statically linked simplified some of the implementation.&#xA;Like with calling Go from C++ programs, I believe it&amp;rsquo;s just work.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;Gccgo might be closer to support for this, but I don&amp;rsquo;t believe that it&#xA;supports dynamic loading right now either.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;&lt;b&gt;Q. How much does the language spec say about reflection?&lt;/b&gt;&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;The spec is intentionally vague about reflection, but &lt;a href=&#34;http://golang.org/pkg/reflect/&#34;&gt;package&#xA;reflect&amp;rsquo;s API&lt;/a&gt; is definitely part of the Go 1 definition. Any&#xA;conforming implementation would need to implement that API. In fact,&#xA;gc and gccgo do have different implementations of that package reflect&#xA;API, but then the packages that use reflect like &lt;a href=&#34;http://golang.org/pkg/fmt/&#34;&gt;fmt&lt;/a&gt; and &lt;a href=&#34;http://golang.org/pkg/encoding/json/&#34;&gt;json&lt;/a&gt; can be&#xA;shared.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;&lt;b&gt;Q. Do you have a release schedule?&lt;/b&gt;&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;We don&amp;rsquo;t have any fixed release schedule. We&amp;rsquo;re not keeping things&#xA;secret, but we&amp;rsquo;re also not making commitments to specific timelines.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;Go 1 was in progress publicly for months, and if you watched you could&#xA;see the bug count go down and the release candidates announced, and so&#xA;on.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;Right now we&amp;rsquo;re trying to slow down. We want people to write things&#xA;using Go, which means we need to make it a stable foundation to build&#xA;on. Go 1.0.1, the first bug release, was released four weeks after Go&#xA;1, and Go 1.0.2 was seven weeks after Go 1.0.1.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;&lt;b&gt;Q. Where do you see Go in five years? What languages will it replace?&lt;/b&gt;&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;I hope that it will still be at golang.org, that the Go project will&#xA;still be thriving and relevant. We built it to write the kinds of&#xA;programs we&amp;rsquo;ve been writing in C++, Java, and Python, but we&amp;rsquo;re not&#xA;trying to go head-to-head with those languages. Each of those has&#xA;definite strengths that make them the right choice for certain&#xA;situations. We think that there are plenty of situations, though,&#xA;where Go is a better choice.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;If Go doesn&amp;rsquo;t work out, and for some reason in five years we&amp;rsquo;re&#xA;programming in something else, I hope the something else would have&#xA;the features I talked about, specifically the Go way of doing&#xA;interfaces and the Go way of handling concurrency.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;If Go fails but some other language with those two features has taken&#xA;over the programming landscape, if we can move the computing world to&#xA;a language with those two features, then I&amp;rsquo;d be sad about Go but happy&#xA;to have gotten to that situation.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;&lt;b&gt;Q. What are the limits to scalability with building a system with many goroutines?&lt;/b&gt;&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;The primary limit is the memory for the goroutines. Each goroutine&#xA;starts with a 4kB stack and a little more per-goroutine data, so the&#xA;overhead is between 4kB and 5kB. That means on this laptop I can&#xA;easily run 100,000 goroutines, in 500 MB of memory, but a million&#xA;goroutines is probably too much.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;For a lot of simple goroutines, the 4 kB stack is probably more than&#xA;necessary. If we worked on getting that down we might be able to&#xA;handle even more goroutines. But remember that this is in contrast to&#xA;C threads, where 64 kB is a tiny stack and 1-4MB is more common.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;&lt;b&gt;Q. How would you build a traditional barrier using channels?&lt;/b&gt;&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;It&amp;rsquo;s important to note that channels don&amp;rsquo;t attempt to be a concurrency&#xA;Swiss army knife. Sometimes you do need other concepts, and the&#xA;standard &lt;a href=&#34;http://golang.org/pkg/sync/&#34;&gt;sync&lt;/a&gt; package has some helpers. I&amp;rsquo;d probably use a&#xA;&lt;a href=&#34;http://golang.org/pkg/sync/#WaitGroup&#34;&gt;sync.WaitGroup&lt;/a&gt;.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;If I had to use channels, I would do it like in the web crawler&#xA;example, with a channel that all the goroutines write to, and a&#xA;coordinator that knows how many responses it expects.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;&lt;b&gt;Q. What is an example of the kind of application you&amp;rsquo;re working on performance for? How will you beat C++?&lt;/b&gt;&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;I haven&amp;rsquo;t been focusing on specific applications. Go is still young&#xA;enough that if you run some microbenchmarks you can usually find&#xA;something to optimize. For example, I just sped up floating point&#xA;computation by about 25% a few weeks ago. I&amp;rsquo;m also working on more&#xA;sophisticated analyses for things like escape analysis and bounds&#xA;check elimination, which address problems that are unique to Go, or at&#xA;least not problems that C++ faces.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;Our goal is definitely not to beat C++ on performance. The goal for Go&#xA;is to be near C++ in terms of performance but at the same time be a&#xA;much more productive environment and language, so that you&amp;rsquo;d rather&#xA;program in Go.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;&lt;b&gt;Q. What are the security features of Go?&lt;/b&gt;&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;Go is a type-safe and memory-safe language. There are no dangling&#xA;pointers, no pointer arithmetic, no use-after-free errors, and so on.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;You can break the rules by importing package &lt;a href=&#34;http://golang.org/pkg/unsafe/&#34;&gt;unsafe&lt;/a&gt;, which gives&#xA;you a special type unsafe.Pointer. You can convert any pointer or&#xA;integer to an unsafe.Pointer and back. That&amp;rsquo;s the escape hatch, which&#xA;you need sometimes, like for extracting the bits of a float64 as a&#xA;uint64. But putting it in its own package means that unsafe code is&#xA;explicitly marked as unsafe. If your program breaks in a strange way,&#xA;you know where to look.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;Isolating this power also means that you can restrict it. On App&#xA;Engine you can&amp;rsquo;t import package unsafe in the code you upload for your&#xA;app.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;I should point out that the current Go implementation does have&#xA;&lt;a href=&#34;http://research.swtch.com/gorace&#34;&gt;data races&lt;/a&gt;, but they are not&#xA;fundamental to the language. It would be possible to eliminate the&#xA;races at some cost in efficiency, and for now we&amp;rsquo;ve decided not to do&#xA;that. There are also tools such as &lt;a href=&#34;http://code.google.com/p/data-race-test/wiki/ThreadSanitizerGo&#34;&gt;Thread Sanitizer&lt;/a&gt; that help find these kinds of data races in Go&#xA;programs.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;&lt;b&gt;Q. What language do you think Go is trying to displace?&lt;/b&gt;&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;I don&amp;rsquo;t think of Go that way. We were writing C++ code before we did&#xA;Go, so we definitely wanted not to write C++ code anymore. But we&amp;rsquo;re&#xA;not trying to displace all C++ code, or all Python code, or all Java&#xA;code, except maybe in our own day-to-day work.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;One of the surprises for me has been the variety of languages that new&#xA;Go programmers used to use. When we launched, we were trying to&#xA;explain Go to C++ programmers, but many of the programmers Go has&#xA;attracted have come from more dynamic languages like Python or Ruby.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;&lt;b&gt;Q. How does Go make it possible to use multiple cores?&lt;/b&gt;&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;Go lets you tell the runtime how many operating system threads to use&#xA;for executing goroutines, and then it muxes the goroutines onto those&#xA;threads. So if you&amp;rsquo;ve written a program that has four or more&#xA;goroutines executing simultaneously, you can tell the runtime to use&#xA;four OS threads and then you&amp;rsquo;re running on four cores.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;We&amp;rsquo;ve been pleasantly surprised by how easy people find it to write&#xA;these kinds of programs. People who have not written parallel or&#xA;concurrent programs before write concurrent Go programs using channels&#xA;that can take advantage of multiple cores, and they enjoy the&#xA;experience. That&amp;rsquo;s more than you can usually say for C threads. Joe&#xA;Armstrong, one of the creators of Erlang, makes the point that&#xA;thinking about concurrency in terms of communication might be more&#xA;natural for people, since communication is something we&amp;rsquo;ve done for a&#xA;long time. I agree.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;&lt;b&gt;Q. How does the muxing of goroutines work?&lt;/b&gt;&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;It&amp;rsquo;s not very smart. It&amp;rsquo;s the simplest thing that isn&amp;rsquo;t completely&#xA;stupid: all the scheduling operations are O(1), and so on, but there&amp;rsquo;s&#xA;a shared run queue that the various threads pull from. There&amp;rsquo;s no&#xA;affinity between goroutines and threads, there&amp;rsquo;s no attempt to make&#xA;sophisticated scheduling decisions, and there&amp;rsquo;s not even preemption.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;The goroutine scheduler was the first thing I wrote when I started&#xA;working on Go, even before I was working full time on it, so it&amp;rsquo;s just&#xA;about four years old. It has served us surprisingly well, but we&amp;rsquo;ll&#xA;probably want to replace it in the next year or so. We&amp;rsquo;ve been having&#xA;some discussions recently about what we&amp;rsquo;d want to try in a new&#xA;scheduler.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;&lt;b&gt;Q. Is there any plan to bootstrap Go in Go, to write the Go compiler in Go?&lt;/b&gt;&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;There&amp;rsquo;s no immediate plan. Go does ship with a Go program parser&#xA;written in Go, so the first piece is already done, and there&amp;rsquo;s an&#xA;experimental type checker in the works, but those are mainly for&#xA;writing program analysis tools. I think that Go would be a great&#xA;language to write a compiler in, but there&amp;rsquo;s no immediate plan. The&#xA;current compiler, written in C, works well.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;I&amp;rsquo;ve worked on bootstrapped languages in the past, and I found that&#xA;bootstrapping is not necessarily a good fit for languages that are&#xA;changing frequently. It reminded me of climbing a cliff and screwing&#xA;hooks into the cliff once in a while to catch you if you fall. Once or&#xA;twice I got into situations where I had identified a bug in the&#xA;compiler, but then trying to write the code to fix the bug tickled the&#xA;bug, so it couldn&amp;rsquo;t be compiled. And then you have to think hard about&#xA;how to write the fix in a way that avoids the bug, or else go back&#xA;through your version control history to find a way to replay history&#xA;without introducing the bug. It&amp;rsquo;s not fun.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;The fact that Go wasn&amp;rsquo;t written in itself also made it much easier to&#xA;make significant language changes. Before the initial release we went&#xA;through a handful of wholesale syntax upheavals, and I&amp;rsquo;m glad we&#xA;didn&amp;rsquo;t have to worry about how we were going to rebootstrap the&#xA;compiler or ensure some kind of backwards compatibility during those&#xA;changes.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;Finally, I hope you&amp;rsquo;ve read Ken Thompson&amp;rsquo;s Turing Award lecture, &lt;a href=&#34;http://cm.bell-labs.com/who/ken/trust.html&#34;&gt;Reflections on Trusting Trust&lt;/a&gt;. When we were planning the initial open&#xA;source release, we liked to joke that no one in their right mind would&#xA;accept a bootstrapped compiler binary written by Ken.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;&lt;b&gt;Q. What does Go do to compile efficiently at scale?&lt;/b&gt;&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;This is something that we talked about a lot in early talks about Go.&#xA;The main thing is that it cuts off transitive dependencies when&#xA;compiling a single module. In most languages, if package A imports B,&#xA;and package B imports C, then the compilation of A reads not just the&#xA;compiled form of B but also the compiled form of C. In large systems,&#xA;this gets out of hand quickly. For example, in C++ on my Mac,&#xA;including &amp;lt;iostream&amp;gt; reads 25,326 lines from 131 files. &#xA;(C and C++ headers aren&#39;t &amp;ldquo;compiled form,&amp;rdquo; but the problem is the same.)&#xA;Go promises that each import reads a single compiled package file. If you&#xA;need to know something about other packages to understand that&#xA;package&amp;rsquo;s API, then the compiled file includes the extra information&#xA;you need, but only that.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;Of course, if you are building from scratch and package A imports B&#xA;which imports C, then of course C has to be compiled first, and then&#xA;B, and then A. The import point is that when you go to compile A, you&#xA;don&amp;rsquo;t reload C&amp;rsquo;s object file. In a real program, the dependencies are&#xA;usually not a chain like this. We might have A1, A2, A3, and so on all&#xA;importing B. It&amp;rsquo;s a significant win if none of them need to reread C.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;&lt;b&gt;Q. How do you identify a good project for Go?&lt;/b&gt;&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;I think a good project for Go is one that you&amp;rsquo;re excited about writing&#xA;in Go. Go really is a general purpose programming language, and except&#xA;for the compiler work, it&amp;rsquo;s the only language I&amp;rsquo;ve written significant&#xA;programs in for the past four years.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;Most of the people I know who are using Go are using it for networked&#xA;servers, where the concurrency features have something contribute, but&#xA;it&amp;rsquo;s great for other contexts too. I&amp;rsquo;ve used it to write a simple mail&#xA;reader, file system implementations to read old disks, and a variety&#xA;of other unnetworked programs.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;&lt;b&gt;Q. What is the current and future IDE support for Go?&lt;/b&gt;&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;I&amp;rsquo;m not an IDE user in the modern sense, so really I don&amp;rsquo;t know. We&#xA;think that it would be possible to write a really nice IDE&#xA;specifically for Go, but it&amp;rsquo;s not something we&amp;rsquo;ve had time to explore.&#xA;The Go distribution has a &lt;a href=&#34;http://golang.org/misc&#34;&gt;misc&lt;/a&gt; directory that&#xA;contains basic Go support for common editors, and there is a&#xA;&lt;a href=&#34;http://code.google.com/p/goclipse&#34;&gt;Goclipse project&lt;/a&gt; to write an&#xA;Eclipse-based IDE, but I don&amp;rsquo;t know much about those.&#xA;&lt;/p&gt;&#xA;&lt;p class=&#34;lp&#34;&gt;&#xA;The development environment I use,&#xA;&lt;a href=&#34;http://plan9.bell-labs.com/sys/doc/acme/acme.pdf&#34;&gt;acme&lt;/a&gt;, is great for&#xA;writing Go code, but not because of any custom Go support.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&#xA;If you have more questions, please consult &lt;a href=&#34;http://golang.org/help/&#34;&gt;these resources&lt;/a&gt;.&#xA;&lt;/p&gt;&#xA;&#xA;&#xA;</content>
  </entry>
  <entry>
    <title>QArt Codes</title>
    <id>tag:research.swtch.com,2012:research.swtch.com/qart</id>
    <link rel="alternate" href="http://research.swtch.com/qart"></link>
    <published>2012-04-12T15:00:00-04:00</published>
    <updated>2012-04-12T15:00:00-04:00</updated>
    <summary type="text">How to make pictures with QR codes, part II</summary>
    <content type="html">&#xA;&lt;style type=&#39;text/css&#39;&gt;&#xA;.matrix {&#xA;&#x9;font-family: sans-serif;&#xA;&#x9;font-size: 0.8em;&#xA;}&#xA;table.matrix {&#xA;&#x9;padding-left: 1em;&#xA;&#x9;padding-right: 1em;&#xA;&#x9;padding-top: 1em;&#xA;&#x9;padding-bottom: 1em;&#xA;}&#xA;.matrix td {&#xA;&#x9;padding-left: 0.3em;&#xA;&#x9;padding-right: 0.3em;&#xA;&#x9;border-left: 2px solid white;&#xA;&#x9;border-right: 2px solid white;&#xA;&#x9;text-align: center;&#xA;&#x9;color: #aaa;&#xA;}&#xA;.matrix td.gray {&#xA;&#x9;color: black;&#xA;&#x9;background-color: #ddd;&#xA;}&#xA;&lt;/style&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;QR codes are 2-dimensional bar codes that encode arbitrary&#xA;text strings.  A common use of QR codes is to encode URLs so&#xA;that people can scan a QR code (for example, on an advertising poster,&#xA;&lt;a href=&#34;http://www.brandchannel.com/home/post/QR-Marketing-Google-Maps.aspx&#34;&gt;building roof&lt;/a&gt;, &lt;a href=&#34;http://www.dailymail.co.uk/femail/article-2023726/Beach-volleyball-stars-sign-deal-advertising-bikini-clad-behinds.html&#34;&gt;volleyball bikini&lt;/a&gt;, &lt;a href=&#34;http://www.flickr.com/photos/fluidforms/3524861901/&#34;&gt;belt buckle&lt;/a&gt;, or &lt;a href=&#34;http://wtfqrcodes.com/post/18551054478/look-in-the-sky-its-a-bird-its-a-plane-its-the&#34;&gt;airplane banner&lt;/a&gt;)&#xA;to load a web site on a cell phone&#xA;instead of having to &amp;ldquo;type&amp;rdquo; in a URL.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;QR codes are encoded using &lt;a href=&#34;/field&#34;&gt;Reed-Solomon error-correcting codes&lt;/a&gt;, so that&#xA;a QR scanner does not have to see every pixel correctly in order&#xA;to decode the content.  The error correction makes it possible&#xA;to introduce a few errors (fewer than the maximum that the algorithm&#xA;can fix) in order to make an image.&#xA;For example, in 2008, &lt;a href=&#34;http://whomwah.com/2008/03/12/more-fun-with-qr-codes-and-the-bbc-logo/&#34;&gt;Duncan Robertson&lt;/a&gt; took a QR code for &amp;ldquo;http://bbc.co.uk/programmes&amp;rdquo; (left) and introduced errors in the form of a BBC logo (right):&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&lt;img src=&#34;qr-bbc.png&#34; /&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;That&#39;s a neat trick and a pretty logo, but it&#39;s uninteresting from&#xA;a technical standpoint.  Although the BBC logo pixels look like QR code&#xA;pixels, they are not contribuing to the QR code.&#xA;The QR reader can&#39;t tell much difference between the&#xA;BBC logo and the Union Jack.&#xA;There&#39;s just a bunch of noise in the middle either way.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&lt;img src=&#34;qr-bbc1.png&#34; /&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;Since the BBC QR logo appeared, there have been many imitators.&#xA;Most just slap an obviously out-of-place logo in the middle of the&#xA;code.  This &lt;a href=&#34;http://blog.cliffano.com/2009/05/18/qr-code-usage-in-japan/&#34;&gt;Disney poster&lt;/a&gt;&#xA;is notable for being more in the spirit of the BBC code.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;There&#39;s a different way to put pictures in QR codes.&#xA;Instead of scribbling on redundant pieces and relying on error&#xA;correction to preserve the meaning, we can engineer the&#xA;encoded values to create the picture in a code with no inherent errors,&#xA;like these:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&#xA;&lt;img src=&#34;qart1.png&#34; /&gt;&#xA;&lt;img src=&#34;qart2.png&#34; /&gt;&#xA;&lt;img src=&#34;qart3.png&#34; /&gt;&#xA;&lt;img src=&#34;qart4.png&#34; /&gt;&#xA;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;This post explains the math behind making codes like these, which I call QArt codes.&#xA;I have published the Go programs that generated these codes at&#xA;&lt;a href=&#34;http://code.google.com/p/rsc/source/browse/qr&#34;&gt;code.google.com/p/rsc&lt;/a&gt;&#xA;and created a &lt;a href=&#34;/qr/draw&#34;&gt;web site for creating these codes&lt;/a&gt;.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;&#xA;Background&#xA;&lt;/h3&gt;&#xA;&#xA;&lt;p class=lp&gt;For error correction, QR uses Reed-Solomon coding&#xA;(like nearly everything else).&#xA;For our purposes, Reed-Solomon coding has two important properties.&#xA;First, it is what coding theorists call a &lt;i&gt;systematic code&lt;/i&gt;: you can&#xA;see the original message in the encoding.&#xA;That is, the Reed-Solomon encoding of &amp;ldquo;hello&amp;rdquo; is &amp;ldquo;hello&amp;rdquo; followed by some error-correction bytes.&#xA;Second, Reed-Solomon encoded messages can be XOR&#39;ed:&#xA;if we have two different Reed-Solomon encoded blocks&#xA;b&lt;sub&gt;1&lt;/sub&gt; and b&lt;sub&gt;2&lt;/sub&gt; corresponding to messages m&lt;sub&gt;1&lt;/sub&gt; and m&lt;sub&gt;2&lt;/sub&gt;, &#xA;b&lt;sub&gt;1&lt;/sub&gt; ⊕ b&lt;sub&gt;2&lt;/sub&gt; is also a Reed-Solomon encoded block; it corresponds&#xA;to the message m&lt;sub&gt;1&lt;/sub&gt; ⊕ m&lt;sub&gt;2&lt;/sub&gt;.  (Here, ⊕ means XOR.)&#xA;If you are curious about why these two properties are true,&#xA;see my earlier post, &lt;a href=&#34;field&#34;&gt;Finite Field Arithmetic and Reed-Solomon Coding&lt;/a&gt;.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;QR Codes&lt;/h3&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;A QR code has a distinctive frame that help both people and computers&#xA;recognize them as QR codes.  The details of the frame depend on the&#xA;exact size of the code—bigger codes have room for more bits—but you&#xA;know one when you see it: the outlined squares are the giveaway.&#xA;Here are QR frames for a sampling of sizes:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&#xA;&lt;img src=&#34;qart16.png&#34; /&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;The colored pixels are where the Reed-Solomon-encoded data bits go.&#xA;Each code may have one or more Reed-Solomon blocks, depending on&#xA;its size and the error correction level.  The pictures show the bits from&#xA;each block in a different color.&#xA;The L encoding is the lowest amount of redundancy, about 20%.&#xA;The other three encodings increase the redundancy, using 38%, 55%, and 65%.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&#xA;&lt;img src=&#34;qart17.png&#34;&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=lp&gt;(By the way, you can read the redundancy level from&#xA;the top pixels in the two leftmost columns.  If black=0 and white=1, then&#xA;you can see that 00 is L, 01 is M, 10 is Q, and 11 is H.&#xA;Thus, you can tell that the QR code &lt;a href=&#34;http://www.flickr.com/photos/johncarney/3515851216/&#34;&gt;on the T-shirt in this picture&lt;/a&gt;&#xA;is encoded at the highest redundancy level,&#xA;while &lt;a href=&#34;http://store.xkcd.com/xkcd/#QRCodeShirt&#34;&gt;this shirt&lt;/a&gt; uses the lowest level and therefore might take longer or be harder to scan.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;As I mentioned above, the original message bits are included directly&#xA;in the message&#39;s Reed-Solomon encoding.&#xA;Thus, each bit in the original message corresponds to a pixel in the QR code.&#xA;Those are the lighter pixels in the pictures above.&#xA;The darker pixels are the error correction bits.&#xA;The encoded bits are laid down in a vertical boustrophedon pattern in&#xA;which each line is two columns wide, starting at the bottom right corner&#xA;and ending on the left side:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&#xA;&lt;img src=&#34;qart18.png&#34; /&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;We can easily work out where each message bit ends up in the QR code.&#xA;By changing those bits of the message, we can change those pixels and draw a picture.&#xA;There are, however, a few complications that make things interesting.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;QR Masks&lt;/h3&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;The first complication is that the encoded data is XOR&#39;ed with an obfuscating&#xA;mask to create the final code.  There are eight masks:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&#xA;&lt;img src=&#34;qart19.png&#34; /&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=lp&gt;An encoder is supposed to choose the mask that best hides&#xA;any patterns in the data, to keep those patterns from being mistaken&#xA;for framing boxes.  In our encoder, however, we can choose&#xA;a mask before choosing the data.  This violates the spirit of the spec&#xA;but still produces legitimate codes.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;QR Data Encoding&lt;/h3&gt;&#xA;&#xA;&lt;p class=lp&gt;The second complication is that we want the QR code&#39;s message&#xA;to be intelligible.&#xA;We could draw arbitrary pictures using arbitrary 8-bit data, but when&#xA;scanned the codes would produce binary garbage.&#xA;We need to limit ourselves to data that produces sensible messages.&#xA;Luckily for us, QR codes allow messages to be written using a few&#xA;different alphabets.  One alphabet is 8-bit data, which would require binary&#xA;garbage to draw a picture.  Another is numeric data, in which every&#xA;run of 10 bits defines 3 decimal digits.  That limits our choice of &#xA;pixels slightly: we must not generate a 10-bit run with a value above 999.&#xA;That&#39;s not complete flexibility, but it&#39;s close: 9.96 bits of freedom out of 10.&#xA;If, after encoding an image, we find that we&#39;ve generated an invalid number,&#xA;we pick one of the 5 most significant bits at random—all of them must be 1s&#xA;to make an invalid number—hard wire that bit to zero, and start over.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Having only decimal messages would still not be very interesting:&#xA;the message would be a very large number.&#xA;Luckily for us (again), QR codes allow a single message to be&#xA;composed from pieces using different encodings.  The codes I have&#xA;generated consist of an 8-bit-encoded URL ending in a #&#xA;followed by a numeric-encoded number that draws the actual picture:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;http://swtch.com/pjw/#123456789...&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;The leading URL is the first data encoded; it takes up the right&#xA;side of the QR code.  The error correction bits take up the left side.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;When the phone scans the QR code, it sees a URL; loading it in a &#xA;browser visits the base page and then looks for an internal anchor on&#xA;the page with the given number.  The browser won&#39;t find such an anchor,&#xA;but it also won&#39;t complain.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;The techniques so far let us draw codes like this one:&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&lt;img src=&#34;qart5.png&#34; /&gt;&#xA;&lt;img src=&#34;qart6.png&#34; /&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=lp&gt;The second copy darkens the pixels that we have no&#xA;control over: the error correction bits on the left and the URL prefix on the right.&#xA;I appreciate the cyborg effect of Peter melting into the binary noise,&#xA;but it would be nice to widen our canvas.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Gauss-Jordan Elimination&lt;/h3&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;The third complication, then, is that we want to draw using&#xA;more than just the slice of data pixels in the middle of the image.&#xA;Luckily, we can.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;I mentioned above that Reed-Solomon&#xA;messages can be XOR&#39;ed:&#xA;if we have two different Reed-Solomon encoded blocks&#xA;b&lt;sub&gt;1&lt;/sub&gt; and b&lt;sub&gt;2&lt;/sub&gt; corresponding to messages m&lt;sub&gt;1&lt;/sub&gt; and m&lt;sub&gt;2&lt;/sub&gt;, &#xA;b&lt;sub&gt;1&lt;/sub&gt; ⊕ b&lt;sub&gt;2&lt;/sub&gt; is also a Reed-Solomon encoded block; it corresponds&#xA;to the message m&lt;sub&gt;1&lt;/sub&gt; ⊕ m&lt;sub&gt;2&lt;/sub&gt;.&#xA;(In the notation of the &lt;a href=&#34;/field&#34;&gt;previous post&lt;/a&gt;, this happens because&#xA;Reed-Solomon blocks correspond 1:1 with multiples of g(x).&#xA;Since b&lt;sub&gt;1&lt;/sub&gt; and b&lt;sub&gt;2&lt;/sub&gt; are multiples of g(x), their sum is&#xA;a multiple of g(x) too.)&#xA;This property means that we can build up a valid Reed-Solomon block&#xA;from other Reed-Solomon blocks.&#xA;In particular, we can construct the sequence of blocks&#xA;b&lt;sub&gt;0&lt;/sub&gt;, b&lt;sub&gt;1&lt;/sub&gt;, b&lt;sub&gt;2&lt;/sub&gt;, ..., where b&lt;sub&gt;i&lt;/sub&gt; is the block whose data bits are&#xA;all zeros except for bit i and whose error correction bits&#xA;are then set to correspond to a valid Reed-Solomon block.&#xA;That set is a &lt;a href=&#34;http://en.wikipedia.org/wiki/Basis_(linear_algebra)&#34;&gt;basis&lt;/a&gt; for the entire vector space of valid Reed-Solomon blocks.&#xA;Here is the basis matrix for the space of blocks with 2 data bytes and 2 checksum bytes:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&lt;table class=&#39;matrix&#39; cellspacing=0 cellpadding=0 border=0&gt;&#xA;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td&gt;&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;1&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;1&lt;td&gt;1&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td&gt;1&lt;td&gt;&lt;td&gt;1&lt;td&gt;1&lt;td&gt;1&lt;td&gt;&lt;td&gt;1&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;1&lt;td&gt;1&lt;td&gt;&lt;td&gt;1&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td&gt;1&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;1&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;1&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;1&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;1&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;1&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;1&lt;td&gt;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;1&lt;td&gt;1&lt;td&gt;&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;1&lt;td&gt;1&lt;td&gt;&lt;td&gt;1&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;1&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;1&lt;td&gt;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;/table&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;The missing entries are zeros.  The gray columns highlight the&#xA;pixels we have complete control over: there is only one row &#xA;with a 1 for each of those pixels.&#xA;Each time we want to change such a pixel,&#xA;we can XOR our current data with its row to change that pixel,&#xA;not change any of the other controlled pixels, and&#xA;keep the error correction bits up to date.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;So what, you say.  We&#39;re still just twiddling data bits.&#xA;The canvas is the same.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;But wait, there&#39;s more!&#xA;The basis we had above lets us change individual&#xA;data pixels, but we can XOR rows together to create &#xA;other basis matrices that trade data bits for error correction bits.&#xA;No matter what, we&#39;re not going to increase&#xA;our flexibility—the number of pixels we have direct control over&#xA;cannot increase—but we can redistribute that flexibility throughout&#xA;the image, at the same time smearing the uncooperative noise&#xA;pixels evenly all over the canvas.&#xA;This is the same procedure as Gauss-Jordan elimination,&#xA;the way you turn a matrix into row-reduced echelon form.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;This matrix shows the result of trying to assert control&#xA;over alternating pixels (the gray columns):&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&lt;table class=&#39;matrix&#39; cellspacing=0 cellpadding=0 border=0&gt;&#xA;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;1&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;1&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;1&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;1&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;1&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td&gt;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;1&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;1&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td&gt;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;1&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;1&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;1&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;1&lt;td&gt;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;1&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;td class=&#39;gray&#39;&gt;&lt;td&gt;&lt;tr height=1 bgcolor=&#39;#bbbbbb&#39;&gt;&lt;td colspan=32&gt;&#xA;&lt;/table&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;The matrix illustrates an important point about this trick:&#xA;it&#39;s not completely general.&#xA;The data bits are linearly independent, but there are &#xA;dependencies between the error correction bits&#xA;that mean we often can&#39;t have every pixel we ask for.&#xA;In this example, the last four pixels we tried to get&#xA;were unavailable: our manipulations of the rows to&#xA;isolate the first four error correction bits zeroed out&#xA;the last four that we wanted.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;In practice, a good approach is to create&#xA;a list of all the pixels in the Reed-Solomon block sorted by&#xA;how useful it would be to be able to set that pixel.&#xA;(Pixels from high-contrast regions of the image are less&#xA;important than pixels from low-contrast regions.)&#xA;Then, we can consider each pixel in turn, and if the basis matrix &#xA;allows it, isolate that pixel.&#xA;If not, no big deal, we move on to the next pixel.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Applying this insight, we can build wider but noisier&#xA;pictures in our QR codes:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&lt;img src=&#34;qart7.png&#34;&gt;&#xA;&lt;img src=&#34;qart8.png&#34;&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;The pixels in Peter&#39;s forehead and on his right side have&#xA;been sacrificed for the ability to draw the full width of the picture.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;We can also choose the pixels we want to control at random,&#xA;to make Peter peek out from behind a binary fog:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&lt;img src=&#34;qart9.png&#34;&gt;&#xA;&lt;img src=&#34;qart10.png&#34;&gt;&#xA;&lt;img src=&#34;qart11.png&#34;&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;h3&gt;Rotations&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;&#xA;One final trick.  QR codes have no required orientation. &#xA;The URL base pixels&#xA;that we have no control over are on the right side in the&#xA;canonical orientation, but we can rotate the QR code to &#xA;move them to other edges.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&lt;img src=&#34;qart12.png&#34;&gt;&#xA;&lt;img src=&#34;qart13.png&#34;&gt;&#xA;&lt;br&gt;&#xA;&lt;img src=&#34;qart14.png&#34;&gt;&#xA;&lt;img src=&#34;qart15.png&#34;&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;h3&gt;Further Information&lt;/h3&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;All the source code for this post, including the web server, is at &#xA;&lt;a href=&#34;http://code.google.com/p/rsc/source/browse/qr&#34;&gt;code.google.com/p/rsc/source/browse/qr&lt;/a&gt;.&#xA;If you liked this, you might also like&#xA;&lt;a href=&#34;http://research.swtch.com/2010/03/zip-files-all-way-down.html&#34;&gt;Zip Files All The Way Down&lt;/a&gt;.&#xA;&#xA;&lt;h3&gt;Acknowledgements&lt;/h3&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;Alex Healy pointed out that valid Reed-Solomon encodings are closed under XOR,&#xA;which is the key to spreading the picture into the error correction pixels.&#xA;Peter Weinberger has been nothing but gracious about the overuse of his binary likeness.&#xA;Thanks to both.&#xA;&lt;/p&gt;&#xA;&#xA;&#xA;</content>
  </entry>
  <entry>
    <title>Minimal Boolean Formulas</title>
    <id>tag:research.swtch.com,2012:research.swtch.com/boolean</id>
    <link rel="alternate" href="http://research.swtch.com/boolean"></link>
    <published>2011-05-18T00:00:00-04:00</published>
    <updated>2011-05-18T00:00:00-04:00</updated>
    <summary type="text">Simplify equations with God</summary>
    <content type="html">&#xA;&lt;p&gt;&lt;style type=&#34;text/css&#34;&gt;&#xA;p { line-height: 150%; }&#xA;blockquote { text-align: left; }&#xA;pre.alg { font-family: sans-serif; font-size: 100%; margin-left: 60px; }&#xA;td, th { padding-left; 5px; padding-right: 5px; vertical-align: top; }&#xA;#times td { text-align: right; }&#xA;table { padding-top: 1em; padding-bottom: 1em; }&#xA;#find td { text-align: center; }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;&lt;a href=&#34;http://oeis.org/A056287&#34;&gt;28&lt;/a&gt;.  &#xA;That&#39;s the minimum number of AND or OR operators&#xA;you need in order to write any Boolean function of five variables.&#xA;&lt;a href=&#34;http://alexhealy.net/&#34;&gt;Alex Healy&lt;/a&gt; and I computed that in April 2010.  Until then,&#xA;I believe no one had ever known that little fact.&#xA;This post describes how we computed it&#xA;and how we almost got scooped by &lt;a href=&#34;http://research.swtch.com/2011/01/knuth-volume-4a.html&#34;&gt;Knuth&#39;s Volume 4A&lt;/a&gt;&#xA;which considers the problem for AND, OR, and XOR.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;A Naive Brute Force Approach&lt;/h3&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Any Boolean function of two variables&#xA;can be written with at most 3 AND or OR operators: the parity function&#xA;on two variables X XOR Y is (X AND Y&#39;) OR (X&#39; AND Y), where X&#39; denotes&#xA;&amp;ldquo;not X.&amp;rdquo;  We can shorten the notation by writing AND and OR&#xA;like multiplication and addition: X XOR Y = X*Y&#39; + X&#39;*Y.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;For three variables, parity is also a hardest function, requiring 9 operators:&#xA;X XOR Y XOR Z = (X*Z&#39;+X&#39;*Z+Y&#39;)*(X*Z+X&#39;*Z&#39;+Y).&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;For four variables, parity is still a hardest function, requiring 15 operators:&#xA;W XOR X XOR Y XOR Z = (X*Z&#39;+X&#39;*Z+W&#39;*Y+W*Y&#39;)*(X*Z+X&#39;*Z&#39;+W*Y+W&#39;*Y&#39;).&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;The sequence so far prompts a few questions.  Is parity always a hardest function?&#xA;Does the minimum number of operators alternate between 2&lt;sup&gt;n&lt;/sup&gt;&amp;#8722;1 and 2&lt;sup&gt;n&lt;/sup&gt;+1?&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;I computed these results in January 2001 after hearing&#xA;the problem from Neil Sloane, who suggested it as a variant&#xA;of a similar problem first studied by Claude Shannon.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;The program I wrote to compute a(4) computes the minimum number of&#xA;operators for every Boolean function of n variables&#xA;in order to find the largest minimum over all functions.&#xA;There are 2&lt;sup&gt;4&lt;/sup&gt; = 16 settings of four variables, and each function&#xA;can pick its own value for each setting, so there are 2&lt;sup&gt;16&lt;/sup&gt; different&#xA;functions.  To make matters worse, you build new functions&#xA;by taking pairs of old functions and joining them with AND or OR.&#xA;2&lt;sup&gt;16&lt;/sup&gt; different functions means 2&lt;sup&gt;16&lt;/sup&gt;&amp;#183;2&lt;sup&gt;16&lt;/sup&gt; = 2&lt;sup&gt;32&lt;/sup&gt; pairs of functions.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;The program I wrote was a mangling of the Floyd-Warshall&#xA;all-pairs shortest paths algorithm.  That algorithm is:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre class=&#34;indent alg&#34;&gt;&#xA;// Floyd-Warshall all pairs shortest path&#xA;func compute():&#xA;    for each node i&#xA;        for each node j&#xA;            dist[i][j] = direct distance, or &amp;#8734;&#xA;    &#xA;    for each node k&#xA;        for each node i&#xA;            for each node j&#xA;                d = dist[i][k] + dist[k][j]&#xA;                if d &amp;lt; dist[i][j]&#xA;                    dist[i][j] = d&#xA;    return&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;The algorithm begins with the distance table dist[i][j] set to&#xA;an actual distance if i is connected to j and infinity otherwise.&#xA;Then each round updates the table to account for paths&#xA;going through the node k: if it&#39;s shorter to go from i to k to j,&#xA;it saves that shorter distance in the table.  The nodes are &#xA;numbered from 0 to n, so the variables i, j, k are simply integers.&#xA;Because there are only n nodes, we know we&#39;ll be done after&#xA;the outer loop finishes.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;The program I wrote to find minimum Boolean formula sizes is&#xA;an adaptation, substituting formula sizes for distance.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre class=&#34;indent alg&#34;&gt;&#xA;// Algorithm 1&#xA;func compute()&#xA;    for each function f&#xA;        size[f] = &amp;#8734;&#xA;    &#xA;    for each single variable function f = v&#xA;        size[f] = 0&#xA;    &#xA;    loop&#xA;        changed = false&#xA;        for each function f&#xA;            for each function g&#xA;                d = size[f] + 1 + size[g]&#xA;                if d &amp;lt; size[f OR g]&#xA;                    size[f OR g] = d&#xA;                    changed = true&#xA;                if d &amp;lt; size[f AND g]&#xA;                    size[f AND g] = d&#xA;                    changed = true&#xA;        if not changed&#xA;            return&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;Algorithm 1 runs the same kind of iterative update loop as the Floyd-Warshall algorithm,&#xA;but it isn&#39;t as obvious when you can stop, because you don&#39;t&#xA;know the maximum formula size beforehand.&#xA;So it runs until a round doesn&#39;t find any new functions to make,&#xA;iterating until it finds a fixed point.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;The pseudocode above glosses over some details, such as&#xA;the fact that the per-function loops can iterate over a&#xA;queue of functions known to have finite size, so that each&#xA;loop omits the functions that aren&#39;t&#xA;yet known.  That&#39;s only a constant factor improvement,&#xA;but it&#39;s a useful one.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Another important detail missing above&#xA;is the representation of functions.  The most convenient&#xA;representation is a binary truth table.&#xA;For example,&#xA;if we are computing the complexity of two-variable functions,&#xA;there are four possible inputs, which we can number as follows.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&lt;table&gt;&#xA;&lt;tr&gt;&lt;th&gt;X &lt;th&gt;Y &lt;th&gt;Value&#xA;&lt;tr&gt;&lt;td&gt;false &lt;td&gt;false &lt;td&gt;00&lt;sub&gt;2&lt;/sub&gt; = 0&#xA;&lt;tr&gt;&lt;td&gt;false &lt;td&gt;true &lt;td&gt;01&lt;sub&gt;2&lt;/sub&gt; = 1&#xA;&lt;tr&gt;&lt;td&gt;true &lt;td&gt;false &lt;td&gt;10&lt;sub&gt;2&lt;/sub&gt; = 2&#xA;&lt;tr&gt;&lt;td&gt;true &lt;td&gt;true &lt;td&gt;11&lt;sub&gt;2&lt;/sub&gt; = 3&#xA;&lt;/table&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;The functions are then the 4-bit numbers giving the value of the&#xA;function for each input.  For example, function 13 = 1101&lt;sub&gt;2&lt;/sub&gt;&#xA;is true for all inputs except X=false Y=true.&#xA;Three-variable functions correspond to 3-bit inputs generating 8-bit truth tables,&#xA;and so on.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;This representation has two key advantages.  The first is that &#xA;the numbering is dense, so that you can implement a map keyed&#xA;by function using a simple array.  The second is that the operations&#xA;&amp;ldquo;f AND g&amp;rdquo; and &amp;ldquo;f OR g&amp;rdquo; can be implemented using&#xA;bitwise operators: the truth table for &amp;ldquo;f AND g&amp;rdquo; is the bitwise&#xA;AND of the truth tables for f and g.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;That program worked well enough in 2001 to compute the&#xA;minimum number of operators necessary to write any&#xA;1-, 2-, 3-, and 4-variable Boolean function.  Each round&#xA;takes asymptotically O(2&lt;sup&gt;2&lt;sup&gt;n&lt;/sup&gt;&lt;/sup&gt;&amp;#183;2&lt;sup&gt;2&lt;sup&gt;n&lt;/sup&gt;&lt;/sup&gt;) = O(2&lt;sup&gt;2&lt;sup&gt;n+1&lt;/sup&gt;&lt;/sup&gt;) time, and the number of&#xA;rounds needed is O(the final answer).  The answer for n=4&#xA;is 15, so the computation required on the order of&#xA;15&amp;#183;2&lt;sup&gt;2&lt;sup&gt;5&lt;/sup&gt;&lt;/sup&gt; = 15&amp;#183;2&lt;sup&gt;32&lt;/sup&gt; iterations of the innermost loop.&#xA;That was plausible on the computer I was using at&#xA;the time, but the answer for n=5, likely around 30,&#xA;would need 30&amp;#183;2&lt;sup&gt;64&lt;/sup&gt; iterations to compute, which&#xA;seemed well out of reach.&#xA;At the time, it seemed plausible that parity was always&#xA;a hardest function and that the minimum size would&#xA;continue to alternate between 2&lt;sup&gt;n&lt;/sup&gt;&amp;#8722;1 and 2&lt;sup&gt;n&lt;/sup&gt;+1.&#xA;It&#39;s a nice pattern.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Exploiting Symmetry&lt;/h3&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Five years later, though, Alex Healy and I got to talking about this sequence,&#xA;and Alex shot down both conjectures using results from the theory&#xA;of circuit complexity.  (Theorists!)  Neil Sloane added this note to&#xA;the &lt;a href=&#34;http://oeis.org/history?seq=A056287&#34;&gt;entry for the sequence&lt;/a&gt; in his Online Encyclopedia of Integer Sequences:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;tt&gt;&#xA;%E A056287 Russ Cox conjectures that X&lt;sub&gt;1&lt;/sub&gt; XOR ... XOR X&lt;sub&gt;n&lt;/sub&gt; is always a worst f and that a(5) = 33 and a(6) = 63. But (Jan 27 2006) Alex Healy points out that this conjecture is definitely false for large n. So what is a(5)?&#xA;&lt;/tt&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;Indeed.  What is a(5)?  No one knew, and it wasn&#39;t obvious how to find out.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;In January 2010, Alex and I started looking into ways to &#xA;speed up the computation for a(5).  30&amp;#183;2&lt;sup&gt;64&lt;/sup&gt; is too many&#xA;iterations but maybe we could find ways to cut that number.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;In general, if we can identify a class of functions f whose&#xA;members are guaranteed to have the same complexity,&#xA;then we can save just one representative of the class as&#xA;long as we recreate the entire class in the loop body.&#xA;What used to be:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre class=&#34;indent alg&#34;&gt;&#xA;for each function f&#xA;    for each function g&#xA;        visit f AND g&#xA;        visit f OR g&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;can be rewritten as&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre class=&#34;indent alg&#34;&gt;&#xA;for each canonical function f&#xA;    for each canonical function g&#xA;        for each ff equivalent to f&#xA;            for each gg equivalent to g&#xA;                visit ff AND gg&#xA;                visit ff OR gg&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;That doesn&#39;t look like an improvement: it&#39;s doing all&#xA;the same work.  But it can open the door to new optimizations&#xA;depending on the equivalences chosen.&#xA;For example, the functions &amp;ldquo;f&amp;rdquo; and &amp;ldquo;&amp;#172;f&amp;rdquo; are guaranteed&#xA;to have the same complexity, by &lt;a href=&#34;http://en.wikipedia.org/wiki/De_Morgan&#39;s_laws&#34;&gt;DeMorgan&#39;s laws&lt;/a&gt;.&#xA;If we keep just one of &#xA;those two on the lists that &amp;ldquo;for each function&amp;rdquo; iterates over,&#xA;we can unroll the inner two loops, producing:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre class=&#34;indent alg&#34;&gt;&#xA;for each canonical function f&#xA;    for each canonical function g&#xA;        visit f OR g&#xA;        visit f AND g&#xA;        visit &amp;#172;f OR g&#xA;        visit &amp;#172;f AND g&#xA;        visit f OR &amp;#172;g&#xA;        visit f AND &amp;#172;g&#xA;        visit &amp;#172;f OR &amp;#172;g&#xA;        visit &amp;#172;f AND &amp;#172;g&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;That&#39;s still not an improvement, but it&#39;s no worse.&#xA;Each of the two loops considers half as many functions&#xA;but the inner iteration is four times longer.&#xA;Now we can notice that half of tests aren&#39;t&#xA;worth doing: &amp;ldquo;f AND g&amp;rdquo; is the negation of&#xA;&amp;ldquo;&amp;#172;f OR &amp;#172;g,&amp;rdquo; and so on, so only half&#xA;of them are necessary.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Let&#39;s suppose that when choosing between &amp;ldquo;f&amp;rdquo; and &amp;ldquo;&amp;#172;f&amp;rdquo;&#xA;we keep the one that is false when presented with all true inputs.&#xA;(This has the nice property that &lt;code&gt;f ^ (int32(f) &amp;gt;&amp;gt; 31)&lt;/code&gt;&#xA;is the truth table for the canonical form of &lt;code&gt;f&lt;/code&gt;.)&#xA;Then we can tell which combinations above will produce&#xA;canonical functions when f and g are already canonical:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre class=&#34;indent alg&#34;&gt;&#xA;for each canonical function f&#xA;    for each canonical function g&#xA;        visit f OR g&#xA;        visit f AND g&#xA;        visit &amp;#172;f AND g&#xA;        visit f AND &amp;#172;g&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;That&#39;s a factor of two improvement over the original loop.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Another observation is that permuting&#xA;the inputs to a function doesn&#39;t change its complexity:&#xA;&amp;ldquo;f(V, W, X, Y, Z)&amp;rdquo; and &amp;ldquo;f(Z, Y, X, W, V)&amp;rdquo; will have the same&#xA;minimum size.  For complex functions, each of the &#xA;5! = 120 permutations will produce a different truth table.&#xA;A factor of 120 reduction in storage is good but again&#xA;we have the problem of expanding the class in the&#xA;iteration.  This time, there&#39;s a different trick for reducing&#xA;the work in the innermost iteration.&#xA;Since we only need to produce one member of&#xA;the equivalence class, it doesn&#39;t make sense to&#xA;permute the inputs to both f and g.  Instead,&#xA;permuting just the inputs to f while fixing g&#xA;is guaranteed to hit at least one member &#xA;of each class that permuting both f and g would.&#xA;So we gain the factor of 120 twice in the loops&#xA;and lose it once in the iteration, for a net savings&#xA;of 120.&#xA;(In some ways, this is the same trick we did with &amp;ldquo;f&amp;rdquo; vs &amp;ldquo;&amp;#172;f.&amp;rdquo;)&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;A final observation is that negating any of the inputs&#xA;to the function doesn&#39;t change its complexity,&#xA;because X and X&#39; have the same complexity.&#xA;The same argument we used for permutations applies&#xA;here, for another constant factor of 2&lt;sup&gt;5&lt;/sup&gt; = 32.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;The code stores a single function for each equivalence class&#xA;and then recomputes the equivalent functions for f, but not g.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre class=&#34;indent alg&#34;&gt;&#xA;for each canonical function f&#xA;    for each function ff equivalent to f&#xA;        for each canonical function g&#xA;            visit ff OR g&#xA;            visit ff AND g&#xA;            visit &amp;#172;ff AND g&#xA;            visit ff AND &amp;#172;g&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;In all, we just got a savings of 2&amp;#183;120&amp;#183;32 = 7680,&#xA;cutting the total number of iterations from 30&amp;#183;2&lt;sup&gt;64&lt;/sup&gt; = 5&amp;#215;10&lt;sup&gt;20&lt;/sup&gt;&#xA;to 7&amp;#215;10&lt;sup&gt;16&lt;/sup&gt;.  If you figure we can do around &#xA;10&lt;sup&gt;9&lt;/sup&gt; iterations per second, that&#39;s still 800 days of CPU time.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;The full algorithm at this point is:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre class=&#34;indent alg&#34;&gt;&#xA;// Algorithm 2&#xA;func compute():&#xA;    for each function f&#xA;        size[f] = &amp;#8734;&#xA;    &#xA;    for each single variable function f = v&#xA;        size[f] = 0&#xA;    &#xA;    loop&#xA;        changed = false&#xA;        for each canonical function f&#xA;            for each function ff equivalent to f&#xA;                for each canonical function g&#xA;                    d = size[ff] + 1 + size[g]&#xA;                    changed |= visit(d, ff OR g)&#xA;                    changed |= visit(d, ff AND g)&#xA;                    changed |= visit(d, ff AND &amp;#172;g)&#xA;                    changed |= visit(d, &amp;#172;ff AND g)&#xA;        if not changed&#xA;            return&#xA;&#xA;func visit(d, fg):&#xA;    if size[fg] != &amp;#8734;&#xA;        return false&#xA;    &#xA;    record fg as canonical&#xA;&#xA;    for each function ffgg equivalent to fg&#xA;        size[ffgg] = d&#xA;    return true&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;The helper function &amp;ldquo;visit&amp;rdquo; must set the size not only of its argument fg&#xA;but also all equivalent functions under permutation or inversion of the inputs,&#xA;so that future tests will see that they have been computed.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Methodical Exploration&lt;/h3&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;There&#39;s one final improvement we can make.&#xA;The approach of looping until things stop changing&#xA;considers each function pair multiple times&#xA;as their sizes go down.  Instead, we can consider functions&#xA;in order of complexity, so that the main loop&#xA;builds first all the functions of minimum complexity 1,&#xA;then all the functions of minimum complexity 2,&#xA;and so on.  If we do that, we&#39;ll consider each function pair at most once.&#xA;We can stop when all functions are accounted for.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Applying this idea to Algorithm 1 (before canonicalization) yields:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre class=&#34;indent alg&#34;&gt;&#xA;// Algorithm 3&#xA;func compute()&#xA;    for each function f&#xA;        size[f] = &amp;#8734;&#xA;    &#xA;    for each single variable function f = v&#xA;        size[f] = 0&#xA;    &#xA;    for k = 1 to &amp;#8734;&#xA;        for each function f&#xA;            for each function g of size k &amp;#8722; size(f) &amp;#8722; 1&#xA;                if size[f AND g] == &amp;#8734;&#xA;                    size[f AND g] = k&#xA;                    nsize++&#xA;                if size[f OR g] == &amp;#8734;&#xA;                    size[f OR g] = k&#xA;                    nsize++&#xA;        if nsize == 2&lt;sup&gt;2&lt;sup&gt;n&lt;/sup&gt;&lt;/sup&gt;&#xA;            return&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;Applying the idea to Algorithm 2 (after canonicalization) yields:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre class=&#34;indent alg&#34;&gt;&#xA;// Algorithm 4&#xA;func compute():&#xA;    for each function f&#xA;        size[f] = &amp;#8734;&#xA;    &#xA;    for each single variable function f = v&#xA;        size[f] = 0&#xA;    &#xA;    for k = 1 to &amp;#8734;&#xA;        for each canonical function f&#xA;            for each function ff equivalent to f&#xA;                for each canonical function g of size k &amp;#8722; size(f) &amp;#8722; 1&#xA;                    visit(k, ff OR g)&#xA;                    visit(k, ff AND g)&#xA;                    visit(k, ff AND &amp;#172;g)&#xA;                    visit(k, &amp;#172;ff AND g)&#xA;        if nvisited == 2&lt;sup&gt;2&lt;sup&gt;n&lt;/sup&gt;&lt;/sup&gt;&#xA;            return&#xA;&#xA;func visit(d, fg):&#xA;    if size[fg] != &amp;#8734;&#xA;        return&#xA;    &#xA;    record fg as canonical&#xA;&#xA;    for each function ffgg equivalent to fg&#xA;        if size[ffgg] != &amp;#8734;&#xA;            size[ffgg] = d&#xA;            nvisited += 2  // counts ffgg and &amp;#172;ffgg&#xA;    return&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;The original loop in Algorithms 1 and 2 considered each pair f, g in every&#xA;iteration of the loop after they were computed.&#xA;The new loop in Algorithms 3 and 4 considers each pair f, g only once,&#xA;when k = size(f) + size(g) + 1.  This removes the &#xA;leading factor of 30 (the number of times we&#xA;expected the first loop to run) from our estimation&#xA;of the run time.&#xA;Now the expected number of iterations is around&#xA;2&lt;sup&gt;64&lt;/sup&gt;/7680 = 2.4&amp;#215;10&lt;sup&gt;15&lt;/sup&gt;.  If we can do 10&lt;sup&gt;9&lt;/sup&gt; iterations&#xA;per second, that&#39;s only 28 days of CPU time,&#xA;which I can deliver if you can wait a month.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Our estimate does not include the fact that not all function pairs need&#xA;to be considered.  For example, if the maximum size is 30, then the&#xA;functions of size 14 need never be paired against the functions of size 16,&#xA;because any result would have size 14+1+16 = 31.&#xA;So even 2.4&amp;#215;10&lt;sup&gt;15&lt;/sup&gt; is an overestimate, but it&#39;s in the right ballpark.&#xA;(With hindsight I can report that only 1.7&amp;#215;10&lt;sup&gt;14&lt;/sup&gt; pairs need to be considered&#xA;but also that our estimate of 10&lt;sup&gt;9&lt;/sup&gt; iterations&#xA;per second was optimistic.  The actual calculation ran for 20 days,&#xA;an average of about 10&lt;sup&gt;8&lt;/sup&gt; iterations per second.)&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Endgame: Directed Search&lt;/h3&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;A month is still a long time to wait, and we can do better.&#xA;Near the end (after k is bigger than, say, 22), we are exploring&#xA;the fairly large space of function pairs in hopes of finding a&#xA;fairly small number of remaining functions.&#xA;At that point it makes sense to change from the&#xA;bottom-up &amp;ldquo;bang things together and see what we make&amp;rdquo;&#xA;to the top-down &amp;ldquo;try to make this one of these specific functions.&amp;rdquo;&#xA;That is, the core of the current search is:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre class=&#34;indent alg&#34;&gt;&#xA;for each canonical function f&#xA;    for each function ff equivalent to f&#xA;        for each canonical function g of size k &amp;#8722; size(f) &amp;#8722; 1&#xA;            visit(k, ff OR g)&#xA;            visit(k, ff AND g)&#xA;            visit(k, ff AND &amp;#172;g)&#xA;            visit(k, &amp;#172;ff AND g)&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;We can change it to:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre class=&#34;indent alg&#34;&gt;&#xA;for each missing function fg&#xA;    for each canonical function g&#xA;        for all possible f such that one of these holds&#xA;                * fg = f OR g&#xA;                * fg = f AND g&#xA;                * fg = &amp;#172;f AND g&#xA;                * fg = f AND &amp;#172;g&#xA;            if size[f] == k &amp;#8722; size(g) &amp;#8722; 1&#xA;                visit(k, fg)&#xA;                next fg&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;By the time we&#39;re at the end, exploring all the possible f to make&#xA;the missing functions&amp;#8212;a directed search&amp;#8212;is much less work than&#xA;the brute force of exploring all combinations.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;As an example, suppose we are looking for f such that fg = f OR g.&#xA;The equation is only possible to satisfy if fg OR g == fg.  &#xA;That is, if g has any extraneous 1 bits, no f will work, so we can move on.&#xA;Otherwise, the remaining condition is that&#xA;f AND &amp;#172;g == fg AND &amp;#172;g.  That is, for the bit positions where g is 0, f must match fg.&#xA;The other bits of f (the bits where g has 1s)&#xA;can take any value.&#xA;We can enumerate the possible f values by recursively trying all&#xA;possible values for the &amp;ldquo;don&#39;t care&amp;rdquo; bits.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre class=&#34;indent alg&#34;&gt;&#xA;func find(x, any, xsize):&#xA;    if size(x) == xsize&#xA;        return x&#xA;    while any != 0&#xA;        bit = any AND &amp;#8722;any  // rightmost 1 bit in any&#xA;        any = any AND &amp;#172;bit&#xA;        if f = find(x OR bit, any, xsize) succeeds&#xA;            return f&#xA;    return failure&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;It doesn&#39;t matter which 1 bit we choose for the recursion,&#xA;but finding the rightmost 1 bit is cheap: it is isolated by the&#xA;(admittedly surprising) expression &amp;ldquo;any AND &amp;#8722;any.&amp;rdquo;&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Given &lt;code&gt;find&lt;/code&gt;, the loop above can try these four cases:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&lt;table id=find&gt;&#xA;&lt;tr&gt;&lt;th&gt;Formula &lt;th&gt;Condition &lt;th&gt;Base x &lt;th&gt;&amp;ldquo;Any&amp;rdquo; bits&#xA;&lt;tr&gt;&lt;td&gt;fg = f OR g &lt;td&gt;fg OR g == fg &lt;td&gt;fg AND &amp;#172;g &lt;td&gt;g&#xA;&lt;tr&gt;&lt;td&gt;fg = f OR &amp;#172;g &lt;td&gt;fg OR &amp;#172;g == fg &lt;td&gt;fg AND g &lt;td&gt;&amp;#172;g&#xA;&lt;tr&gt;&lt;td&gt;&amp;#172;fg = f OR g &lt;td&gt;&amp;#172;fg OR g == fg &lt;td&gt;&amp;#172;fg AND &amp;#172;g &lt;td&gt;g&#xA;&lt;tr&gt;&lt;td&gt;&amp;#172;fg = f OR &amp;#172;g &lt;td&gt;&amp;#172;fg OR &amp;#172;g == &amp;#172;fg &lt;td&gt;&amp;#172;fg AND g &lt;td&gt;&amp;#172;g&#xA;&lt;/table&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;Rewriting the Boolean expressions to use only the four OR forms&#xA;means that we only need to write the &amp;ldquo;adding bits&amp;rdquo; version of find.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;The final algorithm is:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre class=&#34;indent alg&#34;&gt;&#xA;// Algorithm 5&#xA;func compute():&#xA;    for each function f&#xA;        size[f] = &amp;#8734;&#xA;    &#xA;    for each single variable function f = v&#xA;        size[f] = 0&#xA;    &#xA;    // Generate functions.&#xA;    for k = 1 to max_generate&#xA;        for each canonical function f&#xA;            for each function ff equivalent to f&#xA;                for each canonical function g of size k &amp;#8722; size(f) &amp;#8722; 1&#xA;                    visit(k, ff OR g)&#xA;                    visit(k, ff AND g)&#xA;                    visit(k, ff AND &amp;#172;g)&#xA;                    visit(k, &amp;#172;ff AND g)&#xA;&#xA;    // Search for functions.&#xA;    for k = max_generate+1 to &amp;#8734;&#xA;        for each missing function fg&#xA;            for each canonical function g&#xA;                fsize = k &amp;#8722; size(g) &amp;#8722; 1&#xA;                if fg OR g == fg&#xA;                    if f = find(fg AND &amp;#172;g, g, fsize) succeeds&#xA;                        visit(k, fg)&#xA;                        next fg&#xA;                if fg OR &amp;#172;g == fg&#xA;                    if f = find(fg AND g, &amp;#172;g, fsize) succeeds&#xA;                        visit(k, fg)&#xA;                        next fg&#xA;                if &amp;#172;fg OR g == &amp;#172;fg&#xA;                    if f = find(&amp;#172;fg AND &amp;#172;g, g, fsize) succeeds&#xA;                        visit(k, fg)&#xA;                        next fg&#xA;                if &amp;#172;fg OR &amp;#172;g == &amp;#172;fg&#xA;                    if f = find(&amp;#172;fg AND g, &amp;#172;g, fsize) succeeds&#xA;                        visit(k, fg)&#xA;                        next fg&#xA;        if nvisited == 2&lt;sup&gt;2&lt;sup&gt;n&lt;/sup&gt;&lt;/sup&gt;&#xA;            return&#xA;&#xA;func visit(d, fg):&#xA;    if size[fg] != &amp;#8734;&#xA;        return&#xA;    &#xA;    record fg as canonical&#xA;&#xA;    for each function ffgg equivalent to fg&#xA;        if size[ffgg] != &amp;#8734;&#xA;            size[ffgg] = d&#xA;            nvisited += 2  // counts ffgg and &amp;#172;ffgg&#xA;    return&#xA;&#xA;func find(x, any, xsize):&#xA;    if size(x) == xsize&#xA;        return x&#xA;    while any != 0&#xA;        bit = any AND &amp;#8722;any  // rightmost 1 bit in any&#xA;        any = any AND &amp;#172;bit&#xA;        if f = find(x OR bit, any, xsize) succeeds&#xA;            return f&#xA;    return failure&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;To get a sense of the speedup here, and to check my work,&#xA;I ran the program using both algorithms&#xA;on a 2.53 GHz Intel Core 2 Duo E7200.&#xA;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;center&gt;&#xA;&lt;table id=times&gt;&#xA;&lt;tr&gt;&lt;th&gt; &lt;th colspan=3&gt;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212; # of Functions &amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&lt;th colspan=2&gt;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212; Time &amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&#xA;&lt;tr&gt;&lt;th&gt;Size &lt;th&gt;Canonical &lt;th&gt;All &lt;th&gt;All, Cumulative &lt;th&gt;Generate &lt;th&gt;Search&#xA;&lt;tr&gt;&lt;td&gt;0 &lt;td&gt;1 &lt;td&gt;10 &lt;td&gt;10&#xA;&lt;tr&gt;&lt;td&gt;1 &lt;td&gt;2 &lt;td&gt;82 &lt;td&gt;92 &lt;td&gt;&amp;lt; 0.1 seconds &lt;td&gt;3.4 minutes&#xA;&lt;tr&gt;&lt;td&gt;2 &lt;td&gt;2 &lt;td&gt;640 &lt;td&gt;732 &lt;td&gt;&amp;lt; 0.1 seconds &lt;td&gt;7.2 minutes&#xA;&lt;tr&gt;&lt;td&gt;3 &lt;td&gt;7 &lt;td&gt;4420 &lt;td&gt;5152 &lt;td&gt;&amp;lt; 0.1 seconds &lt;td&gt;12.3 minutes&#xA;&lt;tr&gt;&lt;td&gt;4 &lt;td&gt;19 &lt;td&gt;25276 &lt;td&gt;29696 &lt;td&gt;&amp;lt; 0.1 seconds &lt;td&gt;30.1 minutes&#xA;&lt;tr&gt;&lt;td&gt;5 &lt;td&gt;44 &lt;td&gt;117440 &lt;td&gt;147136 &lt;td&gt;&amp;lt; 0.1 seconds &lt;td&gt;1.3 hours&#xA;&lt;tr&gt;&lt;td&gt;6 &lt;td&gt;142 &lt;td&gt;515040 &lt;td&gt;662176 &lt;td&gt;&amp;lt; 0.1 seconds &lt;td&gt;3.5 hours&#xA;&lt;tr&gt;&lt;td&gt;7 &lt;td&gt;436 &lt;td&gt;1999608 &lt;td&gt;2661784 &lt;td&gt;0.2 seconds &lt;td&gt;11.6 hours&#xA;&lt;tr&gt;&lt;td&gt;8 &lt;td&gt;1209 &lt;td&gt;6598400 &lt;td&gt;9260184 &lt;td&gt;0.6 seconds &lt;td&gt;1.7 days&#xA;&lt;tr&gt;&lt;td&gt;9 &lt;td&gt;3307 &lt;td&gt;19577332 &lt;td&gt;28837516 &lt;td&gt;1.7 seconds &lt;td&gt;4.9 days&#xA;&lt;tr&gt;&lt;td&gt;10 &lt;td&gt;7741 &lt;td&gt;50822560 &lt;td&gt;79660076 &lt;td&gt;4.6 seconds &lt;td&gt;[ 10 days ? ]&#xA;&lt;tr&gt;&lt;td&gt;11 &lt;td&gt;17257 &lt;td&gt;114619264 &lt;td&gt;194279340 &lt;td&gt;10.8 seconds &lt;td&gt;[ 20 days ? ]&#xA;&lt;tr&gt;&lt;td&gt;12 &lt;td&gt;31851 &lt;td&gt;221301008 &lt;td&gt;415580348 &lt;td&gt;21.7 seconds &lt;td&gt;[ 50 days ? ]&#xA;&lt;tr&gt;&lt;td&gt;13 &lt;td&gt;53901 &lt;td&gt;374704776 &lt;td&gt;790285124 &lt;td&gt;38.5 seconds &lt;td&gt;[ 80 days ? ]&#xA;&lt;tr&gt;&lt;td&gt;14 &lt;td&gt;75248 &lt;td&gt;533594528 &lt;td&gt;1323879652 &lt;td&gt;58.7 seconds &lt;td&gt;[ 100 days ? ]&#xA;&lt;tr&gt;&lt;td&gt;15 &lt;td&gt;94572 &lt;td&gt;667653642 &lt;td&gt;1991533294 &lt;td&gt;1.5 minutes &lt;td&gt;[ 120 days ? ]&#xA;&lt;tr&gt;&lt;td&gt;16 &lt;td&gt;98237 &lt;td&gt;697228760 &lt;td&gt;2688762054 &lt;td&gt;2.1 minutes &lt;td&gt;[ 120 days ? ]&#xA;&lt;tr&gt;&lt;td&gt;17 &lt;td&gt;89342 &lt;td&gt;628589440 &lt;td&gt;3317351494 &lt;td&gt;4.1 minutes &lt;td&gt;[ 90 days ? ]&#xA;&lt;tr&gt;&lt;td&gt;18 &lt;td&gt;66951 &lt;td&gt;468552896 &lt;td&gt;3785904390 &lt;td&gt;9.1 minutes &lt;td&gt;[ 50 days ? ]&#xA;&lt;tr&gt;&lt;td&gt;19 &lt;td&gt;41664 &lt;td&gt;287647616 &lt;td&gt;4073552006 &lt;td&gt;23.4 minutes &lt;td&gt;[ 30 days ? ]&#xA;&lt;tr&gt;&lt;td&gt;20 &lt;td&gt;21481 &lt;td&gt;144079832 &lt;td&gt;4217631838 &lt;td&gt;57.0 minutes &lt;td&gt;[ 10 days ? ]&#xA;&lt;tr&gt;&lt;td&gt;21 &lt;td&gt;8680 &lt;td&gt;55538224 &lt;td&gt;4273170062 &lt;td&gt;2.4 hours &lt;td&gt;2.5 days&#xA;&lt;tr&gt;&lt;td&gt;22 &lt;td&gt;2730 &lt;td&gt;16099568 &lt;td&gt;4289269630 &lt;td&gt;5.2 hours &lt;td&gt;11.7 hours&#xA;&lt;tr&gt;&lt;td&gt;23 &lt;td&gt;937 &lt;td&gt;4428800 &lt;td&gt;4293698430 &lt;td&gt;11.2 hours &lt;td&gt;2.2 hours&#xA;&lt;tr&gt;&lt;td&gt;24 &lt;td&gt;228 &lt;td&gt;959328 &lt;td&gt;4294657758 &lt;td&gt;22.0 hours &lt;td&gt;33.2 minutes&#xA;&lt;tr&gt;&lt;td&gt;25 &lt;td&gt;103 &lt;td&gt;283200 &lt;td&gt;4294940958 &lt;td&gt;1.7 days &lt;td&gt;4.0 minutes&#xA;&lt;tr&gt;&lt;td&gt;26 &lt;td&gt;21 &lt;td&gt;22224 &lt;td&gt;4294963182 &lt;td&gt;2.9 days &lt;td&gt;42 seconds&#xA;&lt;tr&gt;&lt;td&gt;27 &lt;td&gt;10 &lt;td&gt;3602 &lt;td&gt;4294966784 &lt;td&gt;4.7 days &lt;td&gt;2.4 seconds&#xA;&lt;tr&gt;&lt;td&gt;28 &lt;td&gt;3 &lt;td&gt;512 &lt;td&gt;4294967296 &lt;td&gt;[ 7 days ? ] &lt;td&gt;0.1 seconds&#xA;&lt;/table&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;The bracketed times are estimates based on the work involved: I did not&#xA;wait that long for the intermediate search steps.&#xA;The search algorithm is quite a bit worse than generate until there are&#xA;very few functions left to find.&#xA;However, it comes in handy just when it is most useful: when the&#xA;generate algorithm has slowed to a crawl.&#xA;If we run generate through formulas of size 22 and then switch&#xA;to search for 23 onward, we can run the whole computation in&#xA;just over half a day of CPU time.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;The computation of a(5) identified the sizes of all 616,126&#xA;canonical Boolean functions of 5 inputs.&#xA;In contrast, there are &lt;a href=&#34;http://oeis.org/A000370&#34;&gt;just over 200 trillion canonical Boolean functions of 6 inputs&lt;/a&gt;.&#xA;Determining a(6) is unlikely to happen by brute force computation, no matter what clever tricks we use.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Adding XOR&lt;/h3&gt;&#xA;&#xA;&lt;p class=pp&gt;We&#39;ve assumed the use of just AND and OR as our&#xA;basis for the Boolean formulas.  If we also allow XOR, functions&#xA;can be written using many fewer operators.&#xA;In particular, a hardest function for the 1-, 2-, 3-, and 4-input&#xA;cases&amp;#8212;parity&amp;#8212;is now trivial.&#xA;Knuth examines the complexity of 5-input Boolean functions&#xA;using AND, OR, and XOR in detail in &lt;a href=&#34;http://www-cs-faculty.stanford.edu/~uno/taocp.html&#34;&gt;The Art of Computer Programming, Volume 4A&lt;/a&gt;.&#xA;Section 7.1.2&#39;s Algorithm L is the same as our Algorithm 3 above,&#xA;given for computing 4-input functions.&#xA;Knuth mentions that to adapt it for 5-input functions one must&#xA;treat only canonical functions and gives results for 5-input functions&#xA;with XOR allowed.&#xA;So another way to check our work is to add XOR to our Algorithm 4&#xA;and check that our results match Knuth&#39;s.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Because the minimum formula sizes are smaller (at most 12), the&#xA;computation of sizes with XOR is much faster than before:&#xA;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;center&gt;&#xA;&lt;table&gt;&#xA;&lt;tr&gt;&lt;th&gt; &lt;th&gt;&lt;th colspan=5&gt;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212; # of Functions &amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&lt;th&gt;&#xA;&lt;tr&gt;&lt;th&gt;Size &lt;th width=10&gt;&lt;th&gt;Canonical &lt;th width=10&gt;&lt;th&gt;All &lt;th width=10&gt;&lt;th&gt;All, Cumulative &lt;th width=10&gt;&lt;th&gt;Time&#xA;&lt;tr&gt;&lt;td align=right&gt;0 &lt;td&gt;&lt;td align=right&gt;1 &lt;td&gt;&lt;td align=right&gt;10 &lt;td&gt;&lt;td align=right&gt;10 &lt;td&gt;&lt;td&gt;&#xA;&lt;tr&gt;&lt;td align=right&gt;1 &lt;td&gt;&lt;td align=right&gt;3 &lt;td&gt;&lt;td align=right&gt;102 &lt;td&gt;&lt;td align=right&gt;112 &lt;td&gt;&lt;td align=right&gt;&amp;lt; 0.1 seconds&#xA;&lt;tr&gt;&lt;td align=right&gt;2 &lt;td&gt;&lt;td align=right&gt;5 &lt;td&gt;&lt;td align=right&gt;1140 &lt;td&gt;&lt;td align=right&gt;1252 &lt;td&gt;&lt;td align=right&gt;&amp;lt; 0.1 seconds&#xA;&lt;tr&gt;&lt;td align=right&gt;3 &lt;td&gt;&lt;td align=right&gt;20 &lt;td&gt;&lt;td align=right&gt;11570 &lt;td&gt;&lt;td align=right&gt;12822 &lt;td&gt;&lt;td align=right&gt;&amp;lt; 0.1 seconds&#xA;&lt;tr&gt;&lt;td align=right&gt;4 &lt;td&gt;&lt;td align=right&gt;93 &lt;td&gt;&lt;td align=right&gt;109826 &lt;td&gt;&lt;td align=right&gt;122648 &lt;td&gt;&lt;td align=right&gt;&amp;lt; 0.1 seconds&#xA;&lt;tr&gt;&lt;td align=right&gt;5 &lt;td&gt;&lt;td align=right&gt;366 &lt;td&gt;&lt;td align=right&gt;936440 &lt;td&gt;&lt;td align=right&gt;1059088 &lt;td&gt;&lt;td align=right&gt;0.1 seconds&#xA;&lt;tr&gt;&lt;td align=right&gt;6 &lt;td&gt;&lt;td align=right&gt;1730 &lt;td&gt;&lt;td align=right&gt;7236880 &lt;td&gt;&lt;td align=right&gt;8295968 &lt;td&gt;&lt;td align=right&gt;0.7 seconds&#xA;&lt;tr&gt;&lt;td align=right&gt;7 &lt;td&gt;&lt;td align=right&gt;8782 &lt;td&gt;&lt;td align=right&gt;47739088 &lt;td&gt;&lt;td align=right&gt;56035056 &lt;td&gt;&lt;td align=right&gt;4.5 seconds&#xA;&lt;tr&gt;&lt;td align=right&gt;8 &lt;td&gt;&lt;td align=right&gt;40297 &lt;td&gt;&lt;td align=right&gt;250674320 &lt;td&gt;&lt;td align=right&gt;306709376 &lt;td&gt;&lt;td align=right&gt;24.0 seconds&#xA;&lt;tr&gt;&lt;td align=right&gt;9 &lt;td&gt;&lt;td align=right&gt;141422 &lt;td&gt;&lt;td align=right&gt;955812256 &lt;td&gt;&lt;td align=right&gt;1262521632 &lt;td&gt;&lt;td align=right&gt;95.5 seconds&#xA;&lt;tr&gt;&lt;td align=right&gt;10 &lt;td&gt;&lt;td align=right&gt;273277 &lt;td&gt;&lt;td align=right&gt;1945383936 &lt;td&gt;&lt;td align=right&gt;3207905568 &lt;td&gt;&lt;td align=right&gt;200.7 seconds&#xA;&lt;tr&gt;&lt;td align=right&gt;11 &lt;td&gt;&lt;td align=right&gt;145707 &lt;td&gt;&lt;td align=right&gt;1055912608 &lt;td&gt;&lt;td align=right&gt;4263818176 &lt;td&gt;&lt;td align=right&gt;121.2 seconds&#xA;&lt;tr&gt;&lt;td align=right&gt;12 &lt;td&gt;&lt;td align=right&gt;4423 &lt;td&gt;&lt;td align=right&gt;31149120 &lt;td&gt;&lt;td align=right&gt;4294967296 &lt;td&gt;&lt;td align=right&gt;65.0 seconds&#xA;&lt;/table&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Knuth does not discuss anything like Algorithm 5,&#xA;because the search for specific functions does not apply to&#xA;the AND, OR, and XOR basis.  XOR is a non-monotone&#xA;function (it can both turn bits on and turn bits off), so&#xA;there is no test like our &amp;ldquo;&lt;code&gt;if fg OR g == fg&lt;/code&gt;&amp;rdquo;&#xA;and no small set of &amp;ldquo;don&#39;t care&amp;rdquo; bits to trim the search for f.&#xA;The search for an appropriate f in the XOR case would have&#xA;to try all f of the right size, which is exactly what Algorithm 4 already does.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Volume 4A also considers the problem of building minimal circuits,&#xA;which are like formulas but can use common subexpressions additional times for free,&#xA;and the problem of building the shallowest possible circuits.&#xA;See Section 7.1.2 for all the details.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Code and Web Site&lt;/h3&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;The web site &lt;a href=&#34;http://boolean-oracle.swtch.com&#34;&gt;boolean-oracle.swtch.com&lt;/a&gt;&#xA;lets you type in a Boolean expression and gives back the minimal formula for it.&#xA;It uses tables generated while running Algorithm 5; those tables and the&#xA;programs described in this post are also &lt;a href=&#34;http://boolean-oracle.swtch.com/about&#34;&gt;available on the site&lt;/a&gt;.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Postscript: Generating All Permutations and Inversions&lt;/h3&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;The algorithms given above depend crucially on the step&#xA;&amp;ldquo;&lt;code&gt;for each function ff equivalent to f&lt;/code&gt;,&amp;rdquo;&#xA;which generates all the ff obtained by permuting or inverting inputs to f,&#xA;but I did not explain how to do that.&#xA;We already saw that we can manipulate the binary truth table representation&#xA;directly to turn &lt;code&gt;f&lt;/code&gt; into &lt;code&gt;&amp;#172;f&lt;/code&gt; and to compute&#xA;combinations of functions.&#xA;We can also manipulate the binary representation directly to&#xA;invert a specific input or swap a pair of adjacent inputs.&#xA;Using those operations we can cycle through all the equivalent functions.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;To invert a specific input,&#xA;let&#39;s consider the structure of the truth table.&#xA;The index of a bit in the truth table encodes the inputs for that entry.&#xA;For example, the low bit of the index gives the value of the first input.&#xA;So the even-numbered bits&amp;#8212;at indices 0, 2, 4, 6, ...&amp;#8212;correspond to&#xA;the first input being false, while the odd-numbered bits&amp;#8212;at indices 1, 3, 5, 7, ...&amp;#8212;correspond&#xA;to the first input being true.&#xA;Changing just that bit in the index corresponds to changing the&#xA;single variable, so indices 0, 1 differ only in the value of the first input,&#xA;as do 2, 3, and 4, 5, and 6, 7, and so on.&#xA;Given the truth table for f(V, W, X, Y, Z) we can compute&#xA;the truth table for f(&amp;#172;V, W, X, Y, Z) by swapping adjacent bit pairs&#xA;in the original truth table.&#xA;Even better, we can do all the swaps in parallel using a bitwise&#xA;operation.&#xA;To invert a different input, we swap larger runs of bits.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&lt;table&gt;&#xA;&lt;tr&gt;&lt;th&gt;Function &lt;th width=10&gt; &lt;th&gt;Truth Table (&lt;span style=&#34;font-weight: normal;&#34;&gt;&lt;code&gt;f&lt;/code&gt; = f(V, W, X, Y, Z)&lt;/span&gt;)&#xA;&lt;tr&gt;&lt;td&gt;f(&amp;#172;V, W, X, Y, Z) &lt;td&gt;&lt;td&gt;&lt;code&gt;(f&amp;amp;0x55555555)&amp;lt;&amp;lt;&amp;nbsp;1 | (f&amp;gt;&amp;gt;&amp;nbsp;1)&amp;amp;0x55555555&lt;/code&gt;&#xA;&lt;tr&gt;&lt;td&gt;f(V, &amp;#172;W, X, Y, Z) &lt;td&gt;&lt;td&gt;&lt;code&gt;(f&amp;amp;0x33333333)&amp;lt;&amp;lt;&amp;nbsp;2 | (f&amp;gt;&amp;gt;&amp;nbsp;2)&amp;amp;0x33333333&lt;/code&gt;&#xA;&lt;tr&gt;&lt;td&gt;f(V, W, &amp;#172;X, Y, Z) &lt;td&gt;&lt;td&gt;&lt;code&gt;(f&amp;amp;0x0f0f0f0f)&amp;lt;&amp;lt;&amp;nbsp;4 | (f&amp;gt;&amp;gt;&amp;nbsp;4)&amp;amp;0x0f0f0f0f&lt;/code&gt;&#xA;&lt;tr&gt;&lt;td&gt;f(V, W, X, &amp;#172;Y, Z) &lt;td&gt;&lt;td&gt;&lt;code&gt;(f&amp;amp;0x00ff00ff)&amp;lt;&amp;lt;&amp;nbsp;8 | (f&amp;gt;&amp;gt;&amp;nbsp;8)&amp;amp;0x00ff00ff&lt;/code&gt;&#xA;&lt;tr&gt;&lt;td&gt;f(V, W, X, Y, &amp;#172;Z) &lt;td&gt;&lt;td&gt;&lt;code&gt;(f&amp;amp;0x0000ffff)&amp;lt;&amp;lt;16 | (f&amp;gt;&amp;gt;16)&amp;amp;0x0000ffff&lt;/code&gt;&#xA;&lt;/table&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;Being able to invert a specific input lets us consider all possible&#xA;inversions by building them up one at a time.&#xA;The &lt;a href=&#34;http://oeis.org/A003188&#34;&gt;Gray code&lt;/a&gt; lets us&#xA;enumerate all possible 5-bit input codes while changing only 1 bit at&#xA;a time as we move from one input to the next:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;0, 1, 3, 2, 6, 7, 5, 4, &lt;br&gt;&#xA;12, 13, 15, 14, 10, 11, 9, 8, &lt;br&gt;&#xA;24, 25, 27, 26, 30, 31, 29, 28, &lt;br&gt;&#xA;20, 21, 23, 22, 18, 19, 17, 16&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;This minimizes&#xA;the number of inversions we need: to consider all 32 cases, we only&#xA;need 31 inversion operations.&#xA;In contrast, visiting the 5-bit input codes in the usual binary order 0, 1, 2, 3, 4, ...&#xA;would often need to change multiple bits, like when changing from 3 to 4.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;To swap a pair of adjacent inputs, we can again take advantage of the truth table.&#xA;For a pair of inputs, there are four cases: 00, 01, 10, and 11.  We can leave the&#xA;00 and 11 cases alone, because they are invariant under swapping,&#xA;and concentrate on swapping the 01 and 10 bits.&#xA;The first two inputs change most often in the truth table: each run of 4 bits&#xA;corresponds to those four cases.&#xA;In each run, we want to leave the first and fourth alone and swap the second and third.&#xA;For later inputs, the four cases consist of sections of bits instead of single bits.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&lt;table&gt;&#xA;&lt;tr&gt;&lt;th&gt;Function &lt;th width=10&gt; &lt;th&gt;Truth Table (&lt;span style=&#34;font-weight: normal;&#34;&gt;&lt;code&gt;f&lt;/code&gt; = f(V, W, X, Y, Z)&lt;/span&gt;)&#xA;&lt;tr&gt;&lt;td&gt;f(&lt;b&gt;W, V&lt;/b&gt;, X, Y, Z) &lt;td&gt;&lt;td&gt;&lt;code&gt;f&amp;amp;0x99999999 | (f&amp;amp;0x22222222)&amp;lt;&amp;lt;1 | (f&amp;gt;&amp;gt;1)&amp;amp;0x22222222&lt;/code&gt;&#xA;&lt;tr&gt;&lt;td&gt;f(V, &lt;b&gt;X, W&lt;/b&gt;, Y, Z) &lt;td&gt;&lt;td&gt;&lt;code&gt;f&amp;amp;0xc3c3c3c3 | (f&amp;amp;0x0c0c0c0c)&amp;lt;&amp;lt;1 | (f&amp;gt;&amp;gt;1)&amp;amp;0x0c0c0c0c&lt;/code&gt;&#xA;&lt;tr&gt;&lt;td&gt;f(V, W, &lt;b&gt;Y, X&lt;/b&gt;, Z) &lt;td&gt;&lt;td&gt;&lt;code&gt;f&amp;amp;0xf00ff00f | (f&amp;amp;0x00f000f0)&amp;lt;&amp;lt;1 | (f&amp;gt;&amp;gt;1)&amp;amp;0x00f000f0&lt;/code&gt;&#xA;&lt;tr&gt;&lt;td&gt;f(V, W, X, &lt;b&gt;Z, Y&lt;/b&gt;) &lt;td&gt;&lt;td&gt;&lt;code&gt;f&amp;amp;0xff0000ff | (f&amp;amp;0x0000ff00)&amp;lt;&amp;lt;8 | (f&amp;gt;&amp;gt;8)&amp;amp;0x0000ff00&lt;/code&gt;&#xA;&lt;/table&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;Being able to swap a pair of adjacent inputs lets us consider all&#xA;possible permutations by building them up one at a time.&#xA;Again it is convenient to have a way to visit all permutations by&#xA;applying only one swap at a time.&#xA;Here Volume 4A comes to the rescue.&#xA;Section 7.2.1.2 is titled &amp;ldquo;Generating All Permutations,&amp;rdquo; and Knuth delivers&#xA;many algorithms to do just that.&#xA;The most convenient for our purposes is Algorithm P, which&#xA;generates a sequence that considers all permutations exactly once&#xA;with only a single swap of adjacent inputs between steps.&#xA;Knuth calls it Algorithm P because it corresponds to the&#xA;&amp;ldquo;Plain changes&amp;rdquo; algorithm used by &lt;a href=&#34;http://en.wikipedia.org/wiki/Change_ringing&#34;&gt;bell ringers in 17th century England&lt;/a&gt;&#xA;to ring a set of bells in all possible permutations.&#xA;The algorithm is described in a manuscript written around 1653!&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;We can examine all possible permutations and inversions by&#xA;nesting a loop over all permutations inside a loop over all inversions,&#xA;and in fact that&#39;s what my program does.&#xA;Knuth does one better, though: his Exercise 7.2.1.2-20&#xA;suggests that it is possible to build up all the possibilities&#xA;using only adjacent swaps and inversion of the first input.&#xA;Negating arbitrary inputs is not hard, though, and still does&#xA;minimal work, so the code sticks with Gray codes and Plain changes.&#xA;&lt;/p&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;</content>
  </entry>
  <entry>
    <title>Zip Files All The Way Down</title>
    <id>tag:research.swtch.com,2012:research.swtch.com/zip</id>
    <link rel="alternate" href="http://research.swtch.com/zip"></link>
    <published>2010-03-18T00:00:00-04:00</published>
    <updated>2010-03-18T00:00:00-04:00</updated>
    <summary type="text">Did you think it was turtles?</summary>
    <content type="html">&#xA;&lt;p&gt;&lt;p class=lp&gt;&#xA;Stephen Hawking begins &lt;i&gt;&lt;a href=&#34;http://www.amazon.com/-/dp/0553380168&#34;&gt;A Brief History of Time&lt;/a&gt;&lt;/i&gt; with this story:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p class=pp&gt;&#xA;A well-known scientist (some say it was Bertrand Russell) once gave a public lecture on astronomy. He described how the earth orbits around the sun and how the sun, in turn, orbits around the center of a vast collection of stars called our galaxy. At the end of the lecture, a little old lady at the back of the room got up and said: &amp;ldquo;What you have told us is rubbish. The world is really a flat plate supported on the back of a giant tortoise.&amp;rdquo; The scientist gave a superior smile before replying, &amp;ldquo;What is the tortoise standing on?&amp;rdquo;  &amp;ldquo;You&#39;re very clever, young man, very clever,&amp;rdquo; said the old lady. &amp;ldquo;But it&#39;s turtles all the way down!&amp;rdquo;&#xA;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;Scientists today are pretty sure that the universe is not actually turtles all the way down,&#xA;but we can create that kind of situation in other contexts.&#xA;For example, here we have &lt;a href=&#34;http://www.youtube.com/watch?v=Y-gqMTt3IUg&#34;&gt;video monitors all the way down&lt;/a&gt;&#xA;and &lt;a href=&#34;http://www.amazon.com/gp/customer-media/product-gallery/0387900926/ref=cm_ciu_pdp_images_all&#34;&gt;set theory books all the way down&lt;/a&gt;,&#xA;and &lt;a href=&#34;http://blog.makezine.com/archive/2009/01/thousands_of_shopping_carts_stake_o.html&#34;&gt;shopping carts all the way down&lt;/a&gt;.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;And here&#39;s a computer storage equivalent: &#xA;look inside &lt;a href=&#34;http://swtch.com/r.zip&#34;&gt;&lt;code&gt;r.zip&lt;/code&gt;&lt;/a&gt;.&#xA;It&#39;s zip files all the way down:&#xA;each one contains another zip file under the name &lt;code&gt;r/r.zip&lt;/code&gt;.&#xA;(For the die-hard Unix fans, &lt;a href=&#34;http://swtch.com/r.tar.gz&#34;&gt;&lt;code&gt;r.tar.gz&lt;/code&gt;&lt;/a&gt; is&#xA;gzipped tar files all the way down.)&#xA;Like the line of shopping carts, it never ends,&#xA;because it loops back onto itself: the zip file contains itself!&#xA;And it&#39;s probably less work to put together a self-reproducing zip file&#xA;than to put together all those shopping carts,&#xA;at least if you&#39;re the kind of person who would read this blog.&#xA;This post explains how.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Before we get to self-reproducing zip files, though,&#xA;we need to take a brief detour into self-reproducing programs.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Self-reproducing programs&lt;/h3&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;The idea of self-reproducing programs dates back to the 1960s.&#xA;My favorite statement of the problem is the one Ken Thompson gave in his 1983 Turing Award address:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p class=pp&gt;&#xA;In college, before video games, we would amuse ourselves by posing programming exercises. One of the favorites was to write the shortest self-reproducing program. Since this is an exercise divorced from reality, the usual vehicle was FORTRAN. Actually, FORTRAN was the language of choice for the same reason that three-legged races are popular.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;More precisely stated, the problem is to write a source program that, when compiled and executed, will produce as output an exact copy of its source. If you have never done this, I urge you to try it on your own. The discovery of how to do it is a revelation that far surpasses any benefit obtained by being told how to do it. The part about &amp;ldquo;shortest&amp;rdquo; was just an incentive to demonstrate skill and determine a winner.&#xA;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;&lt;b&gt;Spoiler alert!&lt;/b&gt;&#xA;I agree: if you have never done this, I urge you to try it on your own.&#xA;The internet makes it so easy to look things up that it&#39;s refreshing&#xA;to discover something yourself once in a while.&#xA;Go ahead and spend a few days figuring out.  This blog will still be here&#xA;when you get back.&#xA;(If you don&#39;t mind the spoilers, the entire &lt;a href=&#34;http://cm.bell-labs.com/who/ken/trust.html&#34;&gt;Turing award address&lt;/a&gt; is worth reading.)&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&lt;br&gt;&lt;br&gt;&#xA;&lt;i&gt;(Spoiler blocker.)&lt;/i&gt;&#xA;&lt;br&gt;&#xA;&lt;a href=&#34;http://www.robertwechsler.com/projects.html&#34;&gt;&lt;img src=&#34;/applied_geometry.jpg&#34;&gt;&lt;/a&gt;&#xA;&lt;br&gt;&#xA;&lt;i&gt;&lt;a href=&#34;http://www.robertwechsler.com/projects.html&#34;&gt;http://www.robertwechsler.com/projects.html&lt;/a&gt;&lt;/i&gt;&#xA;&lt;br&gt;&lt;br&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Let&#39;s try to write a Python program that prints itself.&#xA;It will probably be a &lt;code&gt;print&lt;/code&gt; statement, so here&#39;s a first attempt,&#xA;run at the interpreter prompt:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre class=indent&gt;&#xA;&amp;gt;&amp;gt;&amp;gt; print &#39;&lt;span style=&#34;color: #005500&#34;&gt;hello&lt;/span&gt;&#39;&#xA;hello&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;That didn&#39;t quite work.  But now we know what the program is, so let&#39;s print it:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre class=indent&gt;&#xA;&amp;gt;&amp;gt;&amp;gt; print &#34;&lt;span style=&#34;color: #005500&#34;&gt;print &#39;hello&#39;&lt;/span&gt;&#34;&#xA;print &#39;hello&#39;&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;That didn&#39;t quite work either.  The problem is that when you execute&#xA;a simple print statement, it only prints part of itself: the argument to the print.&#xA;We need a way to print the rest of the program too.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;The trick is to use recursion: you write a string that is the whole program,&#xA;but with itself missing, and then you plug it into itself before passing it to print.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre class=indent&gt;&#xA;&amp;gt;&amp;gt;&amp;gt; s = &#39;&lt;span style=&#34;color: #005500&#34;&gt;print %s&lt;/span&gt;&#39;; print s % repr(s)&#xA;print &#39;print %s&#39;&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;Not quite, but closer: the problem is that the string &lt;code&gt;s&lt;/code&gt; isn&#39;t actually&#xA;the program.  But now we know the general form of the program:&#xA;&lt;code&gt;s = &#39;&lt;span style=&#34;color: #005500&#34;&gt;%s&lt;/span&gt;&#39;; print s % repr(s)&lt;/code&gt;.&#xA;That&#39;s the string to use.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre class=indent&gt;&#xA;&amp;gt;&amp;gt;&amp;gt; s = &#39;&lt;span style=&#34;color: #005500&#34;&gt;s = %s; print s %% repr(s)&lt;/span&gt;&#39;; print s % repr(s)&#xA;s = &#39;s = %s; print s %% repr(s)&#39;; print s % repr(s)&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;Recursion for the win.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;This form of self-reproducing program is often called a &lt;a href=&#34;http://en.wikipedia.org/wiki/Quine_(computing)&#34;&gt;quine&lt;/a&gt;, &#xA;in honor of the philosopher and logician W. V. O. Quine,&#xA;who discovered the paradoxical sentence:&#xA;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&amp;ldquo;Yields falsehood when preceded by its quotation&amp;rdquo;&lt;br&gt;yields falsehood when preceded by its quotation.&#xA;&lt;/blockquote&gt;&#xA;&lt;p class=lp&gt;&#xA;The simplest English form of a self-reproducing quine is a command like:&#xA;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;Print this, followed by its quotation:&lt;br&gt;&amp;ldquo;Print this, followed by its quotation:&amp;rdquo;&#xA;&lt;/blockquote&gt;&#xA;&lt;p class=lp&gt;&#xA;There&#39;s nothing particularly special about Python that makes quining possible.&#xA;The most elegant quine I know is a Scheme program that is a direct, if somewhat inscrutable, translation of that&#xA;sentiment:&#xA;&lt;/p&gt;&#xA;&lt;pre class=indent&gt;&#xA;((lambda (x) `&lt;span style=&#34;color: #005500&#34;&gt;(&lt;/span&gt;,x &lt;span style=&#34;color: #005500&#34;&gt;&#39;&lt;/span&gt;,x&lt;span style=&#34;color: #005500&#34;&gt;)&lt;/span&gt;)&#xA;&#39;&lt;span style=&#34;color: #005500&#34;&gt;(lambda (x) `(,x &#39;,x))&lt;/span&gt;)&#xA;&lt;/pre&gt;&#xA;&lt;p class=lp&gt;&#xA;I think the Go version is a clearer translation, at least as far as the quoting is concerned:&#xA;&lt;/p&gt;&#xA;&lt;pre class=indent&gt;&#xA;/* Go quine */&#xA;package main&#xA;import &#34;&lt;span style=&#34;color: #005500&#34;&gt;fmt&lt;/span&gt;&#34;&#xA;func main() {&#xA; fmt.Printf(&#34;&lt;span style=&#34;color: #005500&#34;&gt;%s%c%s%c\n&lt;/span&gt;&#34;, q, 0x60, q, 0x60)&#xA;}&#xA;var q = `&lt;span style=&#34;color: #005500&#34;&gt;/* Go quine */&#xA;package main&#xA;import &#34;fmt&#34;&#xA;func main() {&#xA; fmt.Printf(&#34;%s%c%s%c\n&#34;, q, 0x60, q, 0x60)&#xA;}&#xA;var q = &lt;/span&gt;`&#xA;&lt;/pre&gt;&#xA;&lt;p class=lp&gt;(I&#39;ve colored the data literals green throughout to make it clear what is program and what is data.)&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;The Go program has the interesting property that, ignoring the pesky newline&#xA;at the end, the entire program is the same thing twice (&lt;code&gt;/* Go quine */ ... q = `&lt;/code&gt;).&#xA;That got me thinking: maybe it&#39;s possible to write a self-reproducing program&#xA;using only a repetition operator.&#xA;And you know what programming language has essentially only a repetition operator?&#xA;The language used to encode Lempel-Ziv compressed files&#xA;like the ones used by &lt;code&gt;gzip&lt;/code&gt; and &lt;code&gt;zip&lt;/code&gt;.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Self-reproducing Lempel-Ziv programs&lt;/h3&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Lempel-Ziv compressed data is a stream of instructions with two basic&#xA;opcodes: &lt;code&gt;literal(&lt;/code&gt;&lt;i&gt;n&lt;/i&gt;&lt;code&gt;)&lt;/code&gt; followed by &#xA;&lt;i&gt;n&lt;/i&gt; bytes of data means write those &lt;i&gt;n&lt;/i&gt; bytes into the&#xA;decompressed output,&#xA;and &lt;code&gt;repeat(&lt;/code&gt;&lt;i&gt;d&lt;/i&gt;&lt;code&gt;,&lt;/code&gt; &lt;i&gt;n&lt;/i&gt;&lt;code&gt;)&lt;/code&gt;&#xA;means look backward &lt;i&gt;d&lt;/i&gt; bytes from the current location&#xA;in the decompressed output and copy the &lt;i&gt;n&lt;/i&gt; bytes you find there&#xA;into the output stream.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;The programming exercise, then, is this: write a Lempel-Ziv program&#xA;using just those two opcodes that prints itself when run.&#xA;In other words, write a compressed data stream that decompresses to itself.&#xA;Feel free to assume any reasonable encoding for the &lt;code&gt;literal&lt;/code&gt;&#xA;and &lt;code&gt;repeat&lt;/code&gt; opcodes.&#xA;For the grand prize, find a program that decompresses to &#xA;itself surrounded by an arbitrary prefix and suffix,&#xA;so that the sequence could be embedded in an actual &lt;code&gt;gzip&lt;/code&gt;&#xA;or &lt;code&gt;zip&lt;/code&gt; file, which has a fixed-format header and trailer.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;&lt;b&gt;Spoiler alert!&lt;/b&gt;&#xA;I urge you to try this on your own before continuing to read.&#xA;It&#39;s a great way to spend a lazy afternoon, and you have&#xA;one critical advantage that I didn&#39;t: you know there is a solution.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&lt;br&gt;&lt;br&gt;&#xA;&lt;i&gt;(Spoiler blocker.)&lt;/i&gt;&#xA;&lt;br&gt;&#xA;&lt;a href=&#34;&#34;&gt;&lt;img src=&#34;/the_best_circular_bike(sbcc_sbma_students_roof).jpg&#34;&gt;&lt;/a&gt;&#xA;&lt;br&gt;&#xA;&lt;i&gt;&lt;a href=&#34;http://www.robertwechsler.com/thebest.html&#34;&gt;http://www.robertwechsler.com/thebest.html&lt;/a&gt;&lt;/i&gt;&#xA;&lt;br&gt;&lt;br&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=lp&gt;By the way, here&#39;s &lt;a href=&#34;http://swtch.com/r.gz&#34;&gt;&lt;code&gt;r.gz&lt;/code&gt;&lt;/a&gt;, gzip files all the way down.&#xA;&#xA;&lt;pre class=indent&gt;&#xA;$ gunzip &amp;lt; r.gz &amp;gt; r&#xA;$ cmp r r.gz&#xA;$&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;The nice thing about &lt;code&gt;r.gz&lt;/code&gt; is that even broken web browsers&#xA;that ordinarily decompress downloaded gzip data before storing it to disk&#xA;will handle this file correctly!&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Enough stalling to hide the spoilers.&#xA;Let&#39;s use this shorthand to describe Lempel-Ziv instructions:&#xA;&lt;code&gt;L&lt;/code&gt;&lt;i&gt;n&lt;/i&gt; and &lt;code&gt;R&lt;/code&gt;&lt;i&gt;n&lt;/i&gt; are&#xA;shorthand for &lt;code&gt;literal(&lt;/code&gt;&lt;i&gt;n&lt;/i&gt;&lt;code&gt;)&lt;/code&gt; and&#xA;&lt;code&gt;repeat(&lt;/code&gt;&lt;i&gt;n&lt;/i&gt;&lt;code&gt;,&lt;/code&gt; &lt;i&gt;n&lt;/i&gt;&lt;code&gt;)&lt;/code&gt;,&#xA;and the program assumes that each code is one byte.&#xA;&lt;code&gt;L0&lt;/code&gt; is therefore the Lempel-Ziv no-op;&#xA;&lt;code&gt;L5&lt;/code&gt; &lt;code&gt;hello&lt;/code&gt; prints &lt;code&gt;hello&lt;/code&gt;;&#xA;and so does &lt;code&gt;L3&lt;/code&gt; &lt;code&gt;hel&lt;/code&gt; &lt;code&gt;R1&lt;/code&gt; &lt;code&gt;L1&lt;/code&gt; &lt;code&gt;o&lt;/code&gt;.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Here&#39;s a Lempel-Ziv program that prints itself.&#xA;(Each line is one instruction.)&#xA;&lt;/p&gt;&#xA;&#xA;&lt;br&gt;&#xA;&lt;center&gt;&#xA;&lt;table border=0&gt;&#xA;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th width=30&gt;&lt;/th&gt;&lt;th&gt;Code&lt;/th&gt;&lt;th width=30&gt;&lt;/th&gt;&lt;th&gt;Output&lt;/th&gt;&lt;/tr&gt;&#xA;&lt;tr&gt;&lt;td align=right&gt;&lt;i&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;no-op&lt;/span&gt;&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;L0&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&#xA;&lt;tr&gt;&lt;td align=right&gt;&lt;i&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;no-op&lt;/span&gt;&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;L0&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&#xA;&lt;tr&gt;&lt;td align=right&gt;&lt;i&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;no-op&lt;/span&gt;&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;L0&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&#xA;&lt;tr&gt;&lt;td align=right&gt;&lt;i&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;print 4 bytes&lt;/span&gt;&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;L4 &lt;span style=&#34;color: #005500&#34;&gt;L0 L0 L0 L4&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;L0 L0 L0 L4&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&#xA;&lt;tr&gt;&lt;td align=right&gt;&lt;i&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;repeat last 4 printed bytes&lt;/span&gt;&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;R4&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;L0 L0 L0 L4&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&#xA;&lt;tr&gt;&lt;td align=right&gt;&lt;i&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;print 4 bytes&lt;/span&gt;&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;L4 &lt;span style=&#34;color: #005500&#34;&gt;R4 L4 R4 L4&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;R4 L4 R4 L4&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&#xA;&lt;tr&gt;&lt;td align=right&gt;&lt;i&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;repeat last 4 printed bytes&lt;/span&gt;&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;R4&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;R4 L4 R4 L4&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&#xA;&lt;tr&gt;&lt;td align=right&gt;&lt;i&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;print 4 bytes&lt;/span&gt;&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;L4 &lt;span style=&#34;color: #005500&#34;&gt;L0 L0 L0 L0&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;L0 L0 L0 L0&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&#xA;&lt;/table&gt;&#xA;&lt;/center&gt;&#xA;&lt;br&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;(The two columns Code and Output contain the same byte sequence.)&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;The interesting core of this program is the 6-byte sequence&#xA;&lt;code&gt;L4 R4 L4 R4 L4 R4&lt;/code&gt;, which prints the 8-byte sequence &lt;code&gt;R4 L4 R4 L4 R4 L4 R4 L4&lt;/code&gt;.&#xA;That is, it prints itself with an extra byte before and after.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;When we were trying to write the self-reproducing Python program,&#xA;the basic problem was that the print statement was always longer&#xA;than what it printed.  We solved that problem with recursion,&#xA;computing the string to print by plugging it into itself.&#xA;Here we took a different approach.&#xA;The Lempel-Ziv program is&#xA;particularly repetitive, so that a repeated substring ends up&#xA;containing the entire fragment.  The recursion is in the&#xA;representation of the program rather than its execution.&#xA;Either way, that fragment is the crucial point.&#xA;Before the final &lt;code&gt;R4&lt;/code&gt;, the output lags behind the input.&#xA;Once it executes, the output is one code ahead.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;The &lt;code&gt;L0&lt;/code&gt; no-ops are plugged into &#xA;a more general variant of the program, which can reproduce itself&#xA;with the addition of an arbitrary three-byte prefix and suffix:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;br&gt;&#xA;&lt;center&gt;&#xA;&lt;table border=0&gt;&#xA;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th width=30&gt;&lt;/th&gt;&lt;th&gt;Code&lt;/th&gt;&lt;th width=30&gt;&lt;/th&gt;&lt;th&gt;Output&lt;/th&gt;&lt;/tr&gt;&#xA;&lt;tr&gt;&lt;td align=right&gt;&lt;i&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;print 4 bytes&lt;/span&gt;&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;L4 &lt;span style=&#34;color: #005500&#34;&gt;&lt;i&gt;aa bb cc&lt;/i&gt; L4&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&lt;i&gt;aa bb cc&lt;/i&gt; L4&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&#xA;&lt;tr&gt;&lt;td align=right&gt;&lt;i&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;repeat last 4 printed bytes&lt;/span&gt;&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;R4&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&lt;i&gt;aa bb cc&lt;/i&gt; L4&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&#xA;&lt;tr&gt;&lt;td align=right&gt;&lt;i&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;print 4 bytes&lt;/span&gt;&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;L4 &lt;span style=&#34;color: #005500&#34;&gt;R4 L4 R4 L4&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;R4 L4 R4 L4&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&#xA;&lt;tr&gt;&lt;td align=right&gt;&lt;i&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;repeat last 4 printed bytes&lt;/span&gt;&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;R4&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;R4 L4 R4 L4&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&#xA;&lt;tr&gt;&lt;td align=right&gt;&lt;i&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;print 4 bytes&lt;/span&gt;&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;L4 &lt;span style=&#34;color: #005500&#34;&gt;R4 &lt;i&gt;xx yy zz&lt;/i&gt;&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;R4 &lt;i&gt;xx yy zz&lt;/i&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&#xA;&lt;tr&gt;&lt;td align=right&gt;&lt;i&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;repeat last 4 printed bytes&lt;/span&gt;&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;R4&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;R4 &lt;i&gt;xx yy zz&lt;/i&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&#xA;&lt;/table&gt;&#xA;&lt;/center&gt;&#xA;&lt;br&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;(The byte sequence in the Output column is &lt;code&gt;&lt;i&gt;aa bb cc&lt;/i&gt;&lt;/code&gt;, then&#xA;the byte sequence from the Code column, then &lt;code&gt;&lt;i&gt;xx yy zz&lt;/i&gt;&lt;/code&gt;.)&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;It took me the better part of a quiet Sunday to get this far,&#xA;but by the time I got here I knew the game was over&#xA;and that I&#39;d won.&#xA;From all that experimenting, I knew it was easy to create&#xA;a program fragment that printed itself minus a few instructions&#xA;or even one that printed an arbitrary prefix &#xA;and then itself, minus a few instructions.&#xA;The extra &lt;code&gt;aa bb cc&lt;/code&gt; in the output&#xA;provides a place to attach such a program fragment.&#xA;Similarly, it&#39;s easy to create a fragment to attach&#xA;to the &lt;code&gt;xx yy zz&lt;/code&gt; that prints itself,&#xA;minus the first three instructions, plus an arbitrary suffix.&#xA;We can use that generality to attach an appropriate &#xA;header and trailer.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Here is the final program, which prints itself surrounded by an&#xA;arbitrary prefix and suffix.&#xA;&lt;code&gt;[P]&lt;/code&gt; denotes the &lt;i&gt;p&lt;/i&gt;-byte compressed form of the prefix &lt;code&gt;P&lt;/code&gt;;&#xA;similarly, &lt;code&gt;[S]&lt;/code&gt; denotes the &lt;i&gt;s&lt;/i&gt;-byte compressed form of the suffix &lt;code&gt;S&lt;/code&gt;.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;br&gt;&#xA;&lt;center&gt;&#xA;&lt;table border=0&gt;&#xA;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th width=30&gt;&lt;/th&gt;&lt;th&gt;Code&lt;/th&gt;&lt;th width=30&gt;&lt;/th&gt;&lt;th&gt;Output&lt;/th&gt;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA; &lt;td align=right&gt;&lt;i&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;print prefix&lt;/span&gt;&lt;/i&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;[P]&lt;/code&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;P&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA; &lt;td align=right&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;&lt;i&gt;print &lt;/i&gt;p&lt;i&gt;+1 bytes&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;L&lt;/code&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;&lt;i&gt;p&lt;/i&gt;+1&lt;/span&gt;&lt;code&gt; &lt;span style=&#34;color: #005500&#34;&gt;[P] L&lt;/span&gt;&lt;/code&gt;&lt;span style=&#34;color: #005500&#34;&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;&lt;i&gt;p&lt;/i&gt;+1&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;/code&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;[P] L&lt;/code&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;&lt;i&gt;p&lt;/i&gt;+1&lt;/span&gt;&lt;code&gt;&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA; &lt;td align=right&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;&lt;i&gt;repeat last &lt;/i&gt;p&lt;i&gt;+1 printed bytes&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;R&lt;/code&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;&lt;i&gt;p&lt;/i&gt;+1&lt;/span&gt;&lt;code&gt;&lt;/code&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;[P] L&lt;/code&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;&lt;i&gt;p&lt;/i&gt;+1&lt;/span&gt;&lt;code&gt;&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA; &lt;td align=right&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;&lt;i&gt;print 1 byte&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;L1 &lt;span style=&#34;color: #005500&#34;&gt;R&lt;/span&gt;&lt;/code&gt;&lt;span style=&#34;color: #005500&#34;&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;&lt;i&gt;p&lt;/i&gt;+1&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;/code&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;R&lt;/code&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;&lt;i&gt;p&lt;/i&gt;+1&lt;/span&gt;&lt;code&gt;&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA; &lt;td align=right&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;&lt;i&gt;print 1 byte&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;L1 &lt;span style=&#34;color: #005500&#34;&gt;L1&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;L1&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA; &lt;td align=right&gt;&lt;i&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;print 4 bytes&lt;/span&gt;&lt;/i&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;L4 &lt;span style=&#34;color: #005500&#34;&gt;R&lt;/span&gt;&lt;/code&gt;&lt;span style=&#34;color: #005500&#34;&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;&lt;i&gt;p&lt;/i&gt;+1&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style=&#34;color: #005500&#34;&gt; L1 L1 L4&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;R&lt;/code&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;&lt;i&gt;p&lt;/i&gt;+1&lt;/span&gt;&lt;code&gt; L1 L1 L4&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA; &lt;td align=right&gt;&lt;i&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;repeat last 4 printed bytes&lt;/span&gt;&lt;/i&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;R4&lt;/code&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;R&lt;/code&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;&lt;i&gt;p&lt;/i&gt;+1&lt;/span&gt;&lt;code&gt; L1 L1 L4&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA; &lt;td align=right&gt;&lt;i&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;print 4 bytes&lt;/span&gt;&lt;/i&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;L4 &lt;span style=&#34;color: #005500&#34;&gt;R4 L4 R4 L4&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;R4 L4 R4 L4&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA; &lt;td align=right&gt;&lt;i&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;repeat last 4 printed bytes&lt;/span&gt;&lt;/i&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;R4&lt;/code&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;R4 L4 R4 L4&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA; &lt;td align=right&gt;&lt;i&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;print 4 bytes&lt;/span&gt;&lt;/i&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;L4 &lt;span style=&#34;color: #005500&#34;&gt;R4 L0 L0 L&lt;/span&gt;&lt;/code&gt;&lt;span style=&#34;color: #005500&#34;&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;&lt;i&gt;s&lt;/i&gt;+1&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style=&#34;color: #005500&#34;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;R4 L0 L0 L&lt;/code&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;&lt;i&gt;s&lt;/i&gt;+1&lt;/span&gt;&lt;code&gt;&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA; &lt;td align=right&gt;&lt;i&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;repeat last 4 printed bytes&lt;/span&gt;&lt;/i&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;R4&lt;/code&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;R4 L0 L0 L&lt;/code&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;&lt;i&gt;s&lt;/i&gt;+1&lt;/span&gt;&lt;code&gt;&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA; &lt;td align=right&gt;&lt;i&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;no-op&lt;/span&gt;&lt;/i&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;L0&lt;/code&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA; &lt;td align=right&gt;&lt;i&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;no-op&lt;/span&gt;&lt;/i&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;L0&lt;/code&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA; &lt;td align=right&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;&lt;i&gt;print &lt;/i&gt;s&lt;i&gt;+1 bytes&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;L&lt;/code&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;&lt;i&gt;s&lt;/i&gt;+1&lt;/span&gt;&lt;code&gt; &lt;span style=&#34;color: #005500&#34;&gt;R&lt;/span&gt;&lt;/code&gt;&lt;span style=&#34;color: #005500&#34;&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;&lt;i&gt;s&lt;/i&gt;+1&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style=&#34;color: #005500&#34;&gt; [S]&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;R&lt;/code&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;&lt;i&gt;s&lt;/i&gt;+1&lt;/span&gt;&lt;code&gt; [S]&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA; &lt;td align=right&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;&lt;i&gt;repeat last &lt;/i&gt;s&lt;i&gt;+1 bytes&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;R&lt;/code&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;&lt;i&gt;s&lt;/i&gt;+1&lt;/span&gt;&lt;code&gt;&lt;/code&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;R&lt;/code&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;&lt;i&gt;s&lt;/i&gt;+1&lt;/span&gt;&lt;code&gt; [S]&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA; &lt;td align=right&gt;&lt;i&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;print suffix&lt;/span&gt;&lt;/i&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;[S]&lt;/code&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;/td&gt;&#xA; &lt;td&gt;&lt;code&gt;S&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;/table&gt;&#xA;&lt;/center&gt;&#xA;&lt;br&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;(The byte sequence in the Output column is &lt;code&gt;&lt;i&gt;P&lt;/i&gt;&lt;/code&gt;, then&#xA;the byte sequence from the Code column, then &lt;code&gt;&lt;i&gt;S&lt;/i&gt;&lt;/code&gt;.)&#xA;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;h3&gt;Self-reproducing zip files&lt;/h3&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Now the rubber meets the road.&#xA;We&#39;ve solved the main theoretical obstacle to making a self-reproducing&#xA;zip file, but there are a couple practical obstacles&#xA;still in our way.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;The first obstacle is to translate our self-reproducing Lempel-Ziv program,&#xA;written in simplified opcodes, into the real opcode encoding.&#xA;&lt;a href=&#34;http://www.ietf.org/rfc/rfc1951.txt&#34;&gt;RFC 1951&lt;/a&gt; describes the DEFLATE format used in both gzip and zip: a sequence of blocks, each of which&#xA;is a sequence of opcodes encoded using Huffman codes.&#xA;Huffman codes assign different length bit strings&#xA;to different opcodes,&#xA;breaking our assumption above that opcodes have&#xA;fixed length.&#xA;But wait!&#xA;We can, with some care, find a set of fixed-size encodings&#xA;that says what we need to be able to express.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;In DEFLATE, there are literal blocks and opcode blocks.&#xA;The header at the beginning of a literal block is 5 bytes:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&lt;img src=&#34;/zip1.png&#34;&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;If the translation of our &lt;code&gt;L&lt;/code&gt; opcodes above&#xA;are 5 bytes each, the translation of the &lt;code&gt;R&lt;/code&gt; opcodes&#xA;must also be 5 bytes each, with all the byte counts&#xA;above scaled by a factor of 5.&#xA;(For example, &lt;code&gt;L4&lt;/code&gt; now has a 20-byte argument,&#xA;and &lt;code&gt;R4&lt;/code&gt; repeats the last 20 bytes of output.)&#xA;The opcode block&#xA;with a single &lt;code&gt;repeat(20,20)&lt;/code&gt; instruction falls well short of&#xA;5 bytes:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&lt;img src=&#34;/zip2.png&#34;&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&#xA;&lt;p class=lp&gt;Luckily, an opcode block containing two&#xA;&lt;code&gt;repeat(20,10)&lt;/code&gt; instructions has the same effect and is exactly 5 bytes:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&lt;img src=&#34;/zip3.png&#34;&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;Encoding the other sized repeats&#xA;(&lt;code&gt;R&lt;/code&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;&lt;i&gt;p&lt;/i&gt;+1&lt;/span&gt; and &#xA;&lt;code&gt;R&lt;/code&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;&lt;i&gt;s&lt;/i&gt;+1&lt;/span&gt;)&#xA;takes more effort&#xA;and some sleazy tricks, but it turns out that &#xA;we can design 5-byte codes that repeat any amount &#xA;from 9 to 64 bytes.&#xA;For example, here are the repeat blocks for 10 bytes and for 40 bytes:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&lt;img src=&#34;/zip4.png&#34;&gt;&#xA;&lt;br&gt;&#xA;&lt;img src=&#34;/zip5.png&#34;&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;The repeat block for 10 bytes is two bits too short,&#xA;but every repeat block is followed by a literal block,&#xA;which starts with three zero bits and then padding&#xA;to the next byte boundary.&#xA;If a repeat block ends two bits short of a byte&#xA;but is followed by a literal block, the literal block&#39;s&#xA;padding will insert the extra two bits.&#xA;Similarly, the repeat block for 40 bytes is five bits too long,&#xA;but they&#39;re all zero bits.&#xA;Starting a literal block five bits too late&#xA;steals the bits from the padding.&#xA;Both of these tricks only work because the last 7 bits of&#xA;any repeat block are zero and the bits in the first byte&#xA;of any literal block are also zero,&#xA;so the boundary isn&#39;t directly visible.&#xA;If the literal block started with a one bit,&#xA;this sleazy trick wouldn&#39;t work.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;The second obstacle is that zip archives (and gzip files)&#xA;record a CRC32 checksum of the uncompressed data.&#xA;Since the uncompressed data is the zip archive,&#xA;the data being checksummed includes the checksum itself.&#xA;So we need to find a value &lt;i&gt;x&lt;/i&gt; such that writing &lt;i&gt;x&lt;/i&gt; into&#xA;the checksum field causes the file to checksum to &lt;i&gt;x&lt;/i&gt;.&#xA;Recursion strikes back.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;The CRC32 checksum computation interprets the entire file as a big number and computes&#xA;the remainder when you divide that number by a specific constant&#xA;using a specific kind of division.&#xA;We could go through the effort of setting up the appropriate&#xA;equations and solving for &lt;i&gt;x&lt;/i&gt;.&#xA;But frankly, we&#39;ve already solved one nasty recursive puzzle&#xA;today, and &lt;a href=&#34;http://www.youtube.com/watch?v=TQBLTB5f3j0&#34;&gt;enough is enough&lt;/a&gt;.&#xA;There are only four billion possibilities for &lt;i&gt;x&lt;/i&gt;:&#xA;we can write a program to try each in turn, until it finds one that works.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;If you want to recreate these files yourself, there are a&#xA;few more minor obstacles, like making sure the tar file is a multiple&#xA;of 512 bytes and compressing the rather large zip trailer to&#xA;at most 59 bytes so that &lt;code&gt;R&lt;/code&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;&lt;i&gt;s&lt;/i&gt;+1&lt;/span&gt; is&#xA;at most &lt;code&gt;R&lt;/code&gt;&lt;span style=&#34;font-size: 0.8em;&#34;&gt;64&lt;/span&gt;.&#xA;But they&#39;re just a simple matter of programming.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;So there you have it:&#xA;&lt;code&gt;&lt;a href=&#34;http://swtch.com/r.gz&#34;&gt;r.gz&lt;/a&gt;&lt;/code&gt; (gzip files all the way down),&#xA;&lt;code&gt;&lt;a href=&#34;http://swtch.com/r.tar.gz&#34;&gt;r.tar.gz&lt;/a&gt;&lt;/code&gt; (gzipped tar files all the way down),&#xA;and&#xA;&lt;code&gt;&lt;a href=&#34;http://swtch.com/r.zip&#34;&gt;r.zip&lt;/a&gt;&lt;/code&gt; (zip files all the way down).&#xA;I regret that I have been unable to find any programs&#xA;that insist on decompressing these files recursively, ad infinitum.&#xA;It would have been fun to watch them squirm, but &#xA;it looks like much less sophisticated&#xA;&lt;a href=&#34;http://en.wikipedia.org/wiki/Zip_bomb&#34;&gt;zip bombs&lt;/a&gt; have spoiled the fun.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;If you&#39;re feeling particularly ambitious, here is&#xA;&lt;a href=&#34;http://swtch.com/rgzip.go&#34;&gt;rgzip.go&lt;/a&gt;,&#xA;the &lt;a href=&#34;http://golang.org/&#34;&gt;Go&lt;/a&gt; program that generated these files.&#xA;I wonder if you can create a zip file that contains a gzipped tar file&#xA;that contains the original zip file.&#xA;Ken Thompson suggested trying to make a zip file that&#xA;contains a slightly larger copy of itself, recursively,&#xA;so that as you dive down the chain of zip files&#xA;each one gets a little bigger.&#xA;(If you do manage either of these, please leave a comment.)&#xA;&lt;/p&gt;&#xA;&#xA;&lt;br&gt;&#xA;&lt;p class=lp&gt;&lt;font size=-1&gt;P.S.  I can&#39;t end the post without sharing my favorite self-reproducing program: the one-line shell script &lt;code&gt;#!/bin/cat&lt;/code&gt;&lt;/font&gt;.&#xA;&lt;/p&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;</content>
  </entry>
  <entry>
    <title>UTF-8: Bits, Bytes, and Benefits</title>
    <id>tag:research.swtch.com,2012:research.swtch.com/utf8</id>
    <link rel="alternate" href="http://research.swtch.com/utf8"></link>
    <published>2010-03-05T00:00:00-05:00</published>
    <updated>2010-03-05T00:00:00-05:00</updated>
    <summary type="text">The reasons to switch to UTF-8</summary>
    <content type="html">&#xA;&lt;p&gt;&lt;p class=pp&gt;&#xA;UTF-8 is a way to encode Unicode code points&amp;#8212;integer values from&#xA;0 through 10FFFF&amp;#8212;into a byte stream,&#xA;and it is far simpler than many people realize.&#xA;The easiest way to make it confusing or complicated&#xA;is to treat it as a black box, never looking inside.&#xA;So let&#39;s start by looking inside.  Here it is:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&lt;table cellspacing=5 cellpadding=0 border=0&gt;&#xA;&lt;tr height=10&gt;&lt;th colspan=4&gt;&lt;/th&gt;&lt;/tr&gt;&#xA;&lt;tr&gt;&lt;th align=center colspan=2&gt;Unicode code points&lt;/th&gt;&lt;th width=10&gt;&lt;th align=center&gt;UTF-8 encoding (binary)&lt;/th&gt;&lt;/tr&gt;&#xA;&lt;tr height=10&gt;&lt;td colspan=4&gt;&lt;/td&gt;&lt;/tr&gt;&#xA;&lt;tr&gt;&lt;td align=right&gt;00-7F&lt;/td&gt;&lt;td&gt;(7 bits)&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td align=right&gt;0&lt;i&gt;tuvwxyz&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;&#xA;&lt;tr&gt;&lt;td align=right&gt;0080-07FF&lt;/td&gt;&lt;td&gt;(11 bits)&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td align=right&gt;110&lt;i&gt;pqrst&lt;/i&gt;&amp;nbsp;10&lt;i&gt;uvwxyz&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;&#xA;&lt;tr&gt;&lt;td align=right&gt;0800-FFFF&lt;/td&gt;&lt;td&gt;(16 bits)&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td align=right&gt;1110&lt;i&gt;jklm&lt;/i&gt;&amp;nbsp;10&lt;i&gt;npqrst&lt;/i&gt;&amp;nbsp;10&lt;i&gt;uvwxyz&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;&#xA;&lt;tr&gt;&lt;td align=right valign=top&gt;010000-10FFFF&lt;/td&gt;&lt;td&gt;(21 bits)&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td align=right valign=top&gt;11110&lt;i&gt;efg&lt;/i&gt;&amp;nbsp;10&lt;i&gt;hijklm&lt;/i&gt; 10&lt;i&gt;npqrst&lt;/i&gt;&amp;nbsp;10&lt;i&gt;uvwxyz&lt;/i&gt;&lt;/td&gt;&#xA;&lt;tr height=10&gt;&lt;td colspan=4&gt;&lt;/td&gt;&lt;/tr&gt;&#xA;&lt;/table&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;The convenient properties of UTF-8 are all consequences of the choice of encoding.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;i&gt;All ASCII files are already UTF-8 files.&lt;/i&gt;&lt;br&gt;&#xA;The first 128 Unicode code points are the 7-bit ASCII character set,&#xA;and UTF-8 preserves their one-byte encoding.&#xA;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;i&gt;ASCII bytes always represent themselves in UTF-8 files.  They never appear as part of other UTF-8 sequences.&lt;/i&gt;&lt;br&gt;&#xA;All the non-ASCII UTF-8 sequences consist of bytes&#xA;with the high bit set, so if you see the byte 0x7A in a UTF-8 file,&#xA;you can be sure it represents the character &lt;code&gt;z&lt;/code&gt;.&#xA;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;i&gt;ASCII bytes are always represented as themselves in UTF-8 files.  They cannot be hidden inside multibyte UTF-8 sequences.&lt;/i&gt;&lt;br&gt;&#xA;The ASCII &lt;code&gt;z&lt;/code&gt; 01111010 cannot be encoded as a two-byte UTF-8 sequence&#xA;11000001 10111010&lt;/code&gt;.  Code points must be encoded using the shortest&#xA;possible sequence.&#xA;A corollary is that decoders must detect long-winded sequences as invalid.&#xA;In practice, it is useful for a decoder to use the Unicode replacement&#xA;character, code point FFFD, as the decoding of an invalid UTF-8 sequence&#xA;rather than stop processing the text.&#xA;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;i&gt;UTF-8 is self-synchronizing.&lt;/i&gt;&lt;br&gt;&#xA;Let&#39;s call a byte of the form 10&lt;i&gt;xxxxxx&lt;/i&gt;&#xA;a continuation byte.&#xA;Every UTF-8 sequence is a byte that is not a continuation byte&#xA;followed by zero or more continuation bytes.&#xA;If you start processing a UTF-8 file at an arbitrary point,&#xA;you might not be at the beginning of a UTF-8 encoding,&#xA;but you can easily find one: skip over&#xA;continuation bytes until you find a non-continuation byte.&#xA;(The same applies to scanning backward.)&#xA;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;i&gt;Substring search is just byte string search.&lt;/i&gt;&lt;br&gt;&#xA;Properties 2, 3, and 4 imply that given a string&#xA;of correctly encoded UTF-8, the only way those bytes&#xA;can appear in a larger UTF-8 text is when they represent the&#xA;same code points.  So you can use any 8-bit safe byte at a time &#xA;search function, like &lt;code&gt;strchr&lt;/code&gt; or &lt;code&gt;strstr&lt;/code&gt;, to run the search.&#xA;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;i&gt;Most programs that handle 8-bit files safely can handle UTF-8 safely.&lt;/i&gt;&lt;br&gt;&#xA;This also follows from Properties 2, 3, and 4.&#xA;I say &amp;ldquo;most&amp;rdquo; programs, because programs that&#xA;take apart a byte sequence expecting one character per byte&#xA;will not behave correctly, but very few programs do that.&#xA;It is far more common to split input at newline characters,&#xA;or split whitespace-separated fields, or do other similar parsing&#xA;around specific ASCII characters.&#xA;For example, Unix tools like cat, cmp, cp, diff, echo, head, tail, and tee&#xA;can process UTF-8 files as if they were plain ASCII files.&#xA;Most operating system kernels should also be able to handle&#xA;UTF-8 file names without any special arrangement, since the&#xA;only operations done on file names are comparisons&#xA;and splitting at &lt;code&gt;/&lt;/code&gt;.&#xA;In contrast, tools like grep, sed, and wc, which inspect arbitrary&#xA;individual characters, do need modification.&#xA;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;i&gt;UTF-8 sequences sort in code point order.&lt;/i&gt;&lt;br&gt;&#xA;You can verify this by inspecting the encodings in the table above.&#xA;This means that Unix tools like join, ls, and sort (without options) don&#39;t need to handle&#xA;UTF-8 specially.&#xA;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;i&gt;UTF-8 has no &amp;ldquo;byte order.&amp;rdquo;&lt;/i&gt;&lt;br&gt;&#xA;UTF-8 is a byte encoding.  It is not little endian or big endian.&#xA;Unicode defines a byte order mark (BOM) code point FFFE,&#xA;which are used to determine the byte order of a stream of&#xA;raw 16-bit values, like UCS-2 or UTF-16.&#xA;It has no place in a UTF-8 file.&#xA;Some programs like to write a UTF-8-encoded BOM&#xA;at the beginning of UTF-8 files, but this is unnecessary&#xA;(and annoying to programs that don&#39;t expect it).&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;UTF-8 does give up the ability to do random&#xA;access using code point indices.&#xA;Programs that need to jump to the &lt;i&gt;n&lt;/i&gt;th&#xA;Unicode code point in a file or on a line&amp;#8212;text editors are the canonical example&amp;#8212;will&#xA;typically convert incoming UTF-8 to an internal representation&#xA;like an array of code points and then convert back to UTF-8&#xA;for output,&#xA;but most programs are simpler when written to manipulate UTF-8 directly.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Programs that make UTF-8 more complicated than it needs to be&#xA;are typically trying to be too general,&#xA;not wanting to make assumptions that might not be true of&#xA;other encodings.&#xA;But there are good tools to convert other encodings to UTF-8,&#xA;and it is slowly becoming the standard encoding:&#xA;even the fraction of web pages&#xA;written in UTF-8 is&#xA;&lt;a href=&#34;http://googleblog.blogspot.com/2010/01/unicode-nearing-50-of-web.html&#34;&gt;nearing 50%&lt;/a&gt;.&#xA;UTF-8 was explicitly designed&#xA;to have these nice properties.  Take advantage of them.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;For more on UTF-8, see &amp;ldquo;&lt;a href=&#34;http://plan9.bell-labs.com/sys/doc/utf.html&#34;&gt;Hello World&#xA;or&#xA;Καλημέρα κόσμε&#xA;or&#xA;こんにちは 世界&lt;/a&gt;,&amp;rdquo; by Rob Pike&#xA;and Ken Thompson, and also this &lt;a href=&#34;http://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt&#34;&gt;history&lt;/a&gt;.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;br&gt;&#xA;&#xA;&lt;font size=-1&gt;&#xA;&lt;p class=lp&gt;&#xA;Notes: Property 6 assumes the tools do not strip the high bit from each byte.&#xA;Such mangling was common years ago but is very uncommon now.&#xA;Property 7 assumes the comparison is done treating&#xA;the bytes as unsigned, but such behavior is mandated&#xA;by the ANSI C standard for &lt;code&gt;memcmp&lt;/code&gt;,&#xA;&lt;code&gt;strcmp&lt;/code&gt;, and &lt;code&gt;strncmp&lt;/code&gt;.&#xA;&lt;/p&gt;&#xA;&lt;/font&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;</content>
  </entry>
  <entry>
    <title>Computing History at Bell Labs</title>
    <id>tag:research.swtch.com,2012:research.swtch.com/bell-labs</id>
    <link rel="alternate" href="http://research.swtch.com/bell-labs"></link>
    <published>2008-04-09T00:00:00-04:00</published>
    <updated>2008-04-09T00:00:00-04:00</updated>
    <summary type="text">Doug McIlroy&#39;s rememberances</summary>
    <content type="html">&#xA;&lt;p&gt;&lt;p class=pp&gt;&#xA;In 1997, on his retirement from Bell Labs, Doug McIlroy gave a&#xA;fascinating talk about the &amp;ldquo;&lt;a href=&#34;http://cm.bell-labs.com/cm/cs/doug97.html&#34;&gt;&lt;b&gt;History of Computing at Bell Labs&lt;/b&gt;&lt;/a&gt;.&amp;rdquo;&#xA;That page contains audio for the talk in Real Audio format (it &lt;i&gt;was&lt;/i&gt; 1997).&#xA;Almost ten years ago I transcribed the audio but never did anything with it.&#xA;The transcript is below.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;My favorite parts of the talk are the description of the bi-quinary decimal relay calculator&#xA;and the description of a team that spent over a year tracking down a race condition bug in&#xA;a missile detector (reliability was king: today you&#39;d just stamp&#xA;&amp;ldquo;cannot reproduce&amp;rdquo; and send the report back).&#xA;But the whole thing contains many fantastic stories.&#xA;It&#39;s well worth the read or listen.&#xA;I also like his recollection of programming using cards: &amp;ldquo;It&#39;s the kind of thing you can be nostalgic about, but it wasn&#39;t actually fun.&amp;rdquo;&#xA;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;p class=pp&gt;&#xA;For more information, Bernard D. Holbrook and W. Stanley Brown&#39;s 1982&#xA;technical report&#xA;&amp;ldquo;&lt;a href=&#34;http://cm.research.bell-labs.com/cm/cs/cstr/cstr99.html&#34;&gt;A History of Computing Research at Bell Laboratories (1937-1975)&lt;/a&gt;&amp;rdquo;&#xA;covers the earlier history in more detail.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;i&gt;Corrections added August 19, 2009.&lt;/i&gt;&lt;/p&gt;&#xA;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&#xA;&lt;p class=lp&gt;&lt;i&gt;Transcript of &amp;ldquo;&lt;a href=&#34;http://cm.bell-labs.com/cm/cs/doug97.html&#34;&gt;History of Computing at Bell Labs:&lt;/a&gt;&amp;rdquo;&lt;/i&gt;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Computing at Bell Labs is certainly an outgrowth of the&#xA;&lt;a href=&#34;http://cm.bell-labs.com/cm/ms/history/history.html&#34;&gt;mathematics department&lt;/a&gt;, which grew from that first hiring&#xA;in 1897, G A Campbell.  When Bell Labs was formally founded&#xA;in 1925, what it had been was the engineering department&#xA;of Western Electric.&#xA;When it was formally founded in 1925,&#xA;almost from the beginning there was a math department with Thornton Fry as the department head, and if you look at some of Fry&#39;s work, it turns out that&#xA;he was fussing around in 1929 with trying to discover&#xA;information theory.  It didn&#39;t actually gel until twenty years later with Shannon.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;1:10&lt;/span&gt;&#xA;Of course, most of the mathematics at that time was continuous.&#xA;One was interested in analyzing circuits and propagation.  And indeed, this is what led to the growth of computing in Bell Laboratories.  The computations could not all be done symbolically.  There were not closed form solutions.  There was lots of numerical computation done.&#xA;The math department had a fair stable of computers,&#xA;which in those days meant people. [laughter]&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;2:00&lt;/span&gt;&#xA;And in the late &#39;30s, &lt;a href=&#34;http://en.wikipedia.org/wiki/George_Stibitz&#34;&gt;George Stibitz&lt;/a&gt; had an idea that some of&#xA;the work that they were doing on hand calculators might be&#xA;automated by using some of the equipment that the Bell System&#xA;was installing in central offices, namely relay circuits.&#xA;He went home, and on his kitchen table, he built out of relays&#xA;a binary arithmetic circuit.  He decided that binary was really&#xA;the right way to compute.&#xA;However, when he finally came to build some equipment,&#xA;he determined that binary to decimal conversion and&#xA;decimal to binary conversion was a drag, and he didn&#39;t&#xA;want to put it in the equipment, and so he finally built&#xA;in 1939, a relay calculator that worked in decimal,&#xA;and it worked in complex arithmetic.&#xA;Do you have a hand calculator now that does complex arithmetic?&#xA;Ten-digit, I believe, complex computations: add, subtract,&#xA;multiply, and divide.&#xA;The I/O equipment was teletypes, so essentially all the stuff to make such&#xA;machines out of was there.&#xA;Since the I/O was teletypes, it could be remotely accessed,&#xA;and there were in fact four stations in the West Street Laboratories&#xA;of Bell Labs.  West Street is down on the left side of Manhattan.&#xA;I had the good fortune to work there one summer, right next to a&#xA;district where you&#39;re likely to get bowled over by rolling ?beads? hanging from racks or tumbling ?cabbages?.  The building is still there.  It&#39;s called &lt;a href=&#34;http://query.nytimes.com/gst/fullpage.html?res=950DE3DB1F38F931A35751C0A96F948260&#34;&gt;Westbeth Apartments&lt;/a&gt;.  It&#39;s now an artist&#39;s colony.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;4:29&lt;/span&gt;&#xA;Anyway, in West Street, there were four separate remote stations from which the complex calculator could be accessed.  It was not time sharing.  You actually reserved your time on the machine, and only one of the four terminals worked at a time.&#xA;In 1940, this machine was shown off to the world at the AMS annual convention, which happened to be held in Hanover at Dartmouth that year, and mathematicians could wonder at remote computing, doing computation on an electromechanical calculator at 300 miles away.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;5:22&lt;/span&gt;&#xA;Stibitz went on from there to make a whole series of relay machines.  Many of them were made for the government during the war.  They were named, imaginatively, Mark I through Mark VI.&#xA;I have read some of his patents.  They&#39;re kind of fun.  One is a patent on conditional transfer. [laughter]  And how do you do a conditional transfer?&#xA;Well these gadgets were, the relay calculator was run from your fingers, I mean the complex calculator.&#xA;The later calculators, of course, if your fingers were a teletype, you could perfectly well feed a paper tape in,&#xA;because that was standard practice.  And these later machines were intended really to be run more from paper tape.&#xA;And the conditional transfer was this: you had two teletypes, and there&#39;s a code that says &#34;time to read from the other teletype&#34;.  Loops were of course easy to do.  You take paper and [laughter; presumably Doug curled a piece of paper to form a physical loop].&#xA;These machines never got to the point of having stored programs.&#xA;But they got quite big.  I saw, one of them was here in 1954, and I did see it, behind glass, and if you&#39;ve ever seen these machines in the, there&#39;s one in the Franklin Institute in Philadelphia, and there&#39;s one in the Science Museum in San Jose, you know these machines that drop balls that go wandering sliding around and turning battle wheels and ringing bells and who knows what.  It kind of looked like that.&#xA;It was a very quiet room, with just a little clicking of relays, which is what a central office used to be like.  It was the one air-conditioned room in Murray Hill, I think.  This machine ran, the Mark VI, well I think that was the Mark V, the Mark VI actually went to Aberdeen.&#xA;This machine ran for a good number of years, probably six, eight.&#xA;And it is said that it never made an undetected error. [laughter]&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;8:30&lt;/span&gt;&#xA;What that means is that it never made an error that it did not diagnose itself and stop.&#xA;Relay technology was very very defensive.  The telephone switching system had to work.  It was full of self-checking,&#xA;and so were the calculators, so were the calculators that Stibitz made.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;9:04&lt;/span&gt;&#xA;Arithmetic was done in bi-quinary, a two out of five representation for decimal integers, and if there weren&#39;t exactly two out of five relays activated it would stop.&#xA;This machine ran unattended over the weekends.  People would&#xA;bring their tapes in, and the operator would paste everybody&#39;s tapes together.&#xA;There was a beginning of job code on the tape and there was also a time indicator.&#xA;If the machine ran out of time, it automatically stopped and went to the next job.  If the machine caught itself in an error, it backed up to the current job and tried it again.&#xA;They would load this machine on Friday night, and on Monday morning, all the tapes, all the entries would be available on output tapes.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Question: I take it they were using a different representation for loops&#xA;and conditionals by then.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Doug: Loops were done actually by they would run back and forth across the tape now, on this machine.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;10:40&lt;/span&gt;&#xA;Then came the transistor in &#39;48.&#xA;At Whippany, they actually had a transistorized computer, which was a respectable minicomputer, a box about this big, running in 1954, it ran from 1954 to 1956 solidly as a test run.&#xA;The notion was that this computer might fly in an airplane.&#xA;And during that two-year test run, one diode failed.&#xA;In 1957, this machine called &lt;a href=&#34;http://www.cedmagic.com/history/tradic-transistorized.html&#34;&gt;TRADIC&lt;/a&gt;, did in fact fly in an airplane, but to the best of my knowledge, that machine was a demonstration machine.  It didn&#39;t turn into a production machine.&#xA;About that time, we started buying commercial machines.&#xA;It&#39;s wonderful to think about the set of different architectures that existed in that time.  The first machine we got was called a &lt;a href=&#34;http://www.columbia.edu/acis/history/cpc.html&#34;&gt;CPC from IBM&lt;/a&gt;.  And all it was was a big accounting machine with a very special plugboard on the side that provided an interpreter for doing ten-digit decimal arithmetic, including&#xA;opcodes for the trig functions and square root.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;12:30&lt;/span&gt;&#xA;It was also not a computer as we know it today,&#xA;because it wasn&#39;t stored program, it had twenty-four memory locations as I recall, and it took its program instead of from tapes, from cards.  This was not a total advantage.  A tape didn&#39;t get into trouble if you dropped it on the floor.  [laughter].&#xA;CPC, the operator would stand in front of it, and there, you&#xA;would go through loops by taking cards out, it took human intervention, to take the cards out of the output of the card reader and put them in the ?top?.  I actually ran some programs on the CPC ?...?.  It&#39;s the kind of thing you can be nostalgic about, but it wasn&#39;t actually fun.&#xA;[laughter]&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;13:30&lt;/span&gt;&#xA;The next machine was an &lt;a href=&#34;http://www.columbia.edu/acis/history/650.html&#34;&gt;IBM 650&lt;/a&gt;, and here, this was a stored program, with the memory being on drum.  There was no operating system for it.  It came with a manual: this is what the machine does.  And Michael Wolontis made an interpreter called the &lt;a href=&#34;http://hopl.murdoch.edu.au/showlanguage.prx?exp=6497&amp;language=Wolontis-Bell%20Interpreter&#34;&gt;L1 interpreter&lt;/a&gt; for this machine, so you could actually program in, the manual told you how to program in binary, and L1 allowed you to give something like 10 for add and 9 for subtract, and program in decimal instead.  And of course that machine required interesting optimization, because it was a nice thing if the next program step were stored somewhere -- each program step had the address of the following step in it, and you would try to locate them around the drum so to minimize latency.  So there were all kinds of optimizers around, but I don&#39;t think Bell Labs made ?...? based on this called &#34;soap&#34; from Carnegie Mellon.  That machine didn&#39;t last very long.  Fortunately, a machine with core memory came out from IBM in about &#39;56, the 704.  Bell Labs was a little slow in getting one, in &#39;58.  Again, the machine came without an operating system.&#xA;In fact, but it did have Fortran, which really changed the world.&#xA;It suddenly made it easy to write programs.  But the way Fortran came from IBM, it came with a thing called the Fortran Stop Book.&#xA;This was a list of what happened, a diagnostic would execute the halt instruction, the operator would go read the panel lights and discover where the machine had stopped, you would then go look up in the stop book what that meant.&#xA;Bell Labs, with George Mealy and Glenn Hanson, made an operating system, and one of the things they did was to bring the stop book to heel.  They took the compiler, replaced all the stop instructions with jumps to somewhere, and allowed the program instead of stopping to go on to the next trial.&#xA;By the time I arrived at Bell Labs in 1958, this thing was running nicely.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;16:36&lt;/span&gt;&#xA;Bell Labs continued to be a major player in operating systems.&#xA;This was called BESYS.  BE was the share abbreviation for Bell Labs.  Each company that belonged to Share, which was the IBM users group, ahd a two letter abbreviation.  It&#39;s hard to imagine taking all the computer users now and giving them a two-letter abbreviation.  BESYS went through many generations, up to BESYS 5, I believe.  Each one with innovations.  IBM delivered a machine, the 7090, in 1960.  This machine had interrupts in it, but IBM didn&#39;t use them.  But BESYS did.  And that sent IBM back to the drawing board to make it work.  [Laughter]&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;17:48&lt;/span&gt;&#xA;Rob Pike:  It also didn&#39;t have memory protection.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Doug: It didn&#39;t have memory protection either, and a lot of people actually got IBM to put memory protection in the 7090, so that one could leave the operating system resident in the presence of a wild program, an idea that the PC didn&#39;t discover until, last year or something like that.  [laughter]&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Big players then, &lt;a href=&#34;http://en.wikipedia.org/wiki/Richard_Hamming&#34;&gt;Dick Hamming&lt;/a&gt;, a name that I&#39;m sure everybody knows,&#xA;was sort of the numerical analysis guru, and a seer.&#xA;He liked to make outrageous predictions.  He predicted in 1960, that half of Bell Labs was going to be busy doing something with computers eventually.&#xA;?...? exaggerating some ?...? abstract in his thought.&#xA;He was wrong.&#xA;Half was a gross underestimate.  Dick Hamming retired twenty years ago, and just this June he completed his full twenty years term in the Navy, which entitles him again to retire from the Naval Postgraduate Institute in Monterey.  Stibitz, incidentally died, I think within the last year.&#xA;He was doing medical instrumentation at Dartmouth essentially, near the end.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;20:00&lt;/span&gt;&#xA;Various problems intrigued, besides the numerical problems, which in fact were stock in trade, and were the real justification for buying machines, until at least the &#39;70s I would say.  But some non-numerical problems had begun to tickle the palette of the math department.  Even G A Campbell got interested in graph theory, the reason being he wanted to think of all the possible ways you could take the three wires and the various parts of the telephone and connect them together, and try permutations to see what you could do about reducing side ?...? by putting things into the various parts of the circuit, and devised every possibly way of connecting the telephone up.  And that was sort of the beginning of combinatorics at Bell Labs.  John Reardon, a mathematician parlayed this into a major subject.  Two problems which are now deemed as computing problems, have intrigued the math department for a very long time, and those are the minimum spanning tree problem, and the wonderfully ?comment about Joe Kruskal, laughter?&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;21:50&lt;/span&gt;&#xA;And in the 50s Bob Prim and Kruskal, who I don&#39;t think worked on the Labs at that point, invented algorithms for the minimum spanning tree.  Somehow or other, computer scientists usually learn these algorithms, one of the two at least, as Dijkstra&#39;s algorithm, but he was a latecomer.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Another pet was the traveling salesman.  There&#39;s been a long list of people at Bell Labs who played with that: Shen Lin and Ron Graham and David Johnson and dozens more, oh and ?...?.  And then another problem is the Steiner minimum spanning tree, where you&#39;re allowed to add points to the graph.  Every one of these problems grew, actually had a justification in telephone billing.  One jurisdiction or another would specify that the way you bill for a private line network was in one jurisdiction by the minimum spanning tree.  In another jurisdiction, by the traveling salesman route.  NP-completeness wasn&#39;t a word in the vocabulary of ?...? [laughter].  And the &lt;a href=&#34;http://en.wikipedia.org/wiki/Steiner_tree&#34;&gt;Steiner problem&lt;/a&gt; came up because customers discovered they could beat the system by inventing offices in the middle of Tennessee that had nothing to do with their business, but they could put the office at a Steiner point and reduce their phone bill by adding to what the service that the Bell System had to give them.  So all of these problems actually had some justification in billing besides the fun.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;24:15&lt;/span&gt;&#xA;Come the 60s, we actually started to hire people for computing per se.  I was perhaps the third person who was hired with a Ph.D. to help take care of the computers and I&#39;m told that the then director and head of the math department, Hendrick Bode, had said to his people, &#34;yeah, you can hire this guy, instead of a real mathematician, but what&#39;s he gonna be doing in five years?&#34; [laughter]&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;25:02&lt;/span&gt;&#xA;Nevertheless, we started hiring for real in about &#39;67.  Computer science got split off from the math department.  I had the good fortune to move into the office that I&#39;ve been in ever since then.  Computing began to make, get a personality of its own.  One of the interesting people that came to Bell Labs for a while was Hao Wang.  Is his name well known?  [Pause]  One nod.  Hao Wang was a philosopher and logician, and we got a letter from him in England out of the blue saying &#34;hey you know, can I come and use your computers?  I have an idea about theorem proving.&#34;  There was theorem proving in the air in the late 50s, and it was mostly pretty thin stuff.  Obvious that the methods being proposed wouldn&#39;t possibly do anything more difficult than solve tic-tac-toe problems by enumeration.  Wang had a notion that he could mechanically prove theorems in the style of Whitehead and Russell&#39;s great treatise Principia Mathematica in the early patr of the century.  He came here, learned how to program in machine language, and took all of Volume I of Principia Mathematica --&#xA;if you&#39;ve ever hefted Principia, well that&#39;s about all it&#39;s good for, it&#39;s a real good door stop.  It&#39;s really big.  But it&#39;s theorem after theorem after theorem in propositional calculus.  Of course, there&#39;s a decision procedure for propositional calculus, but he was proving them more in the style of Whitehead and Russell.  And when he finally got them all coded and put them into the computer, he proved the entire contents of this immense book in eight minutes.&#xA;This was actually a neat accomplishment.  Also that was the beginning of all the language theory.  We hired people like &lt;a href=&#34;http://www1.cs.columbia.edu/~aho/&#34;&gt;Al Aho&lt;/a&gt; and &lt;a href=&#34;http://infolab.stanford.edu/~ullman/&#34;&gt;Jeff Ullman&lt;/a&gt;, who probed around every possible model of grammars, syntax, and all of the things that are now in the standard undergraduate curriculum, were pretty well nailed down here, on syntax and finite state machines and so on were pretty well nailed down in the 60s.  Speaking of finite state machines, in the 50s, both Mealy and Moore, who have two of the well-known models of finite state machines, were here.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;28:40&lt;/span&gt;&#xA;During the 60s, we undertook an enormous development project in the guise of research, which was &lt;a href=&#34;http://www.multicians.org/&#34;&gt;MULTICS&lt;/a&gt;, and it was the notion of MULTICS was computing was the public utility of the future.  Machines were very expensive, and ?indeed? like you don&#39;t own your own electric generator, you rely on the power company to do generation for you, and it was seen that this was a good way to do computing -- time sharing -- and it was also recognized that shared data was a very good thing.  MIT pioneered this and Bell Labs joined in on the MULTICS project, and this occupied five years of system programming effort, until Bell Labs pulled out, because it turned out that MULTICS was too ambitious for the hardware at the time, and also with 80 people on it was not exactly a research project.  But, that led to various people who were on the project, in particular &lt;a href=&#34;http://en.wikipedia.org/wiki/Ken_Thompson&#34;&gt;Ken Thompson&lt;/a&gt; -- right there -- to think about how to -- &lt;a href=&#34;http://netlib.bell-labs.com/who/dmr/&#34;&gt;Dennis Ritchie&lt;/a&gt; and Rudd Canaday were in on this too -- to think about how you might make a pleasant operating system with a little less resources.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;30:30&lt;/span&gt;&#xA;And Ken found -- this is a story that&#39;s often been told, so I won&#39;t go into very much of unix -- Ken found an old machine cast off in the corner, the &lt;a href=&#34;http://en.wikipedia.org/wiki/GE-600_series&#34;&gt;PDP-7&lt;/a&gt;, and put up this little operating system on it, and we had immense &lt;a href=&#34;http://en.wikipedia.org/wiki/GE-600_series&#34;&gt;GE635&lt;/a&gt; available at the comp center at the time, and I remember as the department head, muscling in to use this little computer to be, to get to be Unix&#39;s first user, customer, because it was so much pleasanter to use this tiny machine than it was to use the big and capable machine in the comp center.  And of course the rest of the story is known to everybody and has affected all college campuses in the country.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;31:33&lt;/span&gt;&#xA;Along with the operating system work, there was a fair amount of language work done at Bell Labs.  Often curious off-beat languages.  One of my favorites was called &lt;a href=&#34;http://hopl.murdoch.edu.au/showlanguage.prx?exp=6937&amp;language=BLODI-B&#34;&gt;Blodi&lt;/a&gt;, B L O D I, a block diagram compiler by Kelly and Vyssotsky.  Perhaps the most interesting early uses of computers in the sense of being unexpected, were those that came from the acoustics research department, and what the Blodi compiler was invented in the acoustic research department for doing digital simulations of sample data system.  DSPs are classic sample data systems,&#xA;where instead of passing analog signals around, you pass around streams of numerical values.  And Blodi allowed you to say here&#39;s a delay unit, here&#39;s an amplifier, here&#39;s an adder, the standard piece parts for a sample data system, and each one was described on a card, and with description of what it&#39;s wired to.  It was then compiled into one enormous single straight line loop for one time step.  Of course, you had to rearrange the code because some one part of the sample data system would feed another and produce really very efficient 7090 code for simulating sample data systems.&#xA;By in large, from that time forth, the acoustic department stopped making hardware.  It was much easier to do signal processing digitally than previous ways that had been analog.  Blodi had an interesting property.  It was the only programming language I know where -- this is not my original observation, Vyssotsky said -- where you could take the deck of cards, throw it up the stairs, and pick them up at the bottom of the stairs, feed them into the computer again, and get the same program out.  Blodi had two, aside from syntax diagnostics, it did have one diagnostic when it would fail to compile, and that was &#34;somewhere in your system is a loop that consists of all delays or has no delays&#34; and you can imagine how they handled that.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;35:09&lt;/span&gt;&#xA;Another interesting programming language of the 60s was &lt;a href=&#34;http://www.knowltonmosaics.com/&#34;&gt;Ken Knowlten&lt;/a&gt;&#39;s &lt;a href=&#34;http://beflix.com/beflix.php&#34;&gt;Beflix&lt;/a&gt;.  This was for making movies on something with resolution kind of comparable to 640x480, really coarse, and the&#xA;programming notion in here was bugs.  You put on your grid a bunch of bugs, and each bug carried along some data as baggage,&#xA;and then you would do things like cellular automata operations.  You could program it or you could kind of let it go by itself.  If a red bug is next to a blue bug then it turns into a green bug on the following step and so on.  &lt;span style=&#34;font-size: 0.7em;&#34;&gt;36:28&lt;/span&gt;  He and Lillian Schwartz made some interesting abstract movies at the time.  It also did some interesting picture processing.  One wonderful picture of a reclining nude, something about the size of that blackboard over there, all made of pixels about a half inch high each with a different little picture in it, picked out for their density, and so if you looked at it close up it consisted of pickaxes and candles and dogs, and if you looked at it far enough away, it was a &lt;a href=&#34;http://blog.the-eg.com/2007/12/03/ken-knowlton-mosaics/&#34;&gt;reclining nude&lt;/a&gt;.  That picture got a lot of play all around the country.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Lorinda Cherry: That was with Leon, wasn&#39;t it?  That was with &lt;a href=&#34;http://design.osu.edu/carlson/history/lesson4.html#bell&#34;&gt;Leon Harmon&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Doug: Was that Harmon?&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Lorinda: ?...?&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Doug: Harmon was also an interesting character.  He did more things than pictures.  I&#39;m glad you reminded me of him.  I had him written down here.  Harmon was a guy who among other things did a block diagram compiler for writing a handwriting recognition program.  I never did understand how his scheme worked, and in fact I guess it didn&#39;t work too well.  [laughter]&#xA;It didn&#39;t do any production ?things? but it was an absolutely&#xA;immense sample data circuit for doing handwriting recognition.&#xA;Harmon&#39;s most famous work was trying to estimate the information content in a face.  And every one of these pictures which are a cliche now, that show a face digitized very coarsely, go back to Harmon&#39;s &lt;a href=&#34;http://www.doubletakeimages.com/history.htm&#34;&gt;first psychological experiments&lt;/a&gt;, when he tried to find out how many bits of picture he needed to try to make a face recognizable.  He went around and digitized about 256 faces from Bell Labs and did real psychological experiments asking which faces could be distinguished from other ones.  I had the good fortune to have one of the most distinguishable faces, and consequently you&#39;ll find me in freshman psychology texts through no fault of my own.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;39:15&lt;/span&gt;&#xA;Another thing going on the 60s was the halting beginning here of interactive computing.  And again the credit has to go to the acoustics research department, for good and sufficient reason.  They wanted to be able to feed signals into the machine, and look at them, and get them back out.  They bought yet another weird architecture machine called the &lt;a href=&#34;http://www.piercefuller.com/library/pb250.html&#34;&gt;Packard Bell 250&lt;/a&gt;, where the memory elements were &lt;a href=&#34;http://en.wikipedia.org/wiki/Delay_line_memory&#34;&gt;mercury delay lines&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Question: Packard Bell?&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Doug: Packard Bell, same one that makes PCs today.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;40:10&lt;/span&gt;&#xA;They hung this off of the comp center 7090 and put in a scheme for quickly shipping jobs into the job stream on the 7090.  The Packard Bell was the real-time terminal that you could play with and repair stuff, ?...? off the 7090, get it back, and then you could play it.  From that grew some graphics machines also, built by ?...? et al.  And it was one of the old graphics machines&#xA;in fact that Ken picked up to build Unix on.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;40:55&lt;/span&gt;&#xA;Another thing that went on in the acoustics department was synthetic speech and music.  &lt;a href=&#34;http://csounds.com/mathews/index.html&#34;&gt;Max Mathews&lt;/a&gt;, who was the the director of the department has long been interested in computer music.  In fact since retirement he spent a lot of time with Pierre Boulez in Paris at a wonderful institute with lots of money simply for making synthetic music.  He had a language called Music 5.  Synthetic speech or, well first of all simply speech processing was pioneered particularly by &lt;a href=&#34;http://en.wikipedia.org/wiki/John_Larry_Kelly,_Jr&#34;&gt;John Kelly&lt;/a&gt;.  I remember my first contact with speech processing.  It was customary for computer operators, for the benefit of computer operators, to put a loudspeaker on the low bit of some register on the machine, and normally the operator would just hear kind of white noise.  But if you got into a loop, suddenly the machine would scream, and this signal could be used to the operator &#34;oh the machines in a loop.  Go stop it and go on to the next job.&#34;  I remember feeding them an Ackermann&#39;s function routine once.  [laughter]  They were right.  It was a silly loop.  But anyway.  One day, the operators were ?...?.  The machine started singing.  Out of the blue.  &amp;ldquo;Help!  I&#39;m caught in a loop.&amp;rdquo;.  [laughter]  And in a broad Texas accent, which was the recorded voice of John Kelly.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;43:14&lt;/span&gt;&#xA;However.  From there Kelly went on to do some speech synthesis.  Of course there&#39;s been a lot more speech synthesis work done since, by &lt;span style=&#34;font-size: 0.7em;&#34;&gt;43:31&lt;/span&gt; folks like Cecil Coker, Joe Olive.  But they produced a record, which unfortunately I can&#39;t play because records are not modern anymore.  And everybody got one in the Bell Labs Record, which is a magazine, contained once a record from the acoustics department, with both speech and music and one very famous combination where the computer played and sang &#34;A Bicycle Built For Two&#34;.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;?...?&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;44:32&lt;/span&gt;&#xA;At the same time as all this stuff is going on here, needless&#xA;to say computing is going on in the rest of the Labs.  it was about early 1960 when the math department lost its monopoly on computing machines and other people started buying them too, but for switching.  The first experiments with switching computers were operational in around 1960.  They were planned for several years prior to that; essentially as soon as the transistor was invented, the making of electronic rather than electromechanical switching machines was anticipated.  Part of the saga of the switching machines is cheap memory.  These machines had enormous memories -- thousands of words.  [laughter]  And it was said that the present worth of each word of memory that programmers saved across the Bell System was something like eleven dollars, as I recall.  And it was worthwhile to struggle to save some memory.  Also, programs were permanent.  You were going to load up the switching machine with switching program and that was going to run.  You didn&#39;t change it every minute or two.  And it would be cheaper to put it in read only memory than in core memory.  And there was a whole series of wild read-only memories, both tried and built.&#xA;The first experimental Essex System had a thing called the flying spot store&#xA;which was large photographic plates with bits on them and CRTs projecting on the plates and you would detect underneath on the photodetector whether the bit was set or not.  That was the program store of Essex.  The program store of the first ESS systems consisted of twistors, which I actually am not sure I understand to this day, but they consist of iron wire with a copper wire wrapped around them and vice versa.  There were also experiments with an IC type memory called the waffle iron.  Then there was a period when magnetic bubbles were all the rage.  As far as I know, although microelectronics made a lot of memory, most of the memory work at Bell Labs has not had much effect on ?...?.  Nice tries though.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;48:28&lt;/span&gt;&#xA;Another thing that folks began to work on was the application of (and of course, right from the start) computers to data processing.  When you owned equipment scattered through every street in the country, and you have a hundred million customers, and you have bills for a hundred million transactions a day, there&#39;s really some big data processing going on.  And indeed in the early 60s, AT&amp;T was thinking of making its own data processing computers solely for billing.  Somehow they pulled out of that, and gave all the technology to IBM, and one piece of that technology went into use in high end equipment called tractor tapes.  Inch wide magnetic tapes that would be used for a while.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;49:50&lt;/span&gt;&#xA;By in large, although Bell Labs has participated until fairly recently in data processing in quite a big way, AT&amp;T never really quite trusted the Labs to do it right because here is where the money is.  I can recall one occasion when during strike of temporary employees, a fill-in employee like from the&#xA;Laboratories and so on, lost a day&#39;s billing tape in Chicago.  And that was a million dollars.  And that&#39;s generally speaking the money people did not until fairly recently trust Bell Labs to take good care of money, even though they trusted the Labs very well to make extremely reliable computing equipment for switches.&#xA;The downtime on switches is still spectacular by any industry standards.  The design for the first ones was two hours down in 40 years, and the design was met.  Great emphasis on reliability and redundancy, testing.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;51:35&lt;/span&gt;&#xA;Another branch of computing was for the government.  The whole Whippany Laboratories [time check]&#xA;Whippany, where we took on contracts for the government particularly in the computing era in anti-missile defense, missile defense, and underwater sound.  Missile defense was a very impressive undertaking.  It was about in the early &#39;63 time frame when it was estimated the amount of computation to do a reasonable job of tracking incoming missiles would be 30 M floating point operations a second.  In the day of the Cray that doesn&#39;t sound like a great lot, but it&#39;s more than your high end PCs can do.  And the machines were supposed to be reliable.  They designed the machines at Whippany, a twelve-processor multiprocessor, to no specs, enormously rugged, one watt transistors.  This thing in real life performed remarkably well.  There were sixty-five missile shots, tests across the Pacific Ocean ?...?  and Lorinda Cherry here actually sat there waiting for them to come in.  [laughter]  And only a half dozen of them really failed.  As a measure of the interest in reliability, one of them failed apparently due to processor error.  Two people were assigned to look at the dumps, enormous amounts of telemetry and logging information were taken during these tests, which are truly expensive to run.  Two people were assigned to look at the dumps.  A year later they had not found the trouble.  The team was beefed up.  They finally decided that there was a race condition in one circuit.  They then realized that this particular kind of race condition had not been tested for in all the simulations.  They went back and simulated the entire hardware system to see if its a remote possibility of any similar cases, found twelve of them, and changed the hardware.  But to spend over a year looking for a bug is a sign of what reliability meant.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;54:56&lt;/span&gt;&#xA;Since I&#39;m coming up on the end of an hour, one could go on and on and on,&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Crowd: go on, go on. [laughter]&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;55:10&lt;/span&gt;&#xA;Doug: I think I&#39;d like to end up by mentioning a few of the programs that have been written at Bell Labs that I think are most surprising.  Of course there are lots of grand programs that have been written.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;I already mentioned the block diagram compiler.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Another really remarkable piece of work was &lt;a href=&#34;http://cm.bell-labs.com/cm/cs/doc/74/eqn.ps.gz&#34;&gt;eqn&lt;/a&gt;, the equation&#xA;typesetting language, which has been imitated since, by Lorinda Cherry and Brian Kernighan.  The notion of taking an auditory syntax, the way people talk about equations, but only talk, this was not borrowed from any written notation before, getting the auditory one down on paper, that was very successful and surprising.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Another of my favorites, and again Lorinda Cherry was in this one, with Bob Morris, was typo.  This was a program for finding spelling errors.  It didn&#39;t know the first thing about spelling.  It would read a document, measure its statistics, and print out the words of the document in increasing order of what it thought the likelihood of that word having come from the same statistical source as the document.  The words that did not come from the statistical source of the document were likely to be typos, and now I mean typos as distinct from spelling errors, where you actually hit the wrong key.  Those tend to be off the wall, whereas phonetic spelling errors you&#39;ll never find.  And this worked remarkably well.  Typing errors would come right up to the top of the list.  A really really neat program.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;57:50&lt;/span&gt;&#xA;Another one of my favorites was by Brenda Baker called &lt;a href=&#34;http://doi.acm.org/10.1145/800168.811545&#34;&gt;struct&lt;/a&gt;, which took Fortran programs and converted them into a structured programming language called Ratfor, which was Fortran with C syntax.  This seemed like a possible undertaking, like something you do by the seat of the pants and you get something out.  In fact, folks at Lockheed had done things like that before.  But Brenda managed to find theorems that said there&#39;s really only one form, there&#39;s a canonical form into which you can structure a Fortran program, and she did this.  It took your Fortran program, completely mashed it, put it out perhaps in almost certainly a different order than it was in Fortran connected by GOTOs, without any GOTOs, and the really remarkable thing was that authors of the program who clearly knew the way they wrote it in the first place, preferred it after it had been rearranged by Brendan.  I was astonished at the outcome of that project.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;59:19&lt;/span&gt;&#xA;Another first that happened around here was by Fred Grampp, who got interested in computer security.  One day he decided he would make a program for sniffing the security arrangements on a computer, as a service: Fred would never do anything crooked.  [laughter]  This particular program did a remarkable job, and founded a whole minor industry within the company.  A department was set up to take this idea and parlay it, and indeed ever since there has been some improvement in the way computer centers are managed, at least until we got Berkeley Unix.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;60:24&lt;/span&gt;&#xA;And the last interesting program that I have time to mention is one by &lt;a href=&#34;http://research.microsoft.com/users/church/&#34;&gt;Ken Church&lt;/a&gt;.  He was dealing with -- text processing has always been a continuing ?...? of the research, and in some sense it has an application to our business because we&#39;re handling speech, but he got into consulting with the department in North Carolina that has to translate manuals.  There are millions of pages of manuals in the Bell System and its successors, and ever since we&#39;ve gone global, these things had to get translated into many languages.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;61:28&lt;/span&gt;&#xA;To help in this, he was making tools which would put up on the screen, graphed on the screen quickly a piece of text and its translation, because a translator, particularly a technical translator, wants to know, the last time we mentioned this word how was it translated.  You don&#39;t want to be creative in translating technical text.  You&#39;d like to be able to go back into the archives and pull up examples of translated text.  And the neat thing here is the idea for how do you align texts in two languages.  You&#39;ve got the original, you&#39;ve got the translated one, how do you bring up on the screen, the two sentences that go together?  And the following scam worked beautifully.  This is on western languages.  &lt;span style=&#34;font-size: 0.7em;&#34;&gt;62:33&lt;/span&gt;&#xA;Simply look for common four letter tetragrams, four letter combinations between the two and as best as you can, line them up as nearly linearly with the lengths of the two types as possible.  And this &lt;a href=&#34;http://acl.ldc.upenn.edu/W/W93/W93-0301.pdf&#34;&gt;very simple idea&lt;/a&gt; works like storm.  Something for nothing.  I like that.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;63:10&lt;/span&gt;&#xA;The last thing is one slogan that sort of got started with Unix and is just rife within the industry now.  Software tools.  We were making software tools in Unix before we knew we were, just like the Molière character was amazed at discovering he&#39;d been speaking prose all his life.  [laughter]  But then &lt;a href=&#34;http://www.amazon.com/-/dp/020103669X&#34;&gt;Kernighan and Plauger&lt;/a&gt; came along and christened what was going on, making simple generally useful and compositional programs to do one thing and do it well and to fit together.  They called it software tools, made a book, wrote a book, and this notion now is abroad in the industry.  And it really did begin all up in the little attic room where you [points?] sat for many years writing up here.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt; Oh I forgot to.  I haven&#39;t used any slides.  I&#39;ve brought some, but I don&#39;t like looking at bullets and you wouldn&#39;t either, and I forgot to show you the one exhibit I brought, which I borrowed from Bob Kurshan.  When Bell Labs was founded, it had of course some calculating machines, and it had one wonderful computer.  This.  That was bought in 1918.  There&#39;s almost no other computing equipment from any time prior to ten years ago that still exists in Bell Labs.  This is an &lt;a href=&#34;http://infolab.stanford.edu/pub/voy/museum/pictures/display/2-5-Mechanical.html&#34;&gt;integraph&lt;/a&gt;.  It has two styluses.  You trace a curve on a piece of paper with one stylus and the other stylus draws the indefinite integral here.  There was somebody in the math department who gave this service to the whole company, with about 24 hours turnaround time, calculating integrals.  Our recent vice president Arno Penzias actually did, he calculated integrals differently, with a different background.  He had a chemical balance, and he cut the curves out of the paper and weighed them.  This was bought in 1918, so it&#39;s eighty years old.  It used to be shiny metal, it&#39;s a little bit rusty now.  But it still works.&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&lt;span style=&#34;font-size: 0.7em;&#34;&gt;66:30&lt;/span&gt;&#xA;Well, that&#39;s a once over lightly of a whole lot of things that have gone on at Bell Labs.  It&#39;s just such a fun place that one I said I just could go on and on.  If you&#39;re interested, there actually is a history written.  This is only one of about six volumes, &lt;a href=&#34;http://www.amazon.com/gp/product/0932764061&#34;&gt;this&lt;/a&gt; is the one that has the mathematical computer sciences, the kind of things that I&#39;ve mostly talked about here.  A few people have copies of them.  For some reason, the AT&amp;T publishing house thinks that because they&#39;re history they&#39;re obsolete, and they stopped printing them.  [laughter]&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;Thank you, and that&#39;s all.&lt;/p&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;</content>
  </entry>
  <entry>
    <title>Using Uninitialized Memory for Fun and Profit</title>
    <id>tag:research.swtch.com,2012:research.swtch.com/sparse</id>
    <link rel="alternate" href="http://research.swtch.com/sparse"></link>
    <published>2008-03-14T00:00:00-04:00</published>
    <updated>2008-03-14T00:00:00-04:00</updated>
    <summary type="text">An unusual but very useful data structure</summary>
    <content type="html">&#xA;&lt;p&gt;&lt;p class=lp&gt;&#xA;This is the story of a clever trick that&#39;s been around for&#xA;at least 35 years, in which array values can be left&#xA;uninitialized and then read during normal operations,&#xA;yet the code behaves correctly no matter what garbage&#xA;is sitting in the array.&#xA;Like the best programming tricks, this one is the right tool for the &#xA;job in certain situations.&#xA;The sleaziness of uninitialized data&#xA;access is offset by performance improvements:&#xA;some important operations change from linear &#xA;to constant time.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Alfred Aho, John Hopcroft, and Jeffrey Ullman&#39;s 1974 book &#xA;&lt;i&gt;The Design and Analysis of Computer Algorithms&lt;/i&gt;&#xA;hints at the trick in an exercise (Chapter 2, exercise 2.12):&#xA;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;Develop a technique to initialize an entry of a matrix to zero&#xA;the first time it is accessed, thereby eliminating the &lt;i&gt;O&lt;/i&gt;(||&lt;i&gt;V&lt;/i&gt;||&lt;sup&gt;2&lt;/sup&gt;) time&#xA;to initialize an adjacency matrix.&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;Jon Bentley&#39;s 1986 book &lt;a href=&#34;http://www.cs.bell-labs.com/cm/cs/pearls/&#34;&gt;&lt;i&gt;Programming Pearls&lt;/i&gt;&lt;/a&gt; expands&#xA;on the exercise (Column 1, exercise 8; &lt;a href=&#34;http://www.cs.bell-labs.com/cm/cs/pearls/sec016.html&#34;&gt;exercise 9&lt;/a&gt; in the Second Edition):&#xA;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;One problem with trading more space for less time is that &#xA;initializing the space can itself take a great deal of time.&#xA;Show how to circumvent this problem by designing a technique&#xA;to initialize an entry of a vector to zero the first time it is&#xA;accessed.  Your scheme should use constant time for initialization&#xA;and each vector access; you may use extra space proportional&#xA;to the size of the vector.  Because this method reduces &#xA;initialization time by using even more space, it should be&#xA;considered only when space is cheap, time is dear, and &#xA;the vector is sparse.&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;Aho, Hopcroft, and Ullman&#39;s exercise talks about a matrix and &#xA;Bentley&#39;s exercise talks about a vector, but for now let&#39;s consider&#xA;just a simple set of integers.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;One popular representation of a set of &lt;i&gt;n&lt;/i&gt; integers ranging&#xA;from 0 to &lt;i&gt;m&lt;/i&gt; is a bit vector, with 1 bits at the&#xA;positions corresponding to the integers in the set.&#xA;Adding a new integer to the set, removing an integer&#xA;from the set, and checking whether a particular integer&#xA;is in the set are all very fast constant-time operations&#xA;(just a few bit operations each).&#xA;Unfortunately, two important operations are slow:&#xA;iterating over all the elements in the set &#xA;takes time &lt;i&gt;O&lt;/i&gt;(&lt;i&gt;m&lt;/i&gt;), as does clearing the set.&#xA;If the common case is that &#xA;&lt;i&gt;m&lt;/i&gt; is much larger than &lt;i&gt;n&lt;/i&gt;&#xA;(that is, the set is only sparsely&#xA;populated) and iterating or clearing the set &#xA;happens frequently, then it could be better to&#xA;use a representation that makes those operations&#xA;more efficient.  That&#39;s where the trick comes in.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Preston Briggs and Linda Torczon&#39;s 1993 paper,&#xA;&amp;ldquo;&lt;a href=&#34;http://citeseer.ist.psu.edu/briggs93efficient.html&#34;&gt;&lt;b&gt;An Efficient Representation for Sparse Sets&lt;/b&gt;&lt;/a&gt;,&amp;rdquo;&#xA;describes the trick in detail.&#xA;Their solution represents the sparse set using an integer&#xA;array named &lt;code&gt;dense&lt;/code&gt; and an integer &lt;code&gt;n&lt;/code&gt;&#xA;that counts the number of elements in &lt;code&gt;dense&lt;/code&gt;.&#xA;The &lt;i&gt;dense&lt;/i&gt; array is simply a packed list of the elements in the&#xA;set, stored in order of insertion.&#xA;If the set contains the elements 5, 1, and 4, then &lt;code&gt;n = 3&lt;/code&gt; and&#xA;&lt;code&gt;dense[0] = 5&lt;/code&gt;, &lt;code&gt;dense[1] = 1&lt;/code&gt;, &lt;code&gt;dense[2] = 4&lt;/code&gt;:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&lt;img src=&#34;/sparse0.png&#34; /&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Together &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;dense&lt;/code&gt; are&#xA;enough information to reconstruct the set, but this representation&#xA;is not very fast.&#xA;To make it fast, Briggs and Torczon&#xA;add a second array named &lt;code&gt;sparse&lt;/code&gt;&#xA;which maps integers to their indices in &lt;code&gt;dense&lt;/code&gt;.&#xA;Continuing the example,&#xA;&lt;code&gt;sparse[5] = 0&lt;/code&gt;, &lt;code&gt;sparse[1] = 1&lt;/code&gt;, &#xA;&lt;code&gt;sparse[4] = 2&lt;/code&gt;.&#xA;Essentially, the set is a pair of arrays that point at&#xA;each other:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&lt;img src=&#34;/sparse0b.png&#34; /&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Adding a member to the set requires updating both of these arrays:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre class=indent&gt;&#xA;add-member(i):&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dense[n] = i&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sparse[i] = n&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n++&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;It&#39;s not as efficient as flipping a bit in a bit vector, but it&#39;s &#xA;still very fast and constant time. &#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;To check whether &lt;code&gt;i&lt;/code&gt; is in the set, you verify that&#xA;the two arrays point at each other for that element:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre class=indent&gt;&#xA;is-member(i):&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return sparse[i] &amp;lt; n &amp;&amp; dense[sparse[i]] == i&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;If &lt;code&gt;i&lt;/code&gt; is not in the set, then &lt;i&gt;it doesn&#39;t matter what &lt;code&gt;sparse[i]&lt;/code&gt; is set to&lt;/i&gt;:&#xA;either &lt;code&gt;sparse[i]&lt;/code&gt;&#xA;will be bigger than &lt;code&gt;n&lt;/code&gt; or it will point at a value in &#xA;&lt;code&gt;dense&lt;/code&gt; that doesn&#39;t point back at it.&#xA;Either way, we&#39;re not fooled.  For example, suppose &lt;code&gt;sparse&lt;/code&gt;&#xA;actually looks like:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;center&gt;&#xA;&lt;img src=&#34;/sparse1.png&#34; /&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;&lt;code&gt;Is-member&lt;/code&gt; knows to ignore&#xA;members of sparse that point past &lt;code&gt;n&lt;/code&gt; or that&#xA;point at cells in &lt;code&gt;dense&lt;/code&gt; that don&#39;t point back,&#xA;ignoring the grayed out entries:&#xA;&#xA;&lt;center&gt;&#xA;&lt;img src=&#34;/sparse2.png&#34; /&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Notice what just happened:&#xA;&lt;code&gt;sparse&lt;/code&gt; can have &lt;i&gt;any arbitrary values&lt;/i&gt; in&#xA;the positions for integers not in the set, &#xA;those values actually get used during membership&#xA;tests, and yet the membership test behaves correctly!&#xA;(This would drive &lt;a href=&#34;http://valgrind.org/&#34;&gt;valgrind&lt;/a&gt; nuts.)&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Clearing the set can be done in constant time:&#xA;&lt;/p&gt;&#xA;&lt;pre class=indent&gt;&#xA;clear-set():&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n = 0&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;Zeroing &lt;code&gt;n&lt;/code&gt; effectively clears &#xA;&lt;code&gt;dense&lt;/code&gt; (the code only ever accesses&#xA;entries in dense with indices less than &lt;code&gt;n&lt;/code&gt;), and&#xA;&lt;code&gt;sparse&lt;/code&gt; can be uninitialized, so there&#39;s no &#xA;need to clear out the old values.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;This sparse set representation has one more trick up its sleeve:&#xA;the &lt;code&gt;dense&lt;/code&gt; array allows an &#xA;efficient implementation of set iteration.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre class=indent&gt;&#xA;iterate():&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(i=0; i&amp;lt;n; i++)&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;yield dense[i]&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Let&#39;s compare the run times of a bit vector &#xA;implementation against the sparse set:&#xA;&lt;/p&gt;&#xA;&lt;center&gt;&#xA;&lt;table&gt;&#xA;&lt;tr&gt;&#xA;  &lt;td&gt;&lt;i&gt;Operation&lt;/i&gt;&#xA;  &lt;td align=center width=10&gt;&#xA;  &lt;td align=center&gt;&lt;i&gt;Bit Vector&lt;/i&gt;&#xA;  &lt;td align=center width=10&gt;&#xA;  &lt;td align=center&gt;&lt;i&gt;Sparse set&lt;/i&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;  &lt;td&gt;is-member&#xA;  &lt;td&gt;&#xA;  &lt;td align=center&gt;&lt;i&gt;O&lt;/i&gt;(1)&#xA;  &lt;td&gt; &#xA;  &lt;td align=center&gt;&lt;i&gt;O&lt;/i&gt;(1)&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;  &lt;td&gt;add-member&#xA;  &lt;td&gt;&#xA;  &lt;td align=center&gt;&lt;i&gt;O&lt;/i&gt;(1)&#xA;  &lt;td&gt;&#xA;  &lt;td align=center&gt;&lt;i&gt;O&lt;/i&gt;(1)&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;  &lt;td&gt;clear-set&#xA;  &lt;td&gt;&lt;td align=center&gt;&lt;i&gt;O&lt;/i&gt;(&lt;i&gt;m&lt;/i&gt;)&#xA;  &lt;td&gt;&lt;td align=center&gt;&lt;i&gt;O&lt;/i&gt;(1)&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;  &lt;td&gt;iterate&#xA;  &lt;td&gt;&lt;td align=center&gt;&lt;i&gt;O&lt;/i&gt;(&lt;i&gt;m&lt;/i&gt;)&#xA;  &lt;td&gt;&lt;td align=center&gt;&lt;i&gt;O&lt;/i&gt;(&lt;i&gt;n&lt;/i&gt;)&#xA;&lt;/tr&gt;&#xA;&lt;/table&gt;&#xA;&lt;/center&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;The sparse set is as fast or faster than bit vectors for&#xA;every operation.  The only problem is the space cost:&#xA;two words replace each bit.&#xA;Still, there are times when the speed differences are enough&#xA;to balance the added memory cost.&#xA;Briggs and Torczon point out that liveness sets used &#xA;during register allocation inside a compiler are usually&#xA;small and are cleared very frequently, making sparse sets the&#xA;representation of choice.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Another situation where sparse sets are the better choice&#xA;is work queue-based graph traversal algorithms.&#xA;Iteration over sparse sets visits elements&#xA;in the order they were inserted (above, 5, 1, 4),&#xA;so that new entries inserted during the iteration&#xA;will be visited later in the same iteration.&#xA;In contrast, iteration over bit vectors visits elements in&#xA;integer order (1, 4, 5), so that new elements inserted&#xA;during traversal might be missed, requiring repeated&#xA;iterations.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Returning to the original exercises, it is trivial to change&#xA;the set into a vector (or matrix) by making &lt;code&gt;dense&lt;/code&gt;&#xA;an array of index-value pairs instead of just indices.&#xA;Alternately, one might add the value to the &lt;code&gt;sparse&lt;/code&gt;&#xA;array or to a new array.&#xA;The relative space overhead isn&#39;t as bad if you would have been&#xA;storing values anyway.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Briggs and Torczon&#39;s paper implements additional set&#xA;operations and examines performance speedups from&#xA;using sparse sets inside a real compiler.&#xA;&lt;/p&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;</content>
  </entry>
  <entry>
    <title>Play Tic-Tac-Toe with Knuth</title>
    <id>tag:research.swtch.com,2012:research.swtch.com/tictactoe</id>
    <link rel="alternate" href="http://research.swtch.com/tictactoe"></link>
    <published>2008-01-25T00:00:00-05:00</published>
    <updated>2008-01-25T00:00:00-05:00</updated>
    <summary type="text">The only winning move is not to play.</summary>
    <content type="html">&#xA;&lt;p&gt;&lt;p class=lp&gt;Section 7.1.2 of the &lt;b&gt;&lt;a href=&#34;http://www-cs-faculty.stanford.edu/~knuth/taocp.html#vol4&#34;&gt;Volume 4 pre-fascicle 0A&lt;/a&gt;&lt;/b&gt; of Donald Knuth&#39;s &lt;i&gt;The Art of Computer Programming&lt;/i&gt; is titled &amp;#8220;Boolean Evaluation.&amp;#8221;  In it, Knuth considers the construction of a set of nine boolean functions telling the correct next move in an optimal game of tic-tac-toe.  In a footnote, Knuth tells this story:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&lt;p class=lp&gt;This setup is based on an exhibit from the early 1950s at the Museum of Science and Industry in Chicago, where the author was first introduced to the magic of switching circuits.  The machine in Chicago, designed by researchers at Bell Telephone Laboratories, allowed me to go first; yet I soon discovered there was no way to defeat it.  Therefore I decided to move as stupidly as possible, hoping that the designers had not anticipated such bizarre behavior.  In fact I allowed the machine to reach a position where it had two winning moves; and it seized &lt;i&gt;both&lt;/i&gt; of them!  Moving twice is of course a flagrant violation of the rules, so I had won a moral victory even though the machine had announced that I had lost.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;That story alone is fairly amusing.  But turning the page, the reader finds a quotation from Charles Babbage&#39;s &lt;i&gt;&lt;a href=&#34;http://onlinebooks.library.upenn.edu/webbin/book/lookupid?key=olbp36384&#34;&gt;Passages from the Life of a Philosopher&lt;/a&gt;&lt;/i&gt;, published in 1864:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&lt;p class=lp&gt;I commenced an examination of a game called &amp;#8220;tit-tat-to&amp;#8221; ... to ascertain what number of combinations were required for all the possible variety of moves and situations.  I found this to be comparatively insignificant. ... A difficulty, however, arose of a novel kind.  When the automaton had to move, it might occur that there were two different moves, each equally conducive to his winning the game. ... Unless, also, some provision were made, the machine would attempt two contradictory motions.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&lt;p class=lp&gt;&#xA;The only real winning move is not to play.&lt;/p&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;</content>
  </entry>
  <entry>
    <title>Crabs, the bitmap terror!</title>
    <id>tag:research.swtch.com,2012:research.swtch.com/crabs</id>
    <link rel="alternate" href="http://research.swtch.com/crabs"></link>
    <published>2008-01-09T00:00:00-05:00</published>
    <updated>2008-01-09T00:00:00-05:00</updated>
    <summary type="text">A destructive, pointless violation of the rules</summary>
    <content type="html">&#xA;&lt;p&gt;&lt;p class=lp&gt;Today, window systems seem as inevitable as hierarchical file systems, a fundamental building block of computer systems.  But it wasn&#39;t always that way.  This paper could only have been written in the beginning, when everything about user interfaces was up for grabs.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&lt;p class=lp&gt;A bitmap screen is a graphic universe where windows, cursors and icons live in harmony, cooperating with each other to achieve functionality and esthetics.  A lot of effort goes into making this universe consistent, the basic law being that every window is a self contained, protected world.  In particular, (1) a window shall not be affected by the internal activities of another window.  (2) A window shall not be affected by activities of the window system not concerning it directly, i.e. (2.1) it shall not notice being obscured (partially or totally) by other windows or obscuring (partially or totally) other windows, (2.2) it shall not see the &lt;i&gt;image&lt;/i&gt; of the cursor sliding on its surface (it can only ask for its position).&lt;/p&gt;&#xA;&#xA;&lt;p class=pp&gt;&#xA;Of course it is difficult to resist the temptation to break these rules.  Violations can be destructive or non-destructive, useful or pointless.  Useful non-destructive violations include programs printing out an image of the screen, or magnifying part of the screen in a &lt;i&gt;lens&lt;/i&gt; window.  Useful destructive violations are represented by the &lt;i&gt;pen&lt;/i&gt; program, which allows one to scribble on the screen.  Pointless non-destructive violations include a magnet program, where a moving picture of a magnet attracts the cursor, so that one has to continuously pull away from it to keep working.  The first pointless, destructive program we wrote was &lt;i&gt;crabs&lt;/i&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p class=lp&gt;As the crabs walk over the screen, they leave gray behind, &amp;#8220;erasing&amp;#8221; the apps underfoot:&lt;/p&gt;&#xA;&lt;blockquote&gt;&lt;img src=&#34;/crabs1.png&#34;&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p class=lp&gt;&#xA;For the rest of the story, see Luca Cardelli&#39;s &amp;#8220;&lt;a style=&#34;font-weight: bold;&#34; href=&#34;http://lucacardelli.name/Papers/Crabs.pdf&#34;&gt;Crabs: the bitmap terror!&lt;/a&gt;&amp;#8221; (6.7MB).  Additional details in &amp;#8220;&lt;a href=&#34;http://lucacardelli.name/Papers/Crabs%20%28History%20and%20Screen%20Dumps%29.pdf&#34;&gt;Crabs (History and Screen Dumps)&lt;/a&gt;&amp;#8221; (57.1MB).&lt;/p&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;</content>
  </entry>
</feed>
