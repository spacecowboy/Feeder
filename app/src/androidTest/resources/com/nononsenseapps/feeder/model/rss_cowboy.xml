<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:webfeeds="http://webfeeds.org/rss/1.0">
    <channel>
        <title>Cowboy Programmer</title>
        <link>https://cowboyprogrammer.org/index.xml</link>
        <description>Recent content on Cowboy Programmer</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>Powered by [Hugo](//gohugo.io) and [Icarus Theme](http://themes.gohugo.io/theme/hugo-icarus/).</copyright>
        <lastBuildDate>Wed, 28 Sep 2016 22:57:21 +0200</lastBuildDate>
        <atom:link href="/index.xml" rel="self" type="application/rss+xml" />


        <webfeeds:icon>https://cowboyprogrammer.org/css/images/logo.png</webfeeds:icon>
        <item>
            <title>Rebooting on wrong password</title>
            <link>https://cowboyprogrammer.org/2016/09/reboot_machine_on_wrong_password/</link>
            <pubDate>Wed, 28 Sep 2016 22:57:21 +0200</pubDate>

            <guid>https://cowboyprogrammer.org/2016/09/reboot_machine_on_wrong_password/</guid>
            <description>


                &lt;p&gt;Having an encrypted hard drive is all well and good, but chances are
                that if someone is gonna steal your laptop, it&amp;rsquo;s probably not going to
                be turned off. Most likely, it will be stolen in a powered-on
                state. And so your encrypted hard drive doesn&amp;rsquo;t increase your security
                at all since it&amp;rsquo;s currently unlocked.&lt;/p&gt;

                &lt;p&gt;In my mind, it&amp;rsquo;s a slight improvement if the computer somehow can
                shutdown if someone is trying to gain access to it. That way, the hard
                drive is no longer accessible and the number of possible attack
                vectors go down drastically. And so, if you type the wrong password 3
                times on my laptop, it shuts down.&lt;/p&gt;

                &lt;p&gt;This is accomplished by using &lt;code&gt;PAM&lt;/code&gt;, and its ability to invoke an
                arbitrary script as part of the login flow via &lt;code&gt;pam_exec.so&lt;/code&gt;. The
                script itself looks like this:&lt;/p&gt;
                &lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;#!/bin/bash&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# Do not add -eu, you need to allow empty variables here!&lt;/span&gt;

                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# To be used with PAM. Look in /etc/pam.d for the script that your&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# screensaver etc uses. Typically it references common-account and common-auth.&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;#&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# In common-auth, add this as the first line&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;#auth       optional     pam_exec.so debug /path/to/wrongpassword.sh&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;#&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# In common-account, add this as the first line&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;#account    required     pam_exec.so debug /path/to/wrongpassword.sh&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;#&lt;/span&gt;

                &lt;span style=&#34;color: #bb60d5&#34;&gt;COUNTFILE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;/var/log/failed_login_count&amp;quot;&lt;/span&gt;

                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# Make sure file exists&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt; ! -f &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;COUNFILE&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;then&lt;/span&gt;
                touch &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;COUNTFILE&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt;
                chmod &lt;span style=&#34;color: #40a070&#34;&gt;777&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;COUNTFILE&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;fi&lt;/span&gt;

                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# Read value in it&lt;/span&gt;
                &lt;span style=&#34;color: #bb60d5&#34;&gt;COUNT&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;$(&lt;/span&gt;cat &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;COUNTFILE&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# Increment it&lt;/span&gt;
                &lt;span style=&#34;color: #bb60d5&#34;&gt;COUNT&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;$((&lt;/span&gt;COUNT+1&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;))&lt;/span&gt;
                &lt;span style=&#34;color: #007020&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;COUNT&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt; &amp;gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;COUNTFILE&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt;

                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# if authentication&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;PAM_TYPE&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;auth&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;then&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# The count will be at 4 after 3 wrong tries&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;COUNT&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt; -ge &lt;span style=&#34;color: #40a070&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;then&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# Shutdown in 1 min&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;#/usr/bin/shutdown --no-wall -h +1&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# This is a hack because the line above gives a segfault in logind&lt;/span&gt;
                &lt;span style=&#34;color: #007020&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &amp;gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;COUNTFILE&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt;
                systemctl poweroff
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;fi&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# If authentication succeeded, and we are now in account phase&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;PAM_TYPE&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;account&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;then&lt;/span&gt;
                &lt;span style=&#34;color: #007020&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &amp;gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;COUNTFILE&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# Cancel shutdown which was just issued&lt;/span&gt;
                shutdown -c
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;fi&lt;/span&gt;

                &lt;span style=&#34;color: #007020&#34;&gt;exit&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

                &lt;p&gt;On my Debian system, PAM ends up looking at &lt;code&gt;/etc/pam.d/common-auth&lt;/code&gt;
                and &lt;code&gt;/etc/pam.d/common-account&lt;/code&gt;. These are invoked in different parts
                of the authentication flow. In &lt;code&gt;common-auth&lt;/code&gt;, add this as the first
                line:&lt;/p&gt;
                &lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code&gt;&lt;span&gt;&lt;/span&gt;auth optional pam_exec.so debug /path/to/wrongpassword.sh
                &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

                &lt;p&gt;And then in &lt;code&gt;common-account&lt;/code&gt;, add this as the first line:&lt;/p&gt;
                &lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code&gt;&lt;span&gt;&lt;/span&gt;account required pam_exec.so debug /path/to/wrongpassword.sh
                &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

                &lt;p&gt;You can try it immediately if it works. Lock your screen, and type the
                wrong password 4 times. If it works, your computer should shut down.&lt;/p&gt;

                &lt;h2 id=&#34;warning-do-not-enable-on-servers&#34;&gt;WARNING: DO NOT ENABLE ON SERVERS&lt;/h2&gt;

                &lt;p&gt;This is &lt;strong&gt;NOT&lt;/strong&gt; something you want to do on any machine. Most notably,
                it&amp;rsquo;s probably a huge mistake to copy this verbatim on a machine which
                accepts remote connections. In that case, you essentially enable
                anyone to DOS you by entering the wrong password via SSH or
                similarly. So don&amp;rsquo;t do this if you allow remote connections to your
                machine (which shouldn&amp;rsquo;t be a thing on a laptop).&lt;/p&gt;



            </description>
        </item>


        <webfeeds:icon>https://cowboyprogrammer.org/css/images/logo.png</webfeeds:icon>
        <item>
            <title>Compress all the images!</title>
            <link>https://cowboyprogrammer.org/2016/08/zopfli_all_the_things/</link>
            <pubDate>Fri, 26 Aug 2016 13:17:40 +0200</pubDate>
            <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cowboyprogrammer.org/images/zopfli_all_the_things.jpg"/>
            <guid>https://cowboyprogrammer.org/2016/08/zopfli_all_the_things/</guid>
            <description>


                &lt;p&gt;&lt;em&gt;Update 2016-11-22: Made the Makefile compatible with BSD sed (MacOS)&lt;/em&gt;&lt;/p&gt;

                &lt;p&gt;One advantage that static sites, such as those built by &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;,
                provide is fast loading times. Because there is no processing to be
                done, no server side rendering, no database lookups, loading times are
                just as fast as you can serve the files that make up the page. This
                means that bandwidth becomes the primary bottleneck, which
                incidentally is
                &lt;a href=&#34;https://webmasters.googleblog.com/2010/04/using-site-speed-in-web-search-ranking.html&#34;&gt;one of the factors used by Google to calculate your search ranking&lt;/a&gt;. See
                also
                &lt;a href=&#34;https://developers.google.com/speed/pagespeed/insights&#34;&gt;Pagespeed Insights&lt;/a&gt;.&lt;/p&gt;

                &lt;h2 id=&#34;compressing-images&#34;&gt;Compressing images&lt;/h2&gt;

                &lt;p&gt;Because the largest pieces of a page typically consist of images, it
                stands to reason that if we can make the images smaller, we can make
                the page load faster. Luckily there exists methods that can compress
                images &lt;em&gt;losslessly&lt;/em&gt;. That means that the quality stays exactly the
                same, the page only loads faster. That seemed like a no-brainer to me
                so I compressed all the images on the site using &lt;a href=&#34;http://advsys.net/ken/utils.htm&#34;&gt;PNGout&lt;/a&gt; as
                &lt;a href=&#34;https://blog.codinghorror.com/getting-the-most-out-of-png/&#34;&gt;advised by Jeff Atwood&lt;/a&gt;. I mean, who doesn&amp;rsquo;t
                like free bandwidth?&lt;/p&gt;

                &lt;p&gt;A new algorithm called &lt;a href=&#34;https://github.com/google/zopfli&#34;&gt;Zopfli&lt;/a&gt; (open sourced by Google,
                &lt;a href=&#34;https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/&#34;&gt;also mentioned by Jeff&lt;/a&gt;) claims even better
                results than PNGout though. Results on this site&amp;rsquo;s images confirm
                those claims. Running the tool on images &lt;em&gt;already compressed by
                PNGout&lt;/em&gt; gives output such as this:&lt;/p&gt;
                &lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code&gt;&lt;span&gt;&lt;/span&gt;./zopflipng --prefix=&amp;quot;zopfli_&amp;quot; static/images/2014/Dec/Screenshot-from-2014-12-29-13-28-29.png
                Optimizing static/images/2014/Dec/Screenshot-from-2014-12-29-13-28-29.png
                Input size: 89420 (87K)
                Result size: 90361 (88K). Percentage of original: 101.052%
                Preserving original PNG since it was smaller

                ./zopflipng --prefix=&amp;quot;zopfli_&amp;quot; static/images/2014/Jun/Jenkins_install_git.png
                Optimizing static/images/2014/Jun/Jenkins_install_git.png
                Input size: 189406 (184K)
                Result size: 166362 (162K). Percentage of original: 87.834%
                Result is smaller

                ./zopflipng --prefix=&amp;quot;zopfli_&amp;quot; static/images/2014/Jun/jenkins_batch.png
                Optimizing static/images/2014/Jun/jenkins_batch.png
                Input size: 21933 (21K)
                Result size: 16255 (15K). Percentage of original: 74.112%
                Result is smaller

                ./zopflipng --prefix=&amp;quot;zopfli_&amp;quot; static/images/2014/Jun/jenkins_build_step.png
                Optimizing static/images/2014/Jun/jenkins_build_step.png
                Input size: 8184 (7K)
                Result size: 6809 (6K). Percentage of original: 83.199%
                Result is smaller

                ./zopflipng --prefix=&amp;quot;zopfli_&amp;quot; static/images/2014/Jun/jenkins_config_git.png
                Optimizing static/images/2014/Jun/jenkins_config_git.png
                Input size: 57897 (56K)
                Result size: 47164 (46K). Percentage of original: 81.462%
                Result is smaller
                &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

                &lt;p&gt;The first result in the example output shows a case where Zopfli would
                actually have made the file bigger (because it was already compressed
                by PNGout, remember). This is nothing you have to worry about because
                it&amp;rsquo;s actually smart enough that it simply copies the original file in
                that case.&lt;/p&gt;

                &lt;p&gt;Comparing to both before any compression, and PNGout, yielded the
                following results:&lt;/p&gt;

                &lt;table&gt;
                &lt;thead&gt;
                &lt;tr&gt;
                &lt;th&gt;&lt;/th&gt;
                &lt;th&gt;Mean relative size&lt;/th&gt;
                &lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;

                &lt;tr&gt;
                &lt;td&gt;Before&lt;/td&gt;
                &lt;td&gt;1.00&lt;/td&gt;
                &lt;/tr&gt;

                &lt;tr&gt;
                &lt;td&gt;PNGout&lt;/td&gt;
                &lt;td&gt;0.84&lt;/td&gt;
                &lt;/tr&gt;

                &lt;tr&gt;
                &lt;td&gt;ZopfliPNG&lt;/td&gt;
                &lt;td&gt;0.77&lt;/td&gt;
                &lt;/tr&gt;

                &lt;/tbody&gt;
                &lt;/table&gt;

                &lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Box_plot&#34;&gt;Box plot&lt;/a&gt; of results on all images:&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/zopfli_boxplot.png&#34; alt=&#34;Compression results&#34; /&gt;&lt;/p&gt;

                &lt;p&gt;Source files: &lt;a href=&#34;https://cowboyprogrammer.org/csv/before.csv&#34;&gt;before.csv&lt;/a&gt;,
                &lt;a href=&#34;https://cowboyprogrammer.org/csv/pngout.csv&#34;&gt;pngout.csv&lt;/a&gt;, &lt;a href=&#34;https://cowboyprogrammer.org/csv/zopfli.csv&#34;&gt;zopfli.csv&lt;/a&gt;&lt;/p&gt;

                &lt;p&gt;And this is with the default arguments. It is possible squeeze yet a
                couple of more bytes out of this if you&amp;rsquo;re willing to wait longer.&lt;/p&gt;

                &lt;h2 id=&#34;automate-it-with-make&#34;&gt;Automate it with Make&lt;/h2&gt;

                &lt;p&gt;Another joy of using a simple static site is that it is possible to
                compose regular tools to do useful things. Tools like
                &lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;Make&lt;/a&gt;. And we can use Make to build the site, as well as
                compressing images which have not already been compressed. You could
                do it manually for each new image that you add of course but be
                honest, you &lt;em&gt;know&lt;/em&gt; that you&amp;rsquo;re gonna forget to do it at some point. So
                let&amp;rsquo;s automate it instead!&lt;/p&gt;

                &lt;p&gt;This is the Makefile that I use to build this site with, note that
                &lt;code&gt;public&lt;/code&gt; depends on &lt;code&gt;$(PNG_SENTINELS)&lt;/code&gt;, so I literally can&amp;rsquo;t forget to
                compress any new images added:&lt;/p&gt;
                &lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #06287e&#34;&gt;.PHONY&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; help build server server-with-drafts clean zopfli

                &lt;span style=&#34;color: #bb60d5&#34;&gt;PNG_SENTINELS&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;$(&lt;/span&gt;shell find . -path ./public -prune -o -name &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;*.png&amp;#39;&lt;/span&gt; -print | sed &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;s|\(.\+/\)\(.\+.png\)|\1.\2.zopfli|g&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;)&lt;/span&gt;

                &lt;span style=&#34;color: #06287e&#34;&gt;help&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;## Print this help text&lt;/span&gt;
                @grep -E &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;^[a-zA-Z_-]+:.*?## .*$$&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;$(&lt;/span&gt;MAKEFILE_LIST&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;)&lt;/span&gt; | awk &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;BEGIN {FS = &amp;quot;:.*?## &amp;quot;}; {printf &amp;quot;\033[36m%-30s\033[0m %s\n&amp;quot;, $$1, $$2}&amp;#39;&lt;/span&gt;

                &lt;span style=&#34;color: #06287e&#34;&gt;server&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;## Run hugo server&lt;/span&gt;
                hugo server

                &lt;span style=&#34;color: #06287e&#34;&gt;server-with-drafts&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;## Run hugo server and include drafts&lt;/span&gt;
                hugo server -D

                &lt;span style=&#34;color: #06287e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; public &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;## Build site (will also compress images using zopfli)&lt;/span&gt;

                &lt;span style=&#34;color: #06287e&#34;&gt;zopfli&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;PNG_SENTINELS&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;## Compress new images using zopfli&lt;/span&gt;

                &lt;span style=&#34;color: #06287e&#34;&gt;clean&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;## Remove the built directory&lt;/span&gt;
                @rm -rf public

                &lt;span style=&#34;color: #06287e&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;PNG_SENTINELS&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;)&lt;/span&gt;
                @rm -rf public
                hugo

                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# Zopfli sentinel rule, assumes zopflipng binary is in the same folder&lt;/span&gt;
                &lt;span style=&#34;color: #06287e&#34;&gt;.%.png.zopfli&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; %.png
                ./zopflipng --prefix&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;zopfli_&amp;quot;&lt;/span&gt; $&amp;lt;
                @mv &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;$(&lt;/span&gt;dir $&amp;lt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;)&lt;/span&gt;zopfli_&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;$(&lt;/span&gt;notdir $&amp;lt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;)&lt;/span&gt; $&amp;lt;
                @touch &lt;span style=&#34;color: #bb60d5&#34;&gt;$@&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

                &lt;p&gt;For best performance, run make with parallel jobs (change 4 to your
                number CPUs): &lt;code&gt;make -j4 zopfli&lt;/code&gt;.&lt;/p&gt;

                &lt;p&gt;To know which files have already been compressed without actually
                running Zopfli on it again (which takes a while), sentinel files are
                created with this pattern: &lt;code&gt;.&amp;lt;imgfilename&amp;gt;.zopfli&lt;/code&gt;.  Thus, the next
                time around, zopfli is only invoked for files which have &lt;em&gt;not&lt;/em&gt; already
                been compressed, making it a one-time operation. And when everything
                has already been compressed, you&amp;rsquo;ll just get this:&lt;/p&gt;
                &lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code&gt;&lt;span&gt;&lt;/span&gt;make: Nothing to be done for &amp;#39;zopfli&amp;#39;.
                &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;




                &lt;hr/&gt;
                &lt;p&gt;Other posts in the &lt;b&gt;Migrating from Ghost to Hugo&lt;/b&gt; series:&lt;/p&gt;


                &lt;ul class=&#34;series&#34;&gt;

                &lt;li&gt;2016-08-26 &amp;mdash;

                Compress all the images!

                &lt;/li&gt;

                &lt;li&gt;2016-07-25 &amp;mdash;

                &lt;a href=&#34;https://cowboyprogrammer.org/2016/07/migrating_from_ghost_to_hugo/&#34;&gt;Migrating from Ghost to Hugo&lt;/a&gt;

                &lt;/li&gt;

                &lt;/ul&gt;


            </description>
        </item>


        <webfeeds:icon>https://cowboyprogrammer.org/css/images/logo.png</webfeeds:icon>
        <item>
            <title>Migrating from Ghost to Hugo</title>
            <link>https://cowboyprogrammer.org/2016/07/migrating_from_ghost_to_hugo/</link>
            <pubDate>Mon, 25 Jul 2016 23:55:38 +0200</pubDate>

            <guid>https://cowboyprogrammer.org/2016/07/migrating_from_ghost_to_hugo/</guid>
            <description>


                &lt;p&gt;So I recently migrated this site from &lt;a href=&#34;https://ghost.org&#34;&gt;Ghost&lt;/a&gt; to &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;
                after reading a nice article about the Hugo in
                &lt;a href=&#34;https://www.linuxvoice.com/download-linux-voice-issue-20/&#34;&gt;Linux Voice #20&lt;/a&gt; (funnily enough, the same issue also
                features an article about Ghost). I originally made the switch to
                Ghost from &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; back in 2014 or so mainly because I could
                not find a good theme to use. Ghost also seemed to have a lot of cool
                features and it&amp;rsquo;s fun to try new things.&lt;/p&gt;

                &lt;p&gt;I think it&amp;rsquo;s safe to say that I am hardly a prolific blogger. I mainly
                write about stuff which I personally cannot find on the web which I
                think should exist, because I will likely need it myself sometime in
                the future. So it&amp;rsquo;s hardly a surprise that I am not in the target
                audience for Ghost.&lt;/p&gt;

                &lt;h2 id=&#34;things-about-ghost-which-annoy-me&#34;&gt;Things about Ghost which annoy me&lt;/h2&gt;

                &lt;ul&gt;
                &lt;li&gt;It&amp;rsquo;s written in NodeJS &amp;mdash; people who think JS is a good server
                language also tend to think that it&amp;rsquo;s a good idea to depend on just
                about any package, and download it in every single build. Which
                becomes really &lt;a href=&#34;http://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/&#34;&gt;funny sometimes&lt;/a&gt;.&lt;/li&gt;
                &lt;li&gt;Poor selection of &lt;a href=&#34;http://marketplace.ghost.org/&#34;&gt;themes&lt;/a&gt; &amp;mdash; this is subjective of
                course, but it seems to me that the free options don&amp;rsquo;t have much in
                terms of diversity. Heck, they even call it a &lt;em&gt;marketplace&lt;/em&gt; which
                rubs me the wrong way.&lt;/li&gt;
                &lt;li&gt;Themes end up being quite reliant on JS if you want necessary
                features like syntax highlighting on code snippets &amp;mdash; I often
                browse with JS disabled and should be able to view my own site.&lt;/li&gt;
                &lt;li&gt;Markdown parser treats newlines as significant &amp;mdash; meaning you can&amp;rsquo;t
                have properly aligned paragraphs in your editor.&lt;/li&gt;
                &lt;/ul&gt;

                &lt;p&gt;That last point irritates me deeply but it&amp;rsquo;s not as bad as the next point.&lt;/p&gt;

                &lt;ul&gt;
                &lt;li&gt;You can effectively lock an account by entering the wrong password 3
                times.&lt;/li&gt;
                &lt;/ul&gt;

                &lt;p&gt;This requires some explanation. So Ghost, targeting teams of bloggers
                really, naturally have an account system much like Wordpress. Now, as
                I was surveying the security status of other services I am running, I
                was wondering how Ghost handled someone trying to brute force your
                account and decided to simply try it out. Type the wrong password once
                too many, and this happens:&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/ghost_wrong_password.png&#34; alt=&#34;Ghost: typing the wrong password too many times locks your account&#34; /&gt;&lt;/p&gt;

                &lt;p&gt;It doesn&amp;rsquo;t lock it for a single IP address (I tried from several), it
                locks the entire account.  Effectively, someone can just set up a
                script to try an account indefinitely simply with the intention to
                block someone from logging in.&lt;/p&gt;

                &lt;p&gt;The log doesn&amp;rsquo;t even show login attempts, so there is no way to
                implement sensible blocking strategies using something like &lt;a href=&#34;http://www.fail2ban.org&#34;&gt;fail2ban&lt;/a&gt;.&lt;/p&gt;

                &lt;p&gt;The whole thing left a bad taste my mouth so it was a very suitable timing to read an article on &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;.&lt;/p&gt;

                &lt;h2 id=&#34;things-about-hugo-which-excite-me&#34;&gt;Things about Hugo which excite me&lt;/h2&gt;

                &lt;ul&gt;
                &lt;li&gt;Markdown parser treats newlines correctly&lt;/li&gt;
                &lt;li&gt;It&amp;rsquo;s a static site generator and not a service &amp;mdash; this meant 100MB
                (10%) of RAM became available on my server and there is no account
                to hack (or block).&lt;/li&gt;
                &lt;li&gt;Supports everything of Ghost (that I am aware of).&lt;/li&gt;
                &lt;li&gt;The simplicity of Hugo makes it &lt;a href=&#34;https://npf.io/2014/08/making-it-a-series/&#34;&gt;quite painless&lt;/a&gt; to
                do useful things compared to
                &lt;a href=&#34;https://github.com/TryGhost/Ghost/issues/4818&#34;&gt;ignored feature requests&lt;/a&gt; for the same in Ghost.&lt;/li&gt;
                &lt;li&gt;Can do server side syntax highlighting using Pygments.&lt;/li&gt;
                &lt;li&gt;Some really nice &lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;themes&lt;/a&gt; are available, and they are
                all free.&lt;/li&gt;
                &lt;/ul&gt;

                &lt;h2 id=&#34;migrating-all-data-from-ghost&#34;&gt;Migrating all data from Ghost&lt;/h2&gt;

                &lt;p&gt;Migrating from Ghost also turned about to be really painless. There
                were several scripts around for exactly this but they all turned out
                to be written in &lt;a href=&#34;https://gist.github.com/vjeantet/d1f6cf824a2344dd6b4e&#34;&gt;odd languages&lt;/a&gt;, and did not actually
                migrate all the metadata in Ghost. So I wrote my own in Python with
                these &lt;em&gt;killer features&lt;/em&gt;:&lt;/p&gt;

                &lt;ul&gt;
                &lt;li&gt;Migrates tags.&lt;/li&gt;
                &lt;li&gt;Migrates dates.&lt;/li&gt;
                &lt;li&gt;Migrates drafts as drafts.&lt;/li&gt;
                &lt;li&gt;Creates aliases in your posts which makes sure that old permalinks
                will still work!&lt;/li&gt;
                &lt;li&gt;Migrates cover pictures as banner images, just select a theme which
                support them.&lt;/li&gt;
                &lt;li&gt;Rewrites all relative links so they all still work (this includes
                images).&lt;/li&gt;
                &lt;li&gt;Code blocks with language definitions like &lt;code&gt;```language-java&lt;/code&gt;
                are changed to &lt;code&gt;```java&lt;/code&gt;.&lt;/li&gt;
                &lt;/ul&gt;
                &lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;#!/usr/bin/env python3&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0; font-style: italic&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0; font-style: italic&#34;&gt;A simple program which migrates an exported Ghost blog to Hugo.&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0; font-style: italic&#34;&gt;It assumes your blog is using the hugo-icarus theme, but should&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0; font-style: italic&#34;&gt;work for any theme. The script will migrate your posts, including&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0; font-style: italic&#34;&gt;tags and banner images. Furthermore, it will make sure that&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0; font-style: italic&#34;&gt;all your old post urls will keep working by adding aliases to them.&lt;/span&gt;

                &lt;span style=&#34;color: #4070a0; font-style: italic&#34;&gt;The only thing you need to do yourself is copying the `images/`&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0; font-style: italic&#34;&gt;directory in your ghost directory to `static/images/` in your hugo&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0; font-style: italic&#34;&gt;directory. That way, all images will work. The script will rewrite&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0; font-style: italic&#34;&gt;all urls linking to `/content/images` to just `/images`.&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0; font-style: italic&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;argparse&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;json&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;datetime&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;import&lt;/span&gt; date
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;os&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;import&lt;/span&gt; path
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;import&lt;/span&gt; defaultdict
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;re&lt;/span&gt;

                _post &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0&#34;&gt;+++&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0&#34;&gt;date = &amp;quot;{date}&amp;quot;&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0&#34;&gt;draft = {draft}&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0&#34;&gt;title = &amp;quot;&amp;quot;&amp;quot;{title}&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0&#34;&gt;slug = &amp;quot;{slug}&amp;quot;&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0&#34;&gt;tags = {tags}&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0&#34;&gt;banner = &amp;quot;{banner}&amp;quot;&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0&#34;&gt;aliases = {aliases}&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0&#34;&gt;+++&lt;/span&gt;

                &lt;span style=&#34;color: #4070a0&#34;&gt;{markdown}&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;


                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;migrate&lt;/span&gt;(filepath, hugodir):
                &lt;span style=&#34;color: #4070a0; font-style: italic&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0; font-style: italic&#34;&gt;    Parse the Ghost json file and write post files&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0; font-style: italic&#34;&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;open&lt;/span&gt;(filepath, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;) &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;as&lt;/span&gt; fp:
                ghost &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; json&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;load(fp)

                data &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; ghost[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;db&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;]

                tags &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {}
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt; tag &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;in&lt;/span&gt; data[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;]:
                tags[tag[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;]] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; tag[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;]

                posttags &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; defaultdict(&lt;span style=&#34;color: #007020&#34;&gt;list&lt;/span&gt;)

                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt; posttag &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;in&lt;/span&gt; data[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;posts_tags&amp;quot;&lt;/span&gt;]:
                posttags[posttag[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;post_id&amp;quot;&lt;/span&gt;]]&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;append(tags[posttag[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;tag_id&amp;quot;&lt;/span&gt;]])

                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt; post &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;in&lt;/span&gt; data[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;posts&amp;#39;&lt;/span&gt;]:
                draft &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; post[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;status&amp;quot;&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;draft&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt;
                ts &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;int&lt;/span&gt;(post[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;]) &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;1000&lt;/span&gt;

                banner &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; post[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;image&amp;quot;&lt;/span&gt;] &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;else&lt;/span&gt; post[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;image&amp;quot;&lt;/span&gt;]
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# /content/ should not be part of uri anymore&lt;/span&gt;
                banner &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;sub(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;^.*/content[s]?/&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;, banner)

                target &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; path&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;join(hugodir, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;content/post&amp;quot;&lt;/span&gt;,
                &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;{}.md&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;format(post[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;slug&amp;quot;&lt;/span&gt;]))

                aliases &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;/{}/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;format(post[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;slug&amp;quot;&lt;/span&gt;])]

                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Migrating &amp;#39;{}&amp;#39; to {}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;format(post[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;],
                target))

                hugopost &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; _post&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;format(markdown&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;post[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;markdown&amp;quot;&lt;/span&gt;],
                title&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;post[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;],
                draft&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;draft,
                slug&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;post[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;slug&amp;quot;&lt;/span&gt;],
                date&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;date&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;fromtimestamp(ts)&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;isoformat(),
                tags&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;posttags[post[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;]],
                banner&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;banner,
                aliases&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;aliases)

                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# this is no longer relevant&lt;/span&gt;
                hugopost &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; hugopost&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;```language-&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;```&amp;quot;&lt;/span&gt;)
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# /content/ should not be part of uri anymore&lt;/span&gt;
                hugopost &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; hugopost&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;/content/&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;)
                hugopost &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;sub(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;^.*/content[s]?/&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;, hugopost)

                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;open&lt;/span&gt;(target, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;as&lt;/span&gt; fp:
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;print&lt;/span&gt;(hugopost, &lt;span style=&#34;color: #007020&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;fp)


                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;main&lt;/span&gt;():
                parser &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; argparse&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;ArgumentParser(
                description&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Migrate an exported Ghost blog to Hugo&amp;quot;&lt;/span&gt;)
                req &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; parser&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;add_argument_group(title&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;required arguments&amp;quot;&lt;/span&gt;)
                req&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;add_argument(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;-f&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;--file&amp;quot;&lt;/span&gt;, help&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;JSON file exported from Ghost&amp;quot;&lt;/span&gt;,
                required&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;True&lt;/span&gt;)
                req&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;add_argument(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;-d&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;--dir&amp;quot;&lt;/span&gt;, help&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Directory (root) of Hugo site&amp;quot;&lt;/span&gt;,
                required&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;True&lt;/span&gt;)

                args &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; parser&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;parse_args()

                migrate(args&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;file, args&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;dir)


                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #bb60d5&#34;&gt;__name__&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;:
                main()
                &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

                &lt;p&gt;Next post, I might write about what changes I made to the theme, and
                some nifty Nginx tricks you can use to stay compatible with old links.&lt;/p&gt;




                &lt;hr/&gt;
                &lt;p&gt;Other posts in the &lt;b&gt;Migrating from Ghost to Hugo&lt;/b&gt; series:&lt;/p&gt;


                &lt;ul class=&#34;series&#34;&gt;

                &lt;li&gt;2016-08-26 &amp;mdash;

                &lt;a href=&#34;https://cowboyprogrammer.org/2016/08/zopfli_all_the_things/&#34;&gt;Compress all the images!&lt;/a&gt;

                &lt;/li&gt;

                &lt;li&gt;2016-07-25 &amp;mdash;

                Migrating from Ghost to Hugo

                &lt;/li&gt;

                &lt;/ul&gt;


            </description>
        </item>


        <webfeeds:icon>https://cowboyprogrammer.org/css/images/logo.png</webfeeds:icon>
        <item>
            <title>Set refresh rate of screen from script</title>
            <link>https://cowboyprogrammer.org/2016/05/set-refresh-rate-of-screen-from-script/</link>
            <pubDate>Wed, 18 May 2016 00:00:00 +0000</pubDate>

            <guid>https://cowboyprogrammer.org/2016/05/set-refresh-rate-of-screen-from-script/</guid>
            <description>
                &lt;p&gt;Getting a great new 100 Hz Ultra Wide monitor does not come without its share of tweaking. So it turns out that the refresh you set on your monitor in Nvidia settings (as explained in a &lt;a href=&#34;https://cowboyprogrammer.org/nvidia-gsync-on-linux/&#34;&gt;previous post&lt;/a&gt; does not apply to all the display ports. They apparently count as different screens with different settings or something.&lt;/p&gt;

                &lt;p&gt;So, here&amp;rsquo;s a handy script which you can add to your window manager&amp;rsquo;s autostart applications to set the refresh rate and resolution of your screen, regardless of which actual port you use:&lt;/p&gt;
                &lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;#!/bin/bash -eu&lt;/span&gt;
                &lt;span style=&#34;color: #bb60d5&#34;&gt;RES&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;3440x1440&amp;quot;&lt;/span&gt;
                &lt;span style=&#34;color: #bb60d5&#34;&gt;RR&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;100&amp;quot;&lt;/span&gt;

                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# Do for every output, so that it doesn&amp;#39;t matter where you plug in&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# your monitor.&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt; output in &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;$(&lt;/span&gt;xrandr | grep &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;DP-&amp;quot;&lt;/span&gt; | sed -e &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;s/\(DP-.\).*/\1/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;)&lt;/span&gt;; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;do&lt;/span&gt;
                &lt;span style=&#34;color: #007020&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Trying to set mode on &lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$output&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; xrandr --output &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$output&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt; --mode &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$RES&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt; -r &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$RR&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt;; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;then&lt;/span&gt;
                &lt;span style=&#34;color: #007020&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Success: &lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$RES&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$RR&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt; Hz set on &lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$output&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;fi&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;done&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

                &lt;p&gt;It iterates over all the display ports on your graphics card, so it doesn&amp;rsquo;t matter where you plug your monitor in.&lt;/p&gt;

                &lt;p&gt;In XFCE, you&amp;rsquo;d add this script to &lt;em&gt;Application Autostart&lt;/em&gt;:&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2016/05/Session-and-Startup_033.png&#34; alt=&#34;XFCE Application Autostart&#34; /&gt;&lt;/p&gt;




                &lt;hr/&gt;
                &lt;p&gt;Other posts in the &lt;b&gt;Linux 100Hz gaming&lt;/b&gt; series:&lt;/p&gt;


                &lt;ul class=&#34;series&#34;&gt;

                &lt;li&gt;2016-05-18 &amp;mdash;

                Set refresh rate of screen from script

                &lt;/li&gt;

                &lt;li&gt;2016-03-05 &amp;mdash;

                &lt;a href=&#34;https://cowboyprogrammer.org/2016/03/nvidia-gsync-on-linux/&#34;&gt;Nvidia G-Sync and Linux&lt;/a&gt;

                &lt;/li&gt;

                &lt;/ul&gt;


            </description>
        </item>


        <webfeeds:icon>https://cowboyprogrammer.org/css/images/logo.png</webfeeds:icon>
        <item>
            <title>Fixing the up button in Python shell history</title>
            <link>https://cowboyprogrammer.org/2016/04/fixing-the-up-button-in-python-shell-history/</link>
            <pubDate>Sat, 02 Apr 2016 00:00:00 +0000</pubDate>

            <guid>https://cowboyprogrammer.org/2016/04/fixing-the-up-button-in-python-shell-history/</guid>
            <description>
                &lt;p&gt;In case your python/ipython shell doesn&amp;rsquo;t have a working history, e.g. pressing &amp;#8593; only prints some nonsensical &lt;code&gt;^[[A&lt;/code&gt;, then you are missing either the &lt;code&gt;readline&lt;/code&gt; or &lt;code&gt;ncurses&lt;/code&gt; library.&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2016/04/Selection_021.png&#34; alt=&#34;Python shell where up doesn&#39;t work&#34; /&gt;&lt;/p&gt;

                &lt;p&gt;Ipython is more descriptive that something is wrong, but if you&amp;rsquo;re in the habit of mostly using python as a quick calculator, you might never notice:&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2016/04/Selection_022.png&#34; alt=&#34;iPython shell where up doesn&#39;t work&#34; /&gt;&lt;/p&gt;

                &lt;p&gt;If you&amp;rsquo;re using &lt;a href=&#34;http://conda.pydata.org/miniconda.html&#34;&gt;Miniconda&lt;/a&gt; then just do:&lt;/p&gt;

                &lt;pre&gt;&lt;code&gt;conda install ncurses readline
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;And &amp;#8593; should work:&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2016/04/Selection_023.png&#34; alt=&#34;iPython with working up&#34; /&gt;&lt;/p&gt;



            </description>
        </item>


        <webfeeds:icon>https://cowboyprogrammer.org/css/images/logo.png</webfeeds:icon>
        <item>
            <title>Nvidia G-Sync and Linux</title>
            <link>https://cowboyprogrammer.org/2016/03/nvidia-gsync-on-linux/</link>
            <pubDate>Sat, 05 Mar 2016 00:00:00 +0000</pubDate>

            <guid>https://cowboyprogrammer.org/2016/03/nvidia-gsync-on-linux/</guid>
            <description>


                &lt;p&gt;After getting a fancy new monitor with G-Sync support, I was eager to try it out in my Linux gaming setup. While Nvidia fully supports G-Sync in their Linux drivers, it turns out that other components of the system can get in the way. As explained by a &lt;a href=&#34;https://devtalk.nvidia.com/default/topic/854184/gsync-is-not-working/?offset=1&#34;&gt;post on the Nvidia forums&lt;/a&gt;:&lt;/p&gt;

                &lt;blockquote&gt;
                &lt;p&gt;For G-SYNC to work, the application has to be able to flip and the symptoms you&amp;rsquo;re describing here sound like it&amp;rsquo;s not able to flip in your configuration. There are a variety of reasons why flipping might not be working, but the most likely culprits here are either the compositor getting in the way, or the game not being completely full-screen. The full-screen requirement includes the game being completely unoccluded, so if your window manager is drawing something on top of the game, even just by one pixel, it will prevent flipping. Full-screen also means that it has to cover the entire X screen, which includes both monitors if you have them both enabled.&lt;/p&gt;

                &lt;p&gt;Can you please try a different window manager / desktop environment to see if the behavior changes?&lt;/p&gt;
                &lt;/blockquote&gt;

                &lt;p&gt;Since only a minority of PC-gamers are actually on Linux, and only a minority of those actually have G-Sync capable monitors, Googling for assistance was&amp;hellip; challenging. So, for any other Linux gamers out there, here is a short guide on how to enable G-Sync and verify that it works. Some of the steps are XFCE specific, as this is my window manager of choice on my gaming PC. If you are using a different window manager, you&amp;rsquo;ll have to look through your options to find the equivalent settings.&lt;/p&gt;

                &lt;h2 id=&#34;nvidia-settings&#34;&gt;Nvidia settings&lt;/h2&gt;

                &lt;ul&gt;
                &lt;li&gt;Sync to VBlank: Optional&lt;/li&gt;
                &lt;li&gt;Allow Flipping: Required&lt;/li&gt;
                &lt;li&gt;Allow G-SYNC: Required&lt;/li&gt;
                &lt;li&gt;Enable G-SYNC Visual Indicator: Optional&lt;/li&gt;
                &lt;/ul&gt;

                &lt;p&gt;The only two required settings are &lt;em&gt;flipping&lt;/em&gt; and &lt;em&gt;G-Sync&lt;/em&gt;, the others are optional. Enabling &lt;em&gt;Sync to VBlank&lt;/em&gt; (VSync) in combination with G-Sync only prevents the GPU from generating an FPS beyond your monitor&amp;rsquo;s max refresh rate (which you can&amp;rsquo;t see anyway). It is turned off below the max refresh rate when G-Sync is enabled.&lt;/p&gt;

                &lt;p&gt;The visual indicator is useful here to see that G-Sync is working. If all goes well, you should see a green &amp;ldquo;G-SYNC&amp;rdquo; text in the corner when running a game.&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2016/03/NVIDIA-X-Server-Settings_007.png&#34; alt=&#34;Nvidia settings&#34; /&gt;&lt;/p&gt;

                &lt;h2 id=&#34;disable-compositor&#34;&gt;Disable compositor&lt;/h2&gt;

                &lt;p&gt;As mentioned in the forum post, a compositor will prevent G-Sync from activating because essentially something is rendering above the game. The same reason prevents G-Sync from working in Window mode (unlike Windows, where G-Sync does not require fullscreen).&lt;/p&gt;

                &lt;p&gt;For XFCE, go to &lt;em&gt;Window Manager Tweaks&lt;/em&gt; under &lt;em&gt;Settings&lt;/em&gt;
                &lt;img src=&#34;https://cowboyprogrammer.org/images/2016/03/Selection_004.png&#34; alt=&#34;XFCE Settings&#34; /&gt;&lt;/p&gt;

                &lt;p&gt;Then under the &lt;em&gt;Compositor&lt;/em&gt; tab, make sure the compositor is disabled
                &lt;img src=&#34;https://cowboyprogrammer.org/images/2016/03/Selection_005.png&#34; alt=&#34;Window Manager Tweaks&#34; /&gt;&lt;/p&gt;

                &lt;p&gt;In addition, depending on your setup, make sure you don&amp;rsquo;t have things like &lt;a href=&#34;https://wiki.archlinux.org/index.php/Compton&#34;&gt;Compton&lt;/a&gt; or &lt;a href=&#34;https://wiki.archlinux.org/index.php/Compiz&#34;&gt;Compiz&lt;/a&gt; enabled.&lt;/p&gt;

                &lt;h2 id=&#34;start-a-game-in-fullscreen&#34;&gt;Start a game  in fullscreen&lt;/h2&gt;

                &lt;p&gt;As mentioned, you must run the game in fullscreen mode. G-Sync does not work with window mode in Linux.&lt;/p&gt;

                &lt;p&gt;I did notice that there are games which do not enable G-Sync. One example is &amp;ldquo;Cities: Skylines&amp;rdquo;. So make sure to try several games if you don&amp;rsquo;t see the G-Sync logo.&lt;/p&gt;

                &lt;p&gt;A good candidate here is Dota 2 since it is free to play. Dota 2 running in &amp;ldquo;Desktop-Friendly Fullscreen&amp;rdquo; does enable G-Sync. As does Portal 2 and XCOM 2.&lt;/p&gt;




                &lt;hr/&gt;
                &lt;p&gt;Other posts in the &lt;b&gt;Linux 100Hz gaming&lt;/b&gt; series:&lt;/p&gt;


                &lt;ul class=&#34;series&#34;&gt;

                &lt;li&gt;2016-05-18 &amp;mdash;

                &lt;a href=&#34;https://cowboyprogrammer.org/2016/05/set-refresh-rate-of-screen-from-script/&#34;&gt;Set refresh rate of screen from script&lt;/a&gt;

                &lt;/li&gt;

                &lt;li&gt;2016-03-05 &amp;mdash;

                Nvidia G-Sync and Linux

                &lt;/li&gt;

                &lt;/ul&gt;


            </description>
        </item>


        <webfeeds:icon>https://cowboyprogrammer.org/css/images/logo.png</webfeeds:icon>
        <item>
            <title>Encrypt a BTRFS RAID5-array in-place</title>
            <link>https://cowboyprogrammer.org/2014/12/encrypt-a-btrfs-raid5-array-in-place/</link>
            <pubDate>Sun, 28 Dec 2014 00:00:00 +0000</pubDate>

            <guid>https://cowboyprogrammer.org/2014/12/encrypt-a-btrfs-raid5-array-in-place/</guid>
            <description>


                &lt;p&gt;When I decided I needed more disk space for media and virtual machine (VM) images, I decided to throw some more money at the problem and get three 3TB hard drives and run &lt;a href=&#34;https://btrfs.wiki.kernel.org/index.php/Main_Page&#34;&gt;BTRFS&lt;/a&gt; in &lt;a href=&#34;http://en.wikipedia.org/wiki/RAID#Standard_levels&#34;&gt;RAID5&lt;/a&gt;. It&amp;rsquo;s still somewhat experimental, but has proven very solid for me.&lt;/p&gt;

                &lt;p&gt;RAID5 means that one drive can completely fail, but all the data is still intact. All one has to do is insert a new drive and the drive will be reconstructed. While RAID5 protects against a complete drive failure, it does nothing to prevent a single bit to be flipped to due cosmic rays or electricity spikes.&lt;/p&gt;

                &lt;p&gt;BTRFS is a new filesystem for Linux which does what ZFS does for BSD. The two important features which it offers over previous systems is: copy-on-write (COW), and bitrot protection. See, when running RAID with BTRFS, if a single bit is flipped, BTRFS will detect it when you try to read the file and correct it (if running in RAID so there&amp;rsquo;s redundancy). COW means you can take snapshots of the entire drive instantly without using extra space. Space will only be required when stuff change and diverge from your snapshots.&lt;/p&gt;

                &lt;p&gt;See &lt;a href=&#34;http://arstechnica.com/information-technology/2014/01/bitrot-and-atomic-cows-inside-next-gen-filesystems/&#34;&gt;Arstechnica&lt;/a&gt; for why &lt;em&gt;BTRFS&lt;/em&gt; is da shit for your next drive or system.&lt;/p&gt;

                &lt;p&gt;What I did not do at the time was encrypt the drives. &lt;a href=&#34;http://www.linuxvoice.com/&#34;&gt;Linux Voice #11&lt;/a&gt; had a very nice article on encryption so I thought I&amp;rsquo;d set it up. And because I&amp;rsquo;m using RAID5, it is actually possible for me to encrypt my drives using &lt;a href=&#34;https://wiki.archlinux.org/index.php/Dm-crypt/Device_encryption&#34;&gt;dm-crypt/LUKS&lt;/a&gt; in-place, while the whole shebang is mounted, readable and usable :)&lt;/p&gt;

                &lt;p&gt;Some initial mistakes meant I had to actually reboot the system, so I thought I&amp;rsquo;d write down how to do it correctly. So to summarize, the goal is to convert three disks to three encrypted disks. BTRFS will be moved from using the drives directly, to using the LUKS-mapped.&lt;/p&gt;

                &lt;h3 id=&#34;unmount-the-raid-system-time-1-second&#34;&gt;Unmount the raid system (time 1 second)&lt;/h3&gt;

                &lt;p&gt;Sadly, we need to unmount the volume to be able to &amp;ldquo;remove&amp;rdquo; the drive. This needs to be done so the system can understand that the drive has &amp;ldquo;vanished&amp;rdquo;. It will only stay unmounted for about a minute though.&lt;/p&gt;

                &lt;pre&gt;&lt;code&gt;sudo umount /path/to/vol
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;This is assuming you have configured your &lt;strong&gt;fstab&lt;/strong&gt; with all the details. For example, with something like this (ALWAYS USE UUID!!)&lt;/p&gt;

                &lt;pre&gt;&lt;code&gt;# BTRFS Systems
                UUID=&amp;quot;ac21dd50-e6ee-4a9e-abcd-459cba0e6913&amp;quot; /mnt/btrfs  btrfs   defaults       0        0
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Note that no modification of the &lt;strong&gt;fstab&lt;/strong&gt; will be necessary if you have used UUID.&lt;/p&gt;

                &lt;h3 id=&#34;encrypt-one-of-the-drives-time-10-seconds&#34;&gt;Encrypt one of the drives (time 10 seconds)&lt;/h3&gt;

                &lt;p&gt;Pick one of the drives to encrypt. Here it&amp;rsquo;s &lt;code&gt;/dev/sdc&lt;/code&gt;:&lt;/p&gt;

                &lt;pre&gt;&lt;code&gt;sudo cryptsetup luksFormat -v /dev/sdc
                &lt;/code&gt;&lt;/pre&gt;

                &lt;h3 id=&#34;open-the-encrypted-drive-time-30-seconds&#34;&gt;Open the encrypted drive (time 30 seconds)&lt;/h3&gt;

                &lt;p&gt;To use it, we have to open the drive. You can pick any name you want:&lt;/p&gt;

                &lt;pre&gt;&lt;code&gt;sudo cryptsetup luksOpen /dev/sdc DRIVENAME
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;To make this happen on boot, find the new &lt;em&gt;UUID&lt;/em&gt; of &lt;code&gt;/dev/sdc&lt;/code&gt; with &lt;code&gt;blkid&lt;/code&gt;:&lt;/p&gt;

                &lt;pre&gt;&lt;code&gt;sudo blkid
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2014/Dec/Screenshot-from-2014-12-29-13-28-29.png&#34; alt=&#34;Output of blkid&#34; /&gt;&lt;/p&gt;

                &lt;p&gt;So for me, the drive has a the following &lt;em&gt;UUID:&lt;/em&gt; &lt;code&gt;f5d3974c-529e-4574-bbfa-7f3e6db05c65&lt;/code&gt;. Add the following line to &lt;code&gt;/etc/crypttab&lt;/code&gt; with your desired drive name and your &lt;em&gt;UUID&lt;/em&gt; (without any quotes):&lt;/p&gt;

                &lt;pre&gt;&lt;code&gt;DRIVENAME   UUID=your-uuid-without-quotes   none    luks
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Now the system will ask for your password on boot.&lt;/p&gt;

                &lt;h3 id=&#34;add-the-encrypted-drive-to-the-raid-time-20-seconds&#34;&gt;Add the encrypted drive to the raid (time 20 seconds)&lt;/h3&gt;

                &lt;p&gt;First we have to remount the raid system. This will fail because there is a missing drive, unless we add the option &lt;em&gt;degraded&lt;/em&gt;.&lt;/p&gt;

                &lt;pre&gt;&lt;code&gt;sudo mount -o degraded /path/to/vol
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;There will be some complaints about missing drives and such, which is exactly what we expect. Now, just add the new drive:&lt;/p&gt;

                &lt;pre&gt;&lt;code&gt;sudo btrfs device add /dev/mapper/DRIVENAME /path/to/vol
                &lt;/code&gt;&lt;/pre&gt;

                &lt;h3 id=&#34;remove-the-missing-drive-time-14-hours&#34;&gt;Remove the missing drive (time 14 hours)&lt;/h3&gt;

                &lt;p&gt;The final step is to remove the old drive. We can use the special name &lt;em&gt;missing&lt;/em&gt; to remove it:&lt;/p&gt;

                &lt;pre&gt;&lt;code&gt;sudo btrfs device delete missing /path/to/vol
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;This can take a really long time, and by long I mean ~15 hours if you have a terrabyte of data. But, you can still use the drive during this process so just be patient.&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2014/Dec/Screenshot-from-2014-12-29-12-48-45.png&#34; alt=&#34;Balance took 14 hours&#34; /&gt;&lt;/p&gt;

                &lt;p&gt;For me it took 14 hours 34 minutes. The reason for the delay is because the &lt;em&gt;delete&lt;/em&gt; command will force the system to rebuild the missing drive on your new encrypted volume.&lt;/p&gt;

                &lt;h3 id=&#34;next-drive-rinse-and-repeat&#34;&gt;Next drive, rinse and repeat&lt;/h3&gt;

                &lt;p&gt;Just unmount the raid, encrypt the drive, add it back and delete the missing. Repeat for all drives in your array. Once the last drive is done, unmount the array and remount it without the &lt;code&gt;-o degraded&lt;/code&gt; option. Now you have an encrypted RAID array.&lt;/p&gt;



            </description>
        </item>


        <webfeeds:icon>https://cowboyprogrammer.org/css/images/logo.png</webfeeds:icon>
        <item>
            <title>Making an RSS reader app</title>
            <link>https://cowboyprogrammer.org/2014/08/making-an-rss-reader-app/</link>
            <pubDate>Thu, 28 Aug 2014 00:00:00 +0000</pubDate>

            <guid>https://cowboyprogrammer.org/2014/08/making-an-rss-reader-app/</guid>
            <description>


                &lt;p&gt;So I&amp;rsquo;ve been busy building my own RSS reader for the last few weeks. My motivation to make this app is because I got angry at &lt;em&gt;gReader&lt;/em&gt; for displaying fullscreen-ads. The source is available on &lt;a href=&#34;https://github.com/spacecowboy/Feeder&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

                &lt;p&gt;I started with an idea of targeting &lt;em&gt;Android-L&lt;/em&gt;, but because it&amp;rsquo;s only in preview any app targeting &lt;em&gt;L&lt;/em&gt; will be completely incompatible with earler versions. Hence I was forced to refrain from using the new RecyclerView which I really liked. In general I&amp;rsquo;ve been stealing as much code as possible from the &lt;a href=&#34;https://github.com/google/iosched&#34;&gt;Google-IO app&lt;/a&gt;.&lt;/p&gt;

                &lt;p&gt;It&amp;rsquo;s early still, but here are two screenshots of current progress:&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2014/Aug/Screenshot_2014-08-28-15-02-40.png&#34; alt=&#34;Feeds with tags&#34; width=50% /&gt;&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2014/Aug/Screenshot_2014-08-28-15-03-21.png&#34; alt=&#34;Reader activity&#34; width=50% /&gt;&lt;/p&gt;

                &lt;p&gt;To parse RSS feeds I have &lt;a href=&#34;https://github.com/spacecowboy/Simplistic-RSS&#34;&gt;forked Simplistic-RSS&lt;/a&gt; by &lt;a href=&#34;https://github.com/ShirwaM/Simplistic-RSS&#34;&gt;ShirwaM&lt;/a&gt;. To display images I am using &lt;a href=&#34;http://square.github.io/picasso/&#34;&gt;Picasso by Square&lt;/a&gt; (awesome library). I don&amp;rsquo;t have any intention of uploading this app to the Play store at this time, at least not until I feel that it is fairly stable and feature complete. I am building it all for myself as this is the only kind of app which I actually use everyday. I figure I can talk about the difficulties that I encounter and how to solve them. So today&amp;rsquo;s topic will be:&lt;/p&gt;

                &lt;h2 id=&#34;displaying-formatted-text-with-images&#34;&gt;Displaying formatted text with images&lt;/h2&gt;

                &lt;p&gt;RSS feeds generally have stories formatted in HTML. For example, see the &lt;a href=&#34;http://cowboyprogrammer.org/rss/&#34;&gt;RSS feed of this blog&lt;/a&gt;. This is good because it means all we need to do is decode it and display it. You could use a WebView, but that would be unacceptably ugly and disgusting for an app of mine. A nicer solution is to use a normal TextView. You can actually format HTML easily and display it with:&lt;/p&gt;
                &lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code&gt;&lt;span&gt;&lt;/span&gt;textview&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;setText&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;android&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;Html&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;fromHtml&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;htmlString&lt;span style=&#34;color: #666666&#34;&gt;));&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

                &lt;p&gt;This simple act gets you most of the way. Here&amp;rsquo;s what a story looks like with this:&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2014/Aug/Screenshot_2014-08-28-15-27-44_photo.png&#34; alt=&#34;Using just fromHtml img&#34; width=50% /&gt;&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2014/Aug/Screenshot_2014-08-28-15-28-08_code_bad.png&#34; alt=&#34;Using just fromHtml code&#34; width=50% /&gt;&lt;/p&gt;

                &lt;p&gt;Notice that in the first image, the image is missing and you don&amp;rsquo;t see that there is a list in the beginning. In the second image, the source code has no special formatting and it&amp;rsquo;s hard to tell when it starts or stops.&lt;/p&gt;

                &lt;p&gt;&lt;em&gt;fromHtml&lt;/em&gt; is great, but it is missing functionality to handle some tags. Lucky for us, it is possible to hand it some tagHandlers for those cases. Because I am downloading images, I do the formatting in a background thread using a Loader. To this end I created the &lt;a href=&#34;https://github.com/spacecowboy/Feeder/blob/master/app/src/main/java/com/nononsenseapps/feeder/model/ImageTextLoader.java&#34;&gt;ImageTextLoader&lt;/a&gt;. What it does instead is:&lt;/p&gt;
                &lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code&gt;&lt;span&gt;&lt;/span&gt;android&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;Html&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;fromHtml&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;text&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; imageHandler&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; TagHandler&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

                &lt;p&gt;Where the imageHandler is really simple (notice that I use Picasso to get the image from the network):&lt;/p&gt;
                &lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code&gt;&lt;span&gt;&lt;/span&gt;imgThing &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; Html&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;ImageGetter&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/**&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;     * This methos is called when the HTML parser encounters an&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;     * &amp;lt;img&amp;gt; tag.  The &amp;lt;code&amp;gt;source&amp;lt;/code&amp;gt; argument is the&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;     * string from the &amp;quot;src&amp;quot; attribute; the return value should be&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;     * a Drawable representation of the image or &amp;lt;code&amp;gt;null&amp;lt;/code&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;     * for a generic replacement image.  Make sure you call&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;     * setBounds() on your Drawable if it doesn&amp;#39;t already have&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;     * its bounds set.&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;     *&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;     * @param source&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;     */&lt;/span&gt;
                &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@Override&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; Drawable &lt;span style=&#34;color: #06287e&#34;&gt;getDrawable&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;final&lt;/span&gt; String source&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                Drawable d &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;final&lt;/span&gt; Bitmap b &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Picasso&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;with&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;appContext&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;load&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;source&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Get original size&lt;/span&gt;
                &lt;span style=&#34;color: #902000&#34;&gt;int&lt;/span&gt; w &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; b&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getWidth&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
                &lt;span style=&#34;color: #902000&#34;&gt;int&lt;/span&gt; h &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; b&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getHeight&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Shrink if big&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;w &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; maxSize&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;||&lt;/span&gt; h &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; maxSize&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                Point newSize &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; scaleImage&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;w&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; h&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
                w &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; newSize&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
                h &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; newSize&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Need to return a drawable&lt;/span&gt;
                d &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; BitmapDrawable&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;appContext&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getResources&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt; b&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
                d&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;setBounds&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; w&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; h&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;IOException e&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                Log&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;JONAS&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; e&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getMessage&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; d&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;};&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

                &lt;p&gt;The tag handler contains a bit more code, and I won&amp;rsquo;t paste all of it here. The tags which are handled can be seen in &lt;em&gt;handleTag&lt;/em&gt;:&lt;/p&gt;
                &lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #902000&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;handleTag&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #902000&#34;&gt;boolean&lt;/span&gt; opening&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;final&lt;/span&gt; String tag&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;final&lt;/span&gt; Editable output&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;final&lt;/span&gt; XMLReader xmlReader&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;ul&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                handleUl&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;output&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; opening&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;ol&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                handleOl&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;output&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; opening&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;li&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                handleLi&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;output&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; opening&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;img&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                handleImgEnd&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;output&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;code&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                handleCode&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;output&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; opening&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;pre&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                handlePre&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;output&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; opening&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

                &lt;p&gt;Note that fromHtml only notifies your handler about img-tags when they have ended, so I use that to insert a newline after each image. I would have liked to use it to get the configured size of the image, but that will have to wait for another day. For code-tags, I reduce the size of the text and make it Monospace:&lt;/p&gt;
                &lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Source code&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #902000&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;handleCode&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;final&lt;/span&gt; Editable text&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #902000&#34;&gt;boolean&lt;/span&gt; start&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Should be monospace&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;start&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                start&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;text&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; Monospace&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
                start&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;text&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; RelativeSize&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                end&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;text&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Monospace&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; TypefaceSpan&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;monospace&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;));&lt;/span&gt;
                end&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;text&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; RelativeSize&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; RelativeSizeSpan&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #40a070&#34;&gt;0.8f&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;));&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

                &lt;p&gt;The &lt;em&gt;start&lt;/em&gt; and &lt;em&gt;end&lt;/em&gt; methods were simply stolen straight from &lt;em&gt;android.Html&lt;/em&gt;.&lt;/p&gt;

                &lt;h3 id=&#34;result&#34;&gt;Result&lt;/h3&gt;

                &lt;p&gt;Here&amp;rsquo;s the result using the added &lt;em&gt;tagHandlers&lt;/em&gt;:&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2014/Aug/Screenshot_2014-08-28-15-03-21-1.png&#34; alt=&#34;With image&#34; width=50% /&gt;&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2014/Aug/Screenshot_2014-08-28-15-28-44_code_good.png&#34; alt=&#34;With code&#34; width=50% /&gt;&lt;/p&gt;

                &lt;h3 id=&#34;handling-clicks-on-links&#34;&gt;Handling clicks on links&lt;/h3&gt;

                &lt;p&gt;Thankfully I had already solved the issue of clickable spans in NoNonsense Notes. See [ReaderFragment]() for this:&lt;/p&gt;
                &lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Catch clicks on links&lt;/span&gt;
                mBodyTextView&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;setOnTouchListener&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;OnTouchListener&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@Override&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #902000&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;onTouch&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;final&lt;/span&gt; View v&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;final&lt;/span&gt; MotionEvent event&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                TextView widget &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;TextView&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; v&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
                Object text &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; widget&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getText&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;text &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;instanceof&lt;/span&gt; Spanned&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                Spanned buffer &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Spanned&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; text&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;

                &lt;span style=&#34;color: #902000&#34;&gt;int&lt;/span&gt; action &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; event&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getAction&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;

                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;action &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; MotionEvent&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;ACTION_UP&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;||&lt;/span&gt;
                action &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; MotionEvent&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;ACTION_DOWN&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #902000&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #902000&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; event&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getX&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
                &lt;span style=&#34;color: #902000&#34;&gt;int&lt;/span&gt; y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #902000&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; event&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getY&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;

                x &lt;span style=&#34;color: #666666&#34;&gt;-=&lt;/span&gt; widget&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getTotalPaddingLeft&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
                y &lt;span style=&#34;color: #666666&#34;&gt;-=&lt;/span&gt; widget&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getTotalPaddingTop&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;

                x &lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt; widget&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getScrollX&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
                y &lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt; widget&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getScrollY&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;

                Layout layout &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; widget&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getLayout&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
                &lt;span style=&#34;color: #902000&#34;&gt;int&lt;/span&gt; line &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; layout&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getLineForVertical&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;y&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color: #902000&#34;&gt;int&lt;/span&gt; off &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; layout&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getOffsetForHorizontal&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;line&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; x&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

                ClickableSpan&lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt; link &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;
                buffer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getSpans&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;off&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; off&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; ClickableSpan&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Cant click to the right of a span,&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// if the line ends with the span!&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;x &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; layout&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getLineRight&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;line&lt;span style=&#34;color: #666666&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Don&amp;#39;t call the span&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;link&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                link&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;onClick&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;widget&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;});&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

                &lt;p&gt;Thus clicking on links in the &lt;em&gt;TextView&lt;/em&gt; will open them in the browser. You could do whatever you want instead of calling &lt;em&gt;link[0].onClick()&lt;/em&gt; however.&lt;/p&gt;

                &lt;p&gt;That&amp;rsquo;s it for today. I&amp;rsquo;ll write more about other pieces of the app soon. Things like how the database is structured or how to use ExpandableListView.&lt;/p&gt;



            </description>
        </item>


        <webfeeds:icon>https://cowboyprogrammer.org/css/images/logo.png</webfeeds:icon>
        <item>
            <title>Building Python wheels for Windows</title>
            <link>https://cowboyprogrammer.org/2014/06/building-python-wheels-for-windows/</link>
            <pubDate>Wed, 04 Jun 2014 00:00:00 +0000</pubDate>

            <guid>https://cowboyprogrammer.org/2014/06/building-python-wheels-for-windows/</guid>
            <description>


                &lt;p&gt;One group in particular suffers from lack of package management in Windows (&lt;a href=&#34;http://cowboyprogrammer.org/people-have-been-trained-to-install-malware/&#34;&gt;as I griped about here&lt;/a&gt;): developers. This post will largely be a big howto on how to build Python packages with Fortran/C-extensions (especially Fortran extensions seem problematic on Windows). You&amp;rsquo;d think that something like that would be clearly explained somewhere. So did I, and I was wrong. So here is my guide to building Python packages with native extensions (both C and Fortran) on Windows.&lt;/p&gt;

                &lt;h4 id=&#34;installing-python-packages&#34;&gt;Installing Python packages&lt;/h4&gt;

                &lt;p&gt;The lack of a compiler means most Windows users can&amp;rsquo;t do what *nix users do when faced with a package containing some c or fortran extensions:&lt;/p&gt;

                &lt;pre&gt;&lt;code&gt;python setup.py install
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Or if it&amp;rsquo;s publicly available on &lt;a href=&#34;https://pypi.python.org/&#34;&gt;PyPi&lt;/a&gt; for example:&lt;/p&gt;

                &lt;pre&gt;&lt;code&gt;pip install package
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;&lt;em&gt;pip&lt;/em&gt; will download the source, and on any system with a compiler, compile it, then install it. So it becomes necessary to provide pre-built binaries for Windows users who don&amp;rsquo;t have a compiler. Something which no one offers a concise explanation of&amp;hellip; until now that is. If you upload your package to &lt;a href=&#34;https://pypi.python.org/&#34;&gt;PyPi&lt;/a&gt;, once you have followed this guide, even Windows users will be able to do &lt;em&gt;pip install package&lt;/em&gt;.&lt;/p&gt;

                &lt;h2 id=&#34;1-set-up-a-windows-machine&#34;&gt;1. Set up a Windows machine&lt;/h2&gt;

                &lt;p&gt;To build Windows binaries you will need access to a Windows machine. If you don&amp;rsquo;t have a copy of Windows lying around to install in a virtual machine, you can create a &lt;em&gt;free virtual machine&lt;/em&gt; on &lt;a href=&#34;http://aws.amazon.com/&#34;&gt;Amazon&lt;/a&gt; with Windows Server 2012. Selecting the most basic options will be fine and the machine will be free for atleast a year, at which point you can pay the few dollars per year or register for another free account.&lt;/p&gt;

                &lt;p&gt;Another note: make sure to use &lt;strong&gt;64-bit Windows&lt;/strong&gt; (Server 2012 only comes in 64-bit versions).&lt;/p&gt;

                &lt;h2 id=&#34;2-install-32-bit-compilers&#34;&gt;2. Install 32-bit compilers&lt;/h2&gt;

                &lt;p&gt;Don&amp;rsquo;t ask me why Microsoft didn&amp;rsquo;t want to ship the 64-bit compiler together with the 32-bit one&amp;hellip; The versions here are final. You &lt;strong&gt;cannot use newer compilers&lt;/strong&gt;. In other words, don&amp;rsquo;t get Visual Studio 2012 and expect it to work&amp;hellip; It&amp;rsquo;s a simple fact that you need to compile your packages with the same compiler as was used to build Python itself.&lt;/p&gt;

                &lt;h3 id=&#34;install-visual-c-2010-express-for-python3&#34;&gt;Install Visual C++ 2010 Express (for Python3)&lt;/h3&gt;

                &lt;p&gt;Python3.&lt;sup&gt;3&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;.4 is built with 2010 and hence all extensions must be as well.&lt;/p&gt;

                &lt;p&gt;Google for it, &lt;a href=&#34;http://www.visualstudio.com/downloads/download-visual-studio-vs#DownloadFamilies_4&#34;&gt;or try this link&lt;/a&gt;&lt;/p&gt;

                &lt;h3 id=&#34;install-visual-c-2008-express-for-python2-7&#34;&gt;Install Visual C++ 2008 Express (for Python2.7)&lt;/h3&gt;

                &lt;p&gt;For building Python2.7, 2008 version is required. Google for &amp;ldquo;Visual C++ 2008 Express&amp;rdquo; or &lt;a href=&#34;http://go.microsoft.com/?linkid=7729279&#34;&gt;try this link&lt;/a&gt;&lt;/p&gt;

                &lt;h2 id=&#34;3-install-64-bit-compilers&#34;&gt;3. Install 64-bit compilers&lt;/h2&gt;

                &lt;p&gt;Why did you do this Microsoft, why?!&lt;/p&gt;

                &lt;h3 id=&#34;install-the-windows-sdk-for-visual-studio-2010-for-python-3&#34;&gt;Install the Windows SDK for Visual Studio 2010 (for Python 3)&lt;/h3&gt;

                &lt;p&gt;The free Visual C++ 2010 Express compiler does not include 64-bit support. That is what we need the SDK to provide. Google for &lt;strong&gt;&amp;ldquo;Microsoft Windows SDK for Windows 7 and .NET Framework 4&amp;rdquo;&lt;/strong&gt; or &lt;a href=&#34;http://www.microsoft.com/en-us/download/details.aspx?id=8279&#34;&gt;try this link&lt;/a&gt;. You need the Windows 7 SDK even if you are running Windows 8. And make sure it is the version with &lt;em&gt;.NET Framework 4&lt;/em&gt;, the one with &lt;em&gt;.NET Framework 3&lt;/em&gt; is for Visual Studio 2008.&lt;/p&gt;

                &lt;p&gt;Note: if you have &lt;em&gt;C++ 2010 Redistributables&lt;/em&gt; installed, you might have
                to uninstall them first or this install might fail. It might work even if some parts of the installer fails since you only need the compiler bits.&lt;/p&gt;

                &lt;h3 id=&#34;install-the-windows-sdk-for-visual-studio-2008-for-python-2-7&#34;&gt;Install the Windows SDK for Visual Studio 2008 for (Python 2.7)&lt;/h3&gt;

                &lt;p&gt;Same story for Visual C++ 2008 Express which is used for Python2.7. Find &lt;strong&gt;&amp;ldquo;Microsoft Windows SDK for Windows 7 and .NET Framework 3.5&amp;rdquo;&lt;/strong&gt; or &lt;a href=&#34;http://www.microsoft.com/en-us/download/details.aspx?id=3138&#34;&gt;try this link&lt;/a&gt;&lt;/p&gt;

                &lt;h2 id=&#34;4-install-miniconda-anaconda&#34;&gt;4. Install Miniconda/Anaconda&lt;/h2&gt;

                &lt;p&gt;&lt;a href=&#34;http://continuum.io/downloads&#34;&gt;Download page&lt;/a&gt;&lt;/p&gt;

                &lt;p&gt;Download both the 32-bit and 64 bit versions. Python2 or Python3 versions do not matter as we will be using conda environments, but you do need both 32-bit and 64-bit versions! During the installation procedure, I recommend you select the following:&lt;/p&gt;

                &lt;ul&gt;
                &lt;li&gt;Install for current user only (this is the default)&lt;/li&gt;
                &lt;li&gt;Install into: &lt;em&gt;Users\YOURNAME\Anaconda&lt;/em&gt; and &lt;em&gt;Users\YOURNAME\Anaconda-64&lt;/em&gt; respectively&lt;/li&gt;
                &lt;li&gt;Do &lt;strong&gt;NOT modify the PATH&lt;/strong&gt;, this will be done explicitly in the build script&lt;/li&gt;
                &lt;li&gt;Do &lt;strong&gt;NOT make it the default Python&lt;/strong&gt;, we need to be able to switch easily&lt;/li&gt;
                &lt;/ul&gt;

                &lt;h2 id=&#34;5-create-the-environments&#34;&gt;5. Create the environments&lt;/h2&gt;

                &lt;p&gt;&lt;strong&gt;Do this for both the 32-bit and 64-bit versions.&lt;/strong&gt;&lt;/p&gt;

                &lt;p&gt;Open a command line window and navigate to &lt;em&gt;Users\YOURNAME\Anaconda\Scripts&lt;/em&gt; (and same for &lt;em&gt;Anaconda-64&lt;/em&gt; later) (Protip: use the file browser to get to the directory then shift-click
                somewhere and select &amp;lsquo;open command line here&amp;rsquo;).&lt;/p&gt;

                &lt;p&gt;Type the following commands:&lt;/p&gt;

                &lt;pre&gt;&lt;code&gt;conda create -n py3.4 python=3.4 numpy pip mingw

                conda create -n py3.3 python=3.3 numpy pip mingw

                conda create -n py2.7 python=2.7 numpy pip mingw
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Remember to repeat that process for the 64-bit/32-bit version as well!&lt;/p&gt;

                &lt;h2 id=&#34;6-install-git&#34;&gt;6. Install git&lt;/h2&gt;

                &lt;p&gt;This has nothing to do with the build process, but I will assume that you want to do &lt;em&gt;git clone&lt;/em&gt; at some point. &lt;a href=&#34;http://git-scm.com/download/win]&#34;&gt;Download it here&lt;/a&gt;. In this case you absolutely DO want it to modify your PATH.&lt;/p&gt;

                &lt;h1 id=&#34;actually-building-stuff&#34;&gt;Actually building stuff&lt;/h1&gt;

                &lt;p&gt;Believe it or not, but you are actually ready to compile your package. Due to multiple compilers and all that, I have made a bat-file which builds wheels for Python 2.7, 3.3 and 3.4, both for 32-bit and 64-bit:&lt;/p&gt;

                &lt;script src=&#34;https://gist.github.com/spacecowboy/23fcd4d40cfd1c1cd88a.js&#34;&gt;&lt;/script&gt;

                &lt;p&gt;Edit the information at the top. Now assuming everything was installed in the right place, you should just have to double click the bat-file and have built the wheel files which you can then upload to PyPi.&lt;/p&gt;

                &lt;h2 id=&#34;building-wheels-automatically-on-commits&#34;&gt;Building wheels automatically on commits&lt;/h2&gt;

                &lt;p&gt;Having to do this manually is a drag and so I have also come up with a fully automated solution using &lt;a href=&#34;jenkins-ci.org&#34;&gt;Jenkins&lt;/a&gt;, a continuous integration system which monitors your git-repo and clones, builds new files as changes are committed.&lt;/p&gt;

                &lt;h3 id=&#34;install-jenkins&#34;&gt;Install Jenkins&lt;/h3&gt;

                &lt;p&gt;Just download the native package from [jenkins-ci.org]().&lt;/p&gt;

                &lt;h3 id=&#34;configure-jenkins&#34;&gt;Configure Jenkins&lt;/h3&gt;

                &lt;p&gt;Once Jenkins is installed, it will start itself as a Windows service. Open you web browser and head to &lt;em&gt;[&lt;a href=&#34;http://localhost:8080](&#34;&gt;http://localhost:8080](&lt;/a&gt;)&lt;/em&gt;. You then want to go to &lt;em&gt;Manage Jenkins&lt;/em&gt;, followed by &lt;em&gt;Manage Plugins&lt;/em&gt;:&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2014/Jun/jenkins_manage.png&#34; alt=&#34;Manage Jenkins&#34; /&gt;&lt;/p&gt;

                &lt;p&gt;Go to the &lt;em&gt;available&lt;/em&gt; tab, and filter on &amp;ldquo;GIT plugin&amp;rdquo; (already installed in the screenshot):&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2014/Jun/jenkins_git.png&#34; alt=&#34;Install the GIT Plugin&#34; /&gt;&lt;/p&gt;

                &lt;p&gt;OK, now go back to the top (click Jenkins in upper left) and create a &lt;em&gt;New Item&lt;/em&gt;. You want to select &amp;ldquo;free-style software project&amp;rdquo; and give it a name:&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2014/Jun/jenkins_newitem.png&#34; alt=&#34;Create a new free-style project&#34; /&gt;&lt;/p&gt;

                &lt;p&gt;First thing you need to configure is the git source. Scroll down to &lt;em&gt;Source Code Management&lt;/em&gt;, select &lt;em&gt;git&lt;/em&gt;, and fill in the repo-address. If you input a public GitHub address you don&amp;rsquo;t need any credentials:&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2014/Jun/jenkins_config_git.png&#34; alt=&#34;Configure Git address&#34; /&gt;&lt;/p&gt;

                &lt;p&gt;I also recommend you add one &lt;em&gt;Additional behaviour&lt;/em&gt;: &lt;em&gt;Clean before checkout&lt;/em&gt; to guarantee that builds do not affect each other:&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2014/Jun/jenkins_git_clean.png&#34; alt=&#34;Clean before checkout&#34; /&gt;&lt;/p&gt;

                &lt;p&gt;Next you can setup the automatic behaviour. The easiest way is to have Jenkins poll GitHub every X minutes and check if there&amp;rsquo;s a change. Here I have configured Jenkins to check every 15 minutes:&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2014/Jun/jenkins_scm_poll.png&#34; alt=&#34;SCM Polling&#34; /&gt;&lt;/p&gt;

                &lt;p&gt;So Jenkins knows what to do when it detects a change, you want to add a &lt;em&gt;Build step&lt;/em&gt;, specifically &lt;em&gt;Execute a Windows batch file&lt;/em&gt;:&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2014/Jun/jenkins_build_step.png&#34; alt=&#34;Build step&#34; /&gt;&lt;/p&gt;

                &lt;p&gt;In the box, just copy paste the batch file I &lt;a href=&#34;https://gist.github.com/spacecowboy/23fcd4d40cfd1c1cd88a&#34;&gt;included above&lt;/a&gt;. Fill in the paths to your Anaconda installs and set the repo to:&lt;/p&gt;

                &lt;pre&gt;&lt;code&gt;set PKG_REPO=.
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2014/Jun/jenkins_batch.png&#34; alt=&#34;Pasted batch file&#34; /&gt;&lt;/p&gt;

                &lt;p&gt;Jenkins will handle the cloning and simply execute the script in the correct directory. As a final configuration step, tell Jenkins to archive build artifacts under &lt;em&gt;Post-Build Actions&lt;/em&gt; since you want to be able to download the wheel files:&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2014/Jun/jenkins_post_build.png&#34; alt=&#34;Archive wheelfiles&#34; /&gt;&lt;/p&gt;

                &lt;p&gt;If you don&amp;rsquo;t upload wheels to PyPi, then you can install wheels with pip from anywhere with:&lt;/p&gt;

                &lt;pre&gt;&lt;code&gt;pip install --no-index -f http://your.site/wheeldir/ yourpackage
                &lt;/code&gt;&lt;/pre&gt;

                &lt;h3 id=&#34;enjoy-your-build-machine&#34;&gt;Enjoy your build machine&lt;/h3&gt;

                &lt;p&gt;Now you&amp;rsquo;re all done. You can manually trigger builds in the left menu. Each build will have links for you to download the wheelfiles and the job&amp;rsquo;s main page will always display the links to the latest artifacts.&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2014/Jun/jenkins_result.png&#34; alt=&#34;Job result&#34; /&gt;&lt;/p&gt;

                &lt;p&gt;There are so many plugins and options available for Jenkins so play around if you want even more stuff. Some things you can do include:&lt;/p&gt;

                &lt;ul&gt;
                &lt;li&gt;Automatically uploading artifacts to an FTP/SSH-server.&lt;/li&gt;
                &lt;li&gt;Sending E-mail notifications on success/failures.&lt;/li&gt;
                &lt;li&gt;Build only specific branches/tags.&lt;/li&gt;
                &lt;li&gt;Make the server public and tie login to GitHub accounts.&lt;/li&gt;
                &lt;li&gt;&lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/ChuckNorris+Plugin&#34;&gt;Add Chuck Norris jokes to your builds&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;



            </description>
        </item>


        <webfeeds:icon>https://cowboyprogrammer.org/css/images/logo.png</webfeeds:icon>
        <item>
            <title>People have been trained to install malware</title>
            <link>https://cowboyprogrammer.org/2014/05/people-have-been-trained-to-install-malware/</link>
            <pubDate>Sun, 11 May 2014 00:00:00 +0000</pubDate>

            <guid>https://cowboyprogrammer.org/2014/05/people-have-been-trained-to-install-malware/</guid>
            <description>


                &lt;p&gt;&lt;em&gt;disclaimer: I get angry when I have to fix Windows. Expect explicit content. You have been warned.&lt;/em&gt;&lt;/p&gt;

                &lt;p&gt;Being computer literate can be something of a curse. Anyone with even the most rudimentary skill set has probably sometime gotten asked if they could help someone with their computer. The other day I got asked if I could help, let&amp;rsquo;s call him Roger, as he was having some problems with Windows Update. The initial symptoms could be clearly relayed by Roger:&lt;/p&gt;

                &lt;blockquote&gt;
                &lt;p&gt;The update gets to 30% then it just stops and reboots.&lt;/p&gt;
                &lt;/blockquote&gt;

                &lt;p&gt;First step is always to recreate the problem and see it in action. No problem there. Telling Windows Update to proceed resulted in precisely the described result, after a fair bit of time waiting for a frigging restore point to be created. I&amp;rsquo;d read about the &lt;a href=&#34;http://techreport.com/news/26306/windows-8-1-update-failing-for-many-users&#34;&gt;failing 8.1 upgrade&lt;/a&gt; so I half expected it to be Microsoft&amp;rsquo;s fault, even though this machine was running Windows 7. Roger didn&amp;rsquo;t need anything from the update so worst case I thought, I&amp;rsquo;ll just disable Windows Update entirely.&lt;/p&gt;

                &lt;h2 id=&#34;first-things-first&#34;&gt;First things first&lt;/h2&gt;

                &lt;p&gt;Once I had confirmed that there was a problem, I begun by clearing out various &lt;em&gt;crapware&lt;/em&gt; that was installed, mainly different kinds of toolbars and some video player that seemed to be a repackaging of VLC mainly. It&amp;rsquo;s hard to see why this software is installed or where it came from. Roger uses only Word and the browser. I figure he&amp;rsquo;s the sort that clicks on various malicious ads for some reason. At least Roger has been coerced into using Chrome instead of IE&amp;hellip;&lt;/p&gt;

                &lt;p&gt;So I uninstall everything I don&amp;rsquo;t recognize and reboot, because rebooting is something you do a lot in Windows land&amp;hellip; OK, maybe the update will work now without all the crap installed. It&amp;rsquo;s worth a try at least.&lt;/p&gt;

                &lt;blockquote&gt;
                &lt;p&gt;Initiate the update&amp;hellip; It creates a restore point&amp;hellip; wait&amp;hellip; wait&amp;hellip; wait&amp;hellip;. Reboot. Update still fails at 30%.&lt;/p&gt;
                &lt;/blockquote&gt;

                &lt;h2 id=&#34;trial-and-error&#34;&gt;Trial and error&lt;/h2&gt;

                &lt;p&gt;Now the real work begins. Maybe Microsoft screwed up their patches or something? There were 5 security patches waiting to be installed so let&amp;rsquo;s try them one by one.&lt;/p&gt;

                &lt;ul&gt;
                &lt;li&gt;First one fails.&lt;/li&gt;
                &lt;li&gt;Second one fails.&lt;/li&gt;
                &lt;li&gt;Everyone but the first and second one fails.&lt;/li&gt;
                &lt;/ul&gt;

                &lt;p&gt;OK&amp;hellip; Let&amp;rsquo;s just do the damn IE patches first. They also fail. And for every try, I&amp;rsquo;m forced to wait for Windows to create another damn restore point which takes several minutes. This on an almost brand new Intel NUC with an SSD.&lt;/p&gt;

                &lt;h2 id=&#34;bored&#34;&gt;Bored&amp;hellip;&lt;/h2&gt;

                &lt;p&gt;While waiting for the damn restore points, I am seriously considering if I can just wipe the machine and force Roger to use Linux instead. All he needs is Word. So I decide to download LibreOffice and see how their docx support is these days. Downloading 200MB takes a while on the effectively 2MBit connection. Still quicker than the now &lt;strong&gt;cancelled&lt;/strong&gt; restore point. So I click through the installer, get to the progress bar, and wait. And wait. And wait.&lt;/p&gt;

                &lt;blockquote&gt;
                &lt;p&gt;Why the fuck isn&amp;rsquo;t the progress bar moving?&lt;/p&gt;
                &lt;/blockquote&gt;

                &lt;p&gt;Instinctively, I open the task manager to see what the hold up is. Apparently nothing. No CPU is being used. No memory is consumed. It&amp;rsquo;s an SSD so disk speed is not an issue. Change to the services tab and same thing, nothing obvious. I try disabling the antivirus (Microsoft&amp;rsquo;s own so should be compatible right?). Good try chump, still no difference.&lt;/p&gt;

                &lt;p&gt;Second time in the task manager, I notice something though. A service which doesn&amp;rsquo;t really sound very official: &lt;em&gt;safetynut&lt;/em&gt;. I find out where &lt;em&gt;safetynut.exe&lt;/em&gt; lives and sure enough, it lives in something like:&lt;/p&gt;

                &lt;blockquote&gt;
                &lt;p&gt;C:\Program Files (x86)\Movie Toolbar\Safetynut&lt;/p&gt;
                &lt;/blockquote&gt;

                &lt;p&gt;But I uninstalled that! Fine.. End process. To which Windows replies:&lt;/p&gt;

                &lt;blockquote&gt;
                &lt;p&gt;You don&amp;rsquo;t have permission to end this process&lt;/p&gt;
                &lt;/blockquote&gt;

                &lt;p&gt;&lt;strong&gt;W T F&lt;/strong&gt;&lt;/p&gt;

                &lt;p&gt;OK computer, I&amp;rsquo;m going to stop you right there. I am the administrator. I am your &lt;em&gt;GOD&lt;/em&gt;. And as said deity, I command you to end that process!&lt;/p&gt;

                &lt;blockquote&gt;
                &lt;p&gt;God or no god, you still don&amp;rsquo;t have permission to do that&lt;/p&gt;
                &lt;/blockquote&gt;

                &lt;p&gt;OK, fine, be that way. Delete &lt;em&gt;C:\Program Files (x86)\Movie Toolbar\Safetynut&lt;/em&gt;.&lt;/p&gt;

                &lt;blockquote&gt;
                &lt;p&gt;Could not delete safetynut.dll as it is in use&lt;/p&gt;
                &lt;/blockquote&gt;

                &lt;p&gt;&lt;em&gt;Shaka, when the walls fell&amp;hellip;&lt;/em&gt;&lt;/p&gt;

                &lt;p&gt;It&amp;rsquo;s an amazing &lt;em&gt;&amp;ldquo;feature&amp;rdquo;&lt;/em&gt; in Windows that a program can lock a file and thus prevent you from deleting it. It&amp;rsquo;s also an amazing &lt;em&gt;&amp;ldquo;feature&amp;rdquo;&lt;/em&gt; that the administrator can be refused the permission to do something. No recourse left but to reboot into safe mode.&lt;/p&gt;

                &lt;h2 id=&#34;to-safe-mode-we-go&#34;&gt;To safe mode we go!&lt;/h2&gt;

                &lt;p&gt;First, I go into the normal safe mode with a desktop. Still can&amp;rsquo;t delete the dll file though as it is &amp;ldquo;in use&amp;rdquo;. Time to open &lt;em&gt;regedit&lt;/em&gt; and delete all references to safetynut from the registry. Search, delete. Rince, repeat&amp;hellip;&lt;/p&gt;

                &lt;p&gt;Next reboot to safe mode with only a command line window. Navigate to the folder and delete the file and the folder, then reboot.&lt;/p&gt;

                &lt;h2 id=&#34;success&#34;&gt;Success!&lt;/h2&gt;

                &lt;p&gt;No more safetynut. Let&amp;rsquo;s try Windows Update again. Ooh, that&amp;rsquo;s a mighty fast restore point creation! And the update succeeds!&lt;/p&gt;

                &lt;p&gt;So apparently, safetynut was actively preventing Windows Update from proceeding. Roger promptly got a stern talking to about installing &lt;strong&gt;any&lt;/strong&gt; software or clicking on ads/popups (I also installed adblock plus in Chrome). But it got me thinking about malware in general..&lt;/p&gt;

                &lt;h2 id=&#34;most-people-are-trained-to-install-malware&#34;&gt;Most people are trained to install malware&lt;/h2&gt;

                &lt;p&gt;In my view, none of this is the user&amp;rsquo;s fault. The fact is that Microsoft has trained everyone to install shitty software from untrusted sources. Let&amp;rsquo;s go back a few years, to the days of yore, in the time of Windows 98 and Windows 2000. If you reinstalled Windows back then, and I did a lot, then you very quickly got a routine for downloading the software you needed once Windows was installed.&lt;/p&gt;

                &lt;p&gt;First obvious things to install were the drivers for your network card, sound card and graphics card. You even possibly needed to install SATA-drivers during the actual install or the installer wouldn&amp;rsquo;t find your disk. If you did not have that on a &lt;strong&gt;floppy&lt;/strong&gt;, you were screwed. But OK, you had your floppy, and you had your drivers on CD. Next you needed:&lt;/p&gt;

                &lt;ul&gt;
                &lt;li&gt;A browser, because Internet Explorer is still a gaping security hole&lt;/li&gt;
                &lt;li&gt;A firewall, because even up to XP, being exposed to the internet directly meant instant infection&lt;/li&gt;
                &lt;li&gt;Antivirus, anything that wasn&amp;rsquo;t Norton would do&amp;hellip;&lt;/li&gt;
                &lt;li&gt;PDF-reader&lt;/li&gt;
                &lt;li&gt;zip/rar-extractor&lt;/li&gt;
                &lt;/ul&gt;

                &lt;p&gt;I&amp;rsquo;d like to draw your attention to the last item. Something so mundane as a zip-extractor was not built in to Windows. XP was the first version (if I remember correctly) to include a built in zip-extractor. This specific flaw trained everyone to download Winzip or Winrar. Quite possibly, they would resort to getting a pirated serial key as well. The problem? Now users are trained to go to any website their 10-year old neighborhood tech support kid tells them to and click &lt;em&gt;Download&lt;/em&gt;.&lt;/p&gt;

                &lt;p&gt;Here&amp;rsquo;s a screenshot of the pirate bay to illustrate (to clarify, do NOT download your software from torrent sites. It&amp;rsquo;s just an example of this behavior). The big download buttons will lead to ads, online poker or who knows. We can be quite sure that they will lead to endless evil. On the internet, never &lt;strong&gt;FUCKING EVER&lt;/strong&gt; press a big styled button with the text &amp;ldquo;Download&amp;rdquo;. The link you want is the smaller green text: &amp;ldquo;get this torrent&amp;rdquo;.&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2014/May/piratebay-downloadlinks.png&#34; alt=&#34;Never press Download!&#34; /&gt;&lt;/p&gt;

                &lt;p&gt;Now, assuming you managed to avoid the big download buttons to download your program, you have your completely unverified &lt;em&gt;.exe&lt;/em&gt; file or &lt;em&gt;.msi&lt;/em&gt; file, you double click on it, and what do you get? More &lt;em&gt;fucking bullshit&lt;/em&gt;. Here&amp;rsquo;s a screenshot of the Winzip (totally unnecessary program today) installer. Right after you agree to the Winzip Terms of Service, you get another license agreement.&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2014/May/winzip-malware.png&#34; alt=&#34;Toolbars!&#34; /&gt;&lt;/p&gt;

                &lt;p&gt;How the screaming fuck are ordinary users supposed to understand that pressing Next will lead to untold horrors and pressing Decline is the way to install the software they want? They won&amp;rsquo;t of course. &lt;em&gt;That&amp;rsquo;s the whole point!&lt;/em&gt;&lt;/p&gt;

                &lt;p&gt;I bet this is the source of 99% of all malware on Windows.  And the problem is that this is a perfectly acceptable way of getting software. Macs have the same problem to some minor extent. They are also being trained to download strange files from various pages. It is NOT accepted on Linux. The reason you don&amp;rsquo;t need antivirus on Linux is not because the system is more secure. All software is brittle and insecure. The vital difference is in how Linux users get their software.&lt;/p&gt;

                &lt;h2 id=&#34;the-way-it-should-be&#34;&gt;The way it should be&lt;/h2&gt;

                &lt;p&gt;Here&amp;rsquo;s a screenshot of the package manager in Debian:&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2014/May/synaptic.png&#34; alt=&#34;Synaptic&#34; /&gt;&lt;/p&gt;

                &lt;p&gt;Now let&amp;rsquo;s say I need a c++ compiler and one was not installed already. I search for &amp;ldquo;c++ compiler&amp;rdquo; and there&amp;rsquo;s clang. To this day, I have no idea how I can get a compiler on Windows.&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2014/May/synaptic_clang.png&#34; alt=&#34;Searching for a compiler&#34; /&gt;&lt;/p&gt;

                &lt;p&gt;Installing 99% of all software is super easy and reliable on Linux. All of these packages have been checked by the people working on the distro. If any package were to install a toolbar or other malware, you can bet your ass that it would be removed from the official sources. And because this is how Linux users are trained to install their software, they will have some degree of suspicion against download links on unknown websites. Installing malware becomes notably harder than installing good software.&lt;/p&gt;

                &lt;h2 id=&#34;the-coming-app-stores&#34;&gt;The coming app stores&lt;/h2&gt;

                &lt;p&gt;Both OS X and Windows are trying to push their users to use their &amp;ldquo;app stores&amp;rdquo;. While I have many negative things to say about them, they should hopefully reduce the included malware problem and train users to only install garbage from trusted sources.&lt;/p&gt;



            </description>
        </item>


        <webfeeds:icon>https://cowboyprogrammer.org/css/images/logo.png</webfeeds:icon>
        <item>
            <title>Are iPads actually a step back?</title>
            <link>https://cowboyprogrammer.org/2014/04/are-ipads-retarding-us/</link>
            <pubDate>Sat, 26 Apr 2014 00:00:00 +0000</pubDate>

            <guid>https://cowboyprogrammer.org/2014/04/are-ipads-retarding-us/</guid>
            <description>


                &lt;p&gt;Think what you will of the iPad, but it has been a huge success for Apple and people love it. It&amp;rsquo;s one of the few products that appealed (past-tense) to both the geeks and _&lt;a href=&#34;http://en.wikipedia.org/wiki/Hoi_polloi&#34;&gt;hoi polloi&lt;/a&gt;_.&lt;/p&gt;

                &lt;p&gt;I remember watching the keynote where the iPhone was introduced and immediately I thought &lt;em&gt;that&amp;rsquo;s the pad from Star-Trek TNG!&lt;/em&gt; I &lt;strong&gt;had&lt;/strong&gt; to have it.
                Apple&amp;rsquo;s initial carrier exclusivity deals meant I had to wait for the iPhone 3g. Not only that, but because they partnered with a company I am sworned to destroy, I payed a guy in Italy to buy one unlocked and ship it to me for 7500SEK. Funny thing is that at the time I was a developer at Sony Ericsson, who did not think kindly of Apple entering their mobile domain. I got a lot of weird looks a work&amp;hellip;&lt;/p&gt;

                &lt;p&gt;Then came the iPad. Again I&amp;rsquo;m thinking &lt;em&gt;holy shit that&amp;rsquo;s awesome.&lt;/em&gt; At this point I had upgraded to an Android device (an HTC Legend) and had come to the conclusion that Android was far more interesting as a platform because of Apple&amp;rsquo;s restrictions on what apps can do. The customizability and capabilities on Android were far greater and as a developer, you appreciate that. However, &lt;em&gt;there were no Android tablets.&lt;/em&gt; And there wouldn&amp;rsquo;t be for a long time.&lt;/p&gt;

                &lt;p&gt;I kept my cool though and managed to hold on to my money until the iPad 2 was released. I left early from work and lined up with other enthusiasts at the electronics store. At the time most people had no idea what they were going to do with it, me included, but I &lt;strong&gt;had&lt;/strong&gt; to have it. I think my extended family clearly demonstrates how successful a product the iPad was. That same year I saw 3 iPads being gifted away (3 in a group of around 9 people!). By the next year, 3 more iPads were acquired. Everyone had to have one. It was one of those cases where you don&amp;rsquo;t get it until you see it for yourself.&lt;/p&gt;

                &lt;h2 id=&#34;from-revolutionary-to-evolutionary&#34;&gt;From revolutionary to evolutionary&lt;/h2&gt;

                &lt;p&gt;It is both a sign of how good the original product was and how little has changed that I never felt a reason to upgrade from the iPad 2.&lt;/p&gt;

                &lt;ul&gt;
                &lt;li&gt;The battery life was fantastic.&lt;/li&gt;
                &lt;li&gt;The screen size just right.&lt;/li&gt;
                &lt;li&gt;The resolution was good enough.&lt;/li&gt;
                &lt;li&gt;The speed was fine (until recently).&lt;/li&gt;
                &lt;/ul&gt;

                &lt;p&gt;Hardware-wise, it was feature complete. The rest could be fixed in software. They never did though. The problem is iOS. Just as I abandoned the iPhone for Android, I now abandoned the iPad for a Nexus 7. There was so much potential being held back by the limitations of iOS.
                &lt;a href=&#34;http://stratechery.com/2014/dont-give-ipad/&#34;&gt;Stratechery&lt;/a&gt; explains some of my frustrations well. He means it as a defense in iOS&amp;rsquo;s favor though. But there is actually more to it than the limitations of iOS. Something inherent in the touch screen and the current mobile paradigm.&lt;/p&gt;

                &lt;h2 id=&#34;limitations-of-the-touch-screen&#34;&gt;Limitations of the touch screen&lt;/h2&gt;

                &lt;p&gt;I was playing &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.dotemu.rtype2&#34;&gt;R-Type 2&lt;/a&gt; on my Nexus 10 and kept dying on the boss in the second level. And I realized that while I might get lucky and finish the level, I would never be able to play the game well due to the touch screen.&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2014/Apr/rtype2-boss.png&#34; alt=&#34;R-Type 2 second level boss&#34; /&gt;&lt;/p&gt;

                &lt;p&gt;See, R-Type is a classic side-scrolling &lt;em&gt;shoot-em-up&lt;/em&gt;. You pilot a spaceship and have to avoid enemy fire, hordes of enemies, and not crash into the roof or ceiling. It is a game based entirely on mastering the controls. You can see a good example of what I mean in this clip of a similar game called &lt;em&gt;Gradius&lt;/em&gt; for the NES.&lt;/p&gt;

                &lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/3PMpbPYB0iY&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

                &lt;p&gt;The problem I was having was that I kept crashing into the floor as I tried to manouever around the boss. Having played for and hour or two (and still being stuck on level 2!) I came to realize that it wasn&amp;rsquo;t I that sucked, it was the controls. I had reached the limit of what was possible (precision-wise) with a touch screen.&lt;/p&gt;

                &lt;h3 id=&#34;noobs-forever&#34;&gt;Noobs forever&lt;/h3&gt;

                &lt;p&gt;And this is where the back-stepping begins. Growing up with NES, SNES, and a PC, I remember many older relatives noting the dexterity and precision in the thumbs of kids due to all the gaming. Video games required:&lt;/p&gt;

                &lt;ul&gt;
                &lt;li&gt;hand-eye-coordination&lt;/li&gt;
                &lt;li&gt;hand dexterity&lt;/li&gt;
                &lt;li&gt;concentration&lt;/li&gt;
                &lt;/ul&gt;

                &lt;p&gt;To beat these games you needed &lt;em&gt;mastery&lt;/em&gt; and &lt;em&gt;focus&lt;/em&gt;. Not only was mastery required, it was the &lt;em&gt;reward&lt;/em&gt;. The games suitable for touch screens can require neither. So tablet games will remain at a level no more advanced than snake or scrabble. (As a side note, what really can work is turn-based strategy games.)&lt;/p&gt;

                &lt;h3 id=&#34;no-such-thing-as-a-touch-typist&#34;&gt;No such thing as a touch typist&lt;/h3&gt;

                &lt;p&gt;Just as serious gaming becomes impossible due to the touch interface, serious productivity suffers from the same limitations. It&amp;rsquo;s funny to see things like Microsoft Office being released for the iPad because it&amp;rsquo;s impossible to work with. Serious productivity requires the efficient inputting of language, be it English or Python. The touch keyboard is unable to let you do that. There is no such thing as a touch typist. On a tablet, everyone goes back to tapping with two fingers. There is nothing to master here (due to the lack of feedback) and so everyone will remain as noobs forever.&lt;/p&gt;

                &lt;h2 id=&#34;the-dark-age-begins&#34;&gt;The dark age begins&lt;/h2&gt;

                &lt;p&gt;Maybe you&amp;rsquo;re thinking to yourself:&lt;/p&gt;

                &lt;blockquote&gt;
                &lt;p&gt;&lt;em&gt;so what if a touch screen isn&amp;rsquo;t ideal for everything, no input device is!&lt;/em&gt;&lt;/p&gt;
                &lt;/blockquote&gt;

                &lt;p&gt;If you are, then I agree. Nothing can be great at everything. You use the right tool for the right job. The problem is the tremendous success of the tablet. This is where I think the geeks have a different view of where we are headed.&lt;/p&gt;

                &lt;p&gt;Geeks see the benefits of the touch screen. Its strengths, but also its weaknesses. They use it when it&amp;rsquo;s convenient. For more serious work, they move to their workstation, with keyboard and screen.&lt;/p&gt;

                &lt;p&gt;Non-geeks see the tablet as &lt;em&gt;&amp;ldquo;the future&amp;rdquo;&lt;/em&gt;. They never liked their PC to begin with. It was just something they were forced to acquire to be able to pay their bills. They see the tablet as liberating. Geeks see the tablet as confining.&lt;/p&gt;

                &lt;p&gt;The success of the tablet amongst geeks and non-geeks combined means companies are scrambling to push everything into tablet interfaces. Apple is clearly moving towards iOS as OSX is evolving. Microsoft has already gone too far:&lt;/p&gt;

                &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/WTYet-qf1jo&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;


                &lt;p&gt;But it&amp;rsquo;s not just the tablet interface. It&amp;rsquo;s the whole mobile paradigm that is spreading. With it comes the &lt;em&gt;app stores&lt;/em&gt;, where every app is pre-approved by the benevolent corporation that owns your &lt;del&gt;soul&lt;/del&gt; apps and music. The corporation reserves the right to remove any app or in-app purchase it deems unworthy of your attention. &lt;a href=&#34;http://www.nytimes.com/2009/07/18/technology/companies/18amazon.html?_r=0&#34;&gt;Amazon did it&lt;/a&gt;, &lt;a href=&#34;http://www.pcworld.com/article/2095060/apple-removes-blockchain-last-bitcoin-wallet-app-from-mobile-store.html&#34;&gt;Apple does it all the time&lt;/a&gt;, &lt;a href=&#34;http://www.wired.co.uk/news/archive/2014-01/20/microsoft-removes-tor&#34;&gt;and same for Microsoft&lt;/a&gt;.&lt;/p&gt;

                &lt;p&gt;I would say that Linux is the only alternative going forward, but then again, &lt;a href=&#34;https://www.gnu.org/philosophy/ubuntu-spyware.html&#34;&gt;Canonical is showing that not even Linux is safe&lt;/a&gt;.&lt;/p&gt;



            </description>
        </item>


        <webfeeds:icon>https://cowboyprogrammer.org/css/images/logo.png</webfeeds:icon>
        <item>
            <title>Advertising, that&#39;s not intrusive. Orly?</title>
            <link>https://cowboyprogrammer.org/2014/04/advertising-thats-not-intrusive-orly/</link>
            <pubDate>Mon, 07 Apr 2014 00:00:00 +0000</pubDate>

            <guid>https://cowboyprogrammer.org/2014/04/advertising-thats-not-intrusive-orly/</guid>
            <description>


                &lt;p&gt;When you have apps in Google Play (and I imagine, other App stores as well), the amount of spam you receive instantly goes up by a factor of 10. Google&amp;rsquo;s spam filters are pretty well trained but every now and again something gets through.&lt;/p&gt;

                &lt;h2 id=&#34;advertising-opportunity&#34;&gt;Advertising opportunity&lt;/h2&gt;

                &lt;p&gt;Today&amp;rsquo;s piece of bullshyt (I really meant to spell it like that) reads as follows (my emphasis):&lt;/p&gt;

                &lt;blockquote&gt;
                &lt;p&gt;Our premium advertisers are currently looking to buy android traffic at a very high price in apps like Nononsense Notes.&lt;/p&gt;

                &lt;p&gt;We think you can generate up to $10 CPM with their &lt;strong&gt;full screen ads&lt;/strong&gt;, which are &lt;strong&gt;very clean&lt;/strong&gt;. Indeed, most of our advertisers are willing to pay, on average, between $1 and $3 per installation. You&amp;rsquo;re free to display these ads whenever you want in your app so that it&amp;rsquo;s &lt;strong&gt;not intrusive&lt;/strong&gt;.&lt;/p&gt;
                &lt;/blockquote&gt;

                &lt;p&gt;Ads are by definition &lt;em&gt;intrusive&lt;/em&gt;. That&amp;rsquo;s how they nag you into buying their stupid stuff. And it doesn&amp;rsquo;t matter how clean your ads are. Displaying them fullscreen is &lt;em&gt;beyond&lt;/em&gt; intrusive. It is down right &lt;strong&gt;offensive&lt;/strong&gt;.&lt;/p&gt;

                &lt;p&gt;I uninstall anything that displays obnoxious ads, be they fullscreen or notifications, and promptly give the app a one star review. I sincerely hope others afford me the same &amp;ldquo;courtesy&amp;rdquo; for my apps.&lt;/p&gt;



            </description>
        </item>


        <webfeeds:icon>https://cowboyprogrammer.org/css/images/logo.png</webfeeds:icon>
        <item>
            <title>Convert to Android Studio and Gradle today!</title>
            <link>https://cowboyprogrammer.org/2014/04/convert-to-android-studio-and-gradle-today/</link>
            <pubDate>Mon, 07 Apr 2014 00:00:00 +0000</pubDate>

            <guid>https://cowboyprogrammer.org/2014/04/convert-to-android-studio-and-gradle-today/</guid>
            <description>
                &lt;p&gt;Took the plunge and converted NoNonsense Notes from Ant and Eclipse to Gradle and Android Studio. It took some googling and a fair bit of frustration but in the end it was very much worth it.&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2014/Apr/android_studio_shot1.png&#34; alt=&#34;Android Studio screenshot&#34; /&gt;&lt;/p&gt;

                &lt;p&gt;Eclipse has been broken for me for about 6 months or so. So very little of it&amp;rsquo;s powerful features were available during development. The ant build worked fine but Eclipse uses its own which is mysterious and requires constant refreshes and cleaning. Often in a particular order on each library project which was a dependency.&lt;/p&gt;

                &lt;p&gt;With gradle on the other hand, if it builds in the console then it will build in Android Studio. Once again I am able to use a debugger!&lt;/p&gt;

                &lt;p&gt;I can warmly recommend people to take a day and setup some &lt;em&gt;build.gradle&lt;/em&gt; files.&lt;/p&gt;



            </description>
        </item>


        <webfeeds:icon>https://cowboyprogrammer.org/css/images/logo.png</webfeeds:icon>
        <item>
            <title>Dark themes everywhere</title>
            <link>https://cowboyprogrammer.org/2014/04/dark-themes-everywhere/</link>
            <pubDate>Mon, 07 Apr 2014 00:00:00 +0000</pubDate>

            <guid>https://cowboyprogrammer.org/2014/04/dark-themes-everywhere/</guid>
            <description>


                &lt;p&gt;I have come to really appreciate dark themes in the programs that I
                use. Be it any of my Android devices or my &lt;em&gt;real&lt;/em&gt; computers, I prefer
                dark themes. In Emacs, it&amp;rsquo;s as easy as &lt;code&gt;M-x load-theme wombat&lt;/code&gt;. And
                wombat is probably my current favourite dark theme. Dark greys
                combined with nice shades of blue, green and red. This entire web site
                is (at the time of this post) presented in the wombat colors.&lt;/p&gt;

                &lt;p&gt;Of course, a lot of time is spent in the web browser and I have come
                to understand that most web designers don&amp;rsquo;t share my love for the
                darkness. Long have I suffered in the depressing and blinding white
                backgrounds of the &amp;ldquo;Web 2.0&amp;rdquo;.&lt;/p&gt;

                &lt;p&gt;&lt;strong&gt;N O - M O R E&lt;/strong&gt;&lt;/p&gt;

                &lt;p&gt;I have just come into the possession of some writings that magically
                destroys the light infestation in my life. Now I can enjoy the dark
                majestic background that is &lt;code&gt;#202020&lt;/code&gt; everywhere.&lt;/p&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2014/Apr/dark-conkeror-google.png&#34; alt=&#34;Dark conkeror in Google&#34; /&gt;&lt;/p&gt;

                &lt;p&gt;This is naturally possible to do in most browsers but I&amp;rsquo;ll talk about
                conkeror specifically. What&amp;rsquo;s most interesting is probably the CSS
                so you don&amp;rsquo;t have to write that yourself.&lt;/p&gt;

                &lt;p&gt;Great thanks to &lt;a href=&#34;http://jaderholm.com/blog/programothesis-18-conkeror-color-theme&#34;&gt;Scott Jaderholm&lt;/a&gt; for doing all the work.&lt;/p&gt;

                &lt;h2 id=&#34;conkeror&#34;&gt;Conkeror&lt;/h2&gt;

                &lt;p&gt;&lt;a href=&#34;http://conkeror.org&#34;&gt;Conkeror&lt;/a&gt; is a web browser based on the same
                underlying tech as Firefox. What makes it unique is its Emacs-like interface. It is essentially what you imagine a good browser in Emacs would be like. Like Emacs, tweaks can be made by adding code (javascript) to its configuration files.&lt;/p&gt;

                &lt;p&gt;By default, it loads all &lt;code&gt;.js&lt;/code&gt; files in &lt;code&gt;~/.conkerorrc/&lt;/code&gt;. So what you want to do is download the &lt;code&gt;color-theme.js&lt;/code&gt; and &lt;code&gt;site-css&lt;/code&gt;
                files/folders from &lt;a href=&#34;https://github.com/scottjad/dotfiles/tree/master/.conkerorrc&#34;&gt;Scott&amp;rsquo;s repo&lt;/a&gt; and put that in your &lt;code&gt;.conkerorrc&lt;/code&gt; dir. That&amp;rsquo;s basically it, but a few additional tweaks can be done.&lt;/p&gt;

                &lt;h2 id=&#34;fixing-github-diff-colors&#34;&gt;Fixing GitHub diff colors&lt;/h2&gt;

                &lt;p&gt;GitHub must have updated their styles since Scott&amp;rsquo;s post.  To fix the diff colors, the following works (replace the existing GitHub entry with this):&lt;/p&gt;
                &lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code&gt;&lt;span&gt;&lt;/span&gt;    make_css_data_uri(
                [&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;.k { font-weight: bold !important; }&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// keyword&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;a, h1, code, pre {text-shadow: 0px 0px 0px  black !important; }&amp;#39;&lt;/span&gt;,
                &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;.nv { color: #aaa !important; } &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// function name/variable name&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;.s { color: #95e454 !important; } &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// string&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;.c1 { color: #99968b !important; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;font-style: normal !important; }&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// comment&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;.gi, .gi * { color: #1AFF84 !important; }&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// inserted line&lt;/span&gt;
                &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;.gd, .gd * { color: #ff0080 !important; }&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// deleted line&lt;/span&gt;
                ], $domains &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;github.com&amp;quot;&lt;/span&gt;)
                &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

                &lt;p&gt;&lt;img src=&#34;https://cowboyprogrammer.org/images/2014/Apr/dark-conkeror-github.png&#34; alt=&#34;Dark conkeror GitHub&#34; /&gt;&lt;/p&gt;

                &lt;h2 id=&#34;enabling-dark-theme-by-default&#34;&gt;Enabling dark theme by default&lt;/h2&gt;

                &lt;p&gt;I always want the dark theme enabled by default. This is the main theme function (I removed all themes but the dark one as well):&lt;/p&gt;
                &lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code&gt;&lt;span&gt;&lt;/span&gt;    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt; global_color_theme(name, key, styles) {
                interactive_cmd &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;toggle-&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;-mode&amp;quot;&lt;/span&gt;;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Enable by default here&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt;(x &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;in&lt;/span&gt; styles) {
                register_user_stylesheet(styles[x]);
                }
                color_theme_toggle[name] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;true&lt;/span&gt;;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Add toggle function&lt;/span&gt;
                interactive(interactive_cmd, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt; (I) {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; (color_theme_toggle[name]) {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt;(x &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;in&lt;/span&gt; styles) {
                unregister_user_stylesheet(styles[x]);
                }

                color_theme_toggle[name] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;false&lt;/span&gt;;
                } &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;else&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt;(x &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;in&lt;/span&gt; styles) {
                register_user_stylesheet(styles[x]);
                }
                color_theme_toggle[name] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;true&lt;/span&gt;;
                }
                });
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Add a disable function&lt;/span&gt;
                interactive(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;disable-&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;name&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;-theme&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;() {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt;(x &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;in&lt;/span&gt; styles) {
                unregister_user_stylesheet(styles[x]);
                }
                color_theme_toggle[name] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;false&lt;/span&gt;;
                });
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Add an enable function&lt;/span&gt;
                interactive(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;enable-&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;name&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;-theme&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;() {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt;(x &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;in&lt;/span&gt; styles) {
                register_user_stylesheet(styles[x]);
                }
                color_theme_toggle[name] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;true&lt;/span&gt;;
                });
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// I don&amp;#39;t care for a keybinding for this&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;//define_key(default_global_keymap, key, interactive_cmd);&lt;/span&gt;
                }
                &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

                &lt;h2 id=&#34;make-the-wombat-theme-even-darker&#34;&gt;Make the Wombat theme even darker&lt;/h2&gt;

                &lt;p&gt;I prefer an even darker background than the one provided.  I have also learned the importance of the &lt;code&gt;!important&lt;/code&gt; tag and semicolons in css (damn you!!!). This is incidentally the wombat css that I&amp;rsquo;m using for syntax highlighting here on the site. If you change anything don&amp;rsquo;t forget to make sure the line ends with &lt;code&gt;!important&lt;/code&gt; (and semicolon in case of multiple attributes) or the css won&amp;rsquo;t take.&lt;/p&gt;

                &lt;p&gt;The changes are pretty much in the upper section but I re-formatted the file to make it more readable:&lt;/p&gt;
                &lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code&gt;&lt;span&gt;&lt;/span&gt;    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;code&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;pre&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*,&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;pre&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; {
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Code should always be in monospace */&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;font-family&lt;/span&gt;: DejaVu Sans Mono &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/*color: #f6f3e8 !important;*/&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/*background-color: #202020 !important;*/&lt;/span&gt;
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/*font-size: 10pt !important;*/&lt;/span&gt;
                }

                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;linenos&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;margin-right&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;0.5&lt;/span&gt;&lt;span style=&#34;color: #902000&#34;&gt;em&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                }

                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlighttable&lt;/span&gt;  {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;background&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#303030&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                }
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;hll&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;hll&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;background-color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#ffffcc&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                }
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;c&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#99968b&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;font-style&lt;/span&gt;: &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;italic&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Comment */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;err&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Error */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;g&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;g&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Generic */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;k&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#8ac6f2&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Keyword */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;l&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;l&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Literal */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;n&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Name */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;o&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;o&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Operator */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;x&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Other */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;p&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Punctuation */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;cm&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;cm&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#99968b&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;font-style&lt;/span&gt;: &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;italic&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Comment.Multiline */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;cp&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;cp&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#e5786d&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Comment.Preproc */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;c1&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;c1&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#99968b&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;font-style&lt;/span&gt;: &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;italic&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Comment.Single */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;cs&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;cs&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#99968b&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;font-style&lt;/span&gt;: &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;italic&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Comment.Special */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;gd&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;gd&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Generic.Deleted */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;ge&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;ge&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Generic.Emph */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;gr&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;gr&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Generic.Error */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;gh&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;gh&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;font-weight&lt;/span&gt;: &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;bold&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Generic.Heading */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;gi&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;gi&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Generic.Inserted */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;go&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;go&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#808080&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;background-color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#202020&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Generic.Output */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;gp&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;gp&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Generic.Prompt */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;gs&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;gs&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Generic.Strong */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;gu&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;gu&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;font-weight&lt;/span&gt;: &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;bold&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Generic.Subheading */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;gt&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;gt&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Generic.Traceback */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;kc&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;kc&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#8ac6f2&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Keyword.Constant */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;kd&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;kd&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#8ac6f2&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Keyword.Declaration */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;kn&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;kn&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#8ac6f2&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Keyword.Namespace */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;kp&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;kp&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#8ac6f2&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Keyword.Pseudo */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;kr&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;kr&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#8ac6f2&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Keyword.Reserved */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;kt&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;kt&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#cae682&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Keyword.Type */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;ld&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;ld&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Literal.Date */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;m&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#e5786d&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Literal.Number */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;s&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#95e454&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;font-style&lt;/span&gt;: &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;italic&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Literal.String */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;na&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;na&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#cae682&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Name.Attribute */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;nb&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;nb&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Name.Builtin */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;nc&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;nc&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Name.Class */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;no&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;no&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#e5786d&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Name.Constant */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;nd&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;nd&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#ff0080&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Name.Decorator */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;ni&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;ni&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#e7f6da&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Name.Entity */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;ne&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;ne&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Name.Exception */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;nf&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;nf&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#cae682&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Name.Function */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;nl&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;nl&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Name.Label */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;nn&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;nn&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Name.Namespace */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;nx&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;nx&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Name.Other */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;py&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;py&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Name.Property */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;nt&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;nt&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#8ac6f2&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Name.Tag */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;nv&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;nv&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#cae682&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Name.Variable */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;ow&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;ow&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Operator.Word */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;w&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;w&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Text.Whitespace */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;mf&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;mf&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#e5786d&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Literal.Number.Float */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;mh&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;mh&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#e5786d&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Literal.Number.Hex */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;mi&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;mi&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#e5786d&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Literal.Number.Integer */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;mo&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;mo&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#e5786d&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Literal.Number.Oct */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;sb&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;sb&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#95e454&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;font-style&lt;/span&gt;: &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;italic&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Literal.String.Backtick */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;sc&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;sc&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#95e454&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;font-style&lt;/span&gt;: &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;italic&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Literal.String.Char */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;sd&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;sd&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#95e454&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;font-style&lt;/span&gt;: &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;italic&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Literal.String.Doc */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;s2&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;s2&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#95e454&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;font-style&lt;/span&gt;: &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;italic&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Literal.String.Double */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;se&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;se&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#95e454&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;font-style&lt;/span&gt;: &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;italic&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Literal.String.Escape */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;sh&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;sh&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#95e454&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;font-style&lt;/span&gt;: &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;italic&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Literal.String.Heredoc */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;si&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;si&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#95e454&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;font-style&lt;/span&gt;: &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;italic&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Literal.String.Interpol */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;sx&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;sx&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#95e454&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;font-style&lt;/span&gt;: &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;italic&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Literal.String.Other */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;sr&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;sr&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#95e454&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;font-style&lt;/span&gt;: &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;italic&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Literal.String.Regex */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;s1&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;s1&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#95e454&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;font-style&lt;/span&gt;: &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;italic&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Literal.String.Single */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;ss&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;ss&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#95e454&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;font-style&lt;/span&gt;: &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;italic&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Literal.String.Symbol */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;bp&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;bp&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#f6f3e8&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Name.Builtin.Pseudo */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;vc&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;vc&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#cae682&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Name.Variable.Class */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;vg&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;vg&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#cae682&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Name.Variable.Global */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;vi&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;vi&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#cae682&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Name.Variable.Instance */&lt;/span&gt;
                .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;il&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;highlight&lt;/span&gt; .&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;il&lt;/span&gt; {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color: #40a070&#34;&gt;#e5786d&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;!important&lt;/span&gt;;
                } &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/* Literal.Number.Integer.Long */&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



            </description>
        </item>


        <webfeeds:icon>https://cowboyprogrammer.org/css/images/logo.png</webfeeds:icon>
        <item>
            <title>Getting Adblock to work in Conkeror</title>
            <link>https://cowboyprogrammer.org/2014/04/getting-adblock-to-work-in-conkeror/</link>
            <pubDate>Mon, 07 Apr 2014 00:00:00 +0000</pubDate>

            <guid>https://cowboyprogrammer.org/2014/04/getting-adblock-to-work-in-conkeror/</guid>
            <description>
                &lt;p&gt;Conkeror supports firefox addons to varying degrees. I found that a good indicator is if the addon has support for Firefox 3. This means you can use Adblock 2.0. But, the GUI for selecting a filter subscription will not show.  Hence the need to install Adblock 1.3 &lt;strong&gt;first&lt;/strong&gt;. To get Adblock up and running in Conkeror, do the following:&lt;/p&gt;

                &lt;ol&gt;
                &lt;li&gt;In your rc-file, set:
                &lt;code&gt;javascript
                session_pref(&amp;quot;xpinstall.whitelist.required&amp;quot;, false);
                &lt;/code&gt;&lt;/li&gt;
                &lt;li&gt;Go to &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/adblock-plus/versions/&#34;&gt;Adblock versions&lt;/a&gt;.&lt;/li&gt;
                &lt;li&gt;Install &lt;strong&gt;1.3.10&lt;/strong&gt;.&lt;/li&gt;
                &lt;li&gt;Open extensions: &lt;code&gt;M-x extensions&lt;/code&gt;.&lt;/li&gt;
                &lt;li&gt;Go into preferences for Adblock and subscribe to a list, like
                &lt;em&gt;Easylist&lt;/em&gt;. The list might complain about requiring Adblock 2 for
                some filters, which is fine since we will fix that next.&lt;/li&gt;
                &lt;li&gt;Now go back and download/install version &lt;strong&gt;2.0.1&lt;/strong&gt;.&lt;/li&gt;
                &lt;li&gt;Enjoy the web again.&lt;/li&gt;
                &lt;/ol&gt;



            </description>
        </item>

    </channel>
</rss>
