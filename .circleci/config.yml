# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference

# For a detailed guide to building and testing on Android, read the docs:
# https://circleci.com/docs/language-android/ for more details.
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/orb-intro/
orbs:
  # See the Android orb documentation here: https://circleci.com/developer/orbs/orb/circleci/android
  android: circleci/android@3.0.2

# For gradle managed emulator tests
commands:
  restore_gradle_cache:
    steps:
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle.kts" }}

  save_gradle_cache:
    steps:
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "build.gradle.kts" }}


# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  emulator-test:
    # These next lines define the Android machine image executor.
    # See: https://circleci.com/docs/executor-intro/ & https://circleci.com/developer/orbs/orb/circleci/android#executors-android-machine
    executor:
      name: android/android_machine
      tag: default

    # Add steps to the job
    # See: https://circleci.com/docs/jobs-steps/#steps-overview & https://circleci.com/docs/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout

      # The next step will run the unit tests
      #- android/run-tests:
      #    test-command: ./gradlew lint testDebug --continue

      # Then start the emulator and run the Instrumentation tests!
      - android/start-emulator-and-run-tests:
          test-command: ./gradlew connectedDebugAndroidTest --parallel
          system-image: system-images;android-25;google_apis;x86

      # And finally run the release build
      #- run:
      #    name: Assemble release build
      #    command: |
      #      ./gradlew assembleRelease

  gradle-emulator-test:
    executor:
      name: android/android_machine
      tag: default

    steps:
      - checkout
      - restore_gradle_cache
      - run:
          name: Run Gradle Managed Emulator Tests
          command: ./gradlew pixel2api30FdroidDebugAndroidTest --parallel
      - save_gradle_cache

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  emulator-tests:
    jobs:
      - gradle-emulator-test:
          filters:
            branches:
              ignore:
                # Only run on pull requests
                - main

